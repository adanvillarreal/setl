
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' program1program1 : program2 program3 mainprogram2 : vars\n                | emptyprogram3 : proc program3\n                | emptyvars : datatype vars1 ';' vars2vars1 : ID ',' vars1\n             | IDvars2 : vars\n             | emptyproc : functype ID '(' proc1 ')' '{' proc3 proc4 '}' proc1 : datatype ID proc2\n             | emptyproc2 : ',' datatype ID proc2\n             | emptyproc3 : vars\n             | emptyproc4 : statement proc4\n             | emptyassignment : ID ASSIGNATOR expressioncondition : IF '(' expression ')' block condition1condition1 : ELSE block\n                  | emptyinput : READ '(' ID input1 ')' input1 : ',' ID input1\n              | emptyoutput : PRINT '(' expression output1 ')' output1 : ',' expression output1\n               | emptyfunction_call : ID '(' function_call1 ')' function_call1 : function_call2\n                      | emptyfunction_call2 : expression ',' function_call2\n                      | emptyreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operationstatement2 : condition\n                  | whilewhile : WHILE '(' expression ')' blockrelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n          | ANDexpression : exp0 expression2expression2 : logop exp0 expression2\n                 | emptyexp0 : exp exp02exp02 : relop exp02\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term exp2\n          | emptyterm : term_not factor term2term2 : muldiv factor term2\n           | emptyterm_not : '!'\n              | emptyfactor : '(' expression ')'\n            | factor2factor2 : factor3 varctefactor3 : addsub\n             | emptyvarcte : ID\n            | CTE_INT\n            | CTE_FLOAT\n            | CTE_BOOL\n            | CTE_STRING\n            | CTE_CHAR\n            | function_call\n            | map_access\n            | map_operation\n            | set_operation datatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' functype : datatype\n               | VOIDblock : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN '{' vars_aux statement_aux '}' vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '(' exp ')' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty : "
    
_lr_action_items = {'$end':([2,9,31,86,],[0,-1,-2,-107,]),'RETURN':([35,38,41,42,43,45,46,47,59,63,68,72,90,95,132,133,134,167,178,179,186,202,203,207,208,],[-114,-114,-10,-7,-11,-108,52,-109,52,-41,-50,-51,-40,-114,-17,52,-18,52,52,-52,-114,-24,-22,-104,-23,]),'READ':([35,38,41,42,43,45,46,47,59,63,68,72,90,95,132,133,134,167,178,179,186,202,203,207,208,],[-114,-114,-10,-7,-11,-108,53,-109,53,-41,-50,-51,-40,-114,-17,53,-18,53,53,-52,-114,-24,-22,-104,-23,]),'VOID':([4,5,10,11,22,35,41,42,43,187,],[-114,-3,20,-4,20,-114,-10,-7,-11,-12,]),'OPERATION':([92,171,],[129,195,]),'CHAR':([4,5,10,11,19,22,26,35,38,39,40,41,42,43,95,96,187,],[7,-3,7,-4,7,7,7,7,7,7,7,-10,-7,-11,7,7,-12,]),'ASSIGNATOR':([58,67,163,],[88,93,-111,]),'WHILE':([35,38,41,42,43,45,46,47,59,63,68,72,90,95,132,133,134,167,178,179,186,202,203,207,208,],[-114,-114,-10,-7,-11,-108,55,-109,55,-41,-50,-51,-40,-114,-17,55,-18,55,55,-52,-114,-24,-22,-104,-23,]),'PROGRAM':([0,],[1,]),'PRINT':([35,38,41,42,43,45,46,47,59,63,68,72,90,95,132,133,134,167,178,179,186,202,203,207,208,],[-114,-114,-10,-7,-11,-108,57,-109,57,-41,-50,-51,-40,-114,-17,57,-18,57,57,-52,-114,-24,-22,-104,-23,]),'!':([52,85,87,88,91,93,94,101,102,103,108,110,111,113,161,164,170,205,206,],[78,78,78,78,78,78,78,78,-68,-69,78,-60,78,-59,78,78,78,78,78,]),'GEQ':([79,81,99,104,107,109,115,116,117,118,120,121,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,163,172,173,174,183,192,196,200,204,],[-114,115,-80,-114,-67,-73,-58,115,-55,-57,-56,-53,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-111,-79,-114,-72,-113,115,-75,-37,-31,]),'SET':([4,5,10,11,19,22,26,35,38,39,40,41,42,43,95,96,187,],[8,-3,8,-4,8,8,8,8,8,8,8,-10,-7,-11,8,8,-12,]),')':([39,48,49,75,79,80,81,97,98,99,104,107,109,112,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,136,137,138,139,140,141,142,143,144,145,146,147,148,152,153,154,155,156,158,160,162,163,164,169,170,172,173,174,175,177,181,182,183,184,185,189,190,191,192,194,196,197,199,200,204,205,206,209,210,],[-114,74,-14,-114,-114,-114,-114,-16,-13,-80,-114,-67,-73,-61,-63,-58,-114,-55,-57,-64,-56,-53,-66,-54,-114,159,-114,163,165,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,172,-74,-76,-114,-114,-65,176,-27,180,-30,-111,183,-114,-114,-79,-114,-72,-62,-114,-114,200,-113,-38,-39,-15,204,-32,163,-33,-75,-26,-29,-37,-31,-114,183,-34,-35,]),'(':([33,52,53,55,57,67,69,77,78,83,85,87,88,91,93,94,101,102,103,108,110,111,113,129,146,149,150,151,161,164,170,185,194,195,205,206,210,],[39,-114,84,85,87,91,94,101,-77,-78,-114,-114,-114,-114,-114,-114,-114,-68,-69,-114,-60,-114,-59,164,170,-70,-71,101,-114,-114,-114,-78,-78,206,-114,-114,-78,]),'+':([52,77,78,79,83,85,87,88,91,93,94,99,101,102,103,104,108,110,111,113,136,137,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,161,163,164,170,172,173,183,185,194,196,200,204,205,206,210,],[-114,102,-77,102,-78,-114,-114,-114,-114,-114,-114,-80,-114,-68,-69,-114,-114,-60,-114,-59,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-70,-71,102,-76,102,-114,-111,-114,-114,-79,-114,-113,-78,-78,-75,-37,-31,-114,-114,-78,]),'*':([99,104,136,137,138,139,140,141,142,143,144,145,146,163,172,173,183,200,204,],[-80,149,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-111,-79,149,-113,-37,-31,]),'-':([52,77,78,79,83,85,87,88,91,93,94,99,101,102,103,104,108,110,111,113,136,137,138,139,140,141,142,143,144,145,146,148,149,150,151,152,153,161,163,164,170,172,173,183,185,194,196,200,204,205,206,210,],[-114,103,-77,103,-78,-114,-114,-114,-114,-114,-114,-80,-114,-68,-69,-114,-114,-60,-114,-59,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-70,-71,103,-76,103,-114,-111,-114,-114,-79,-114,-113,-78,-78,-75,-37,-31,-114,-114,-78,]),',':([6,7,12,14,16,17,18,28,34,37,75,76,79,80,81,99,104,107,109,112,114,115,116,117,118,119,120,121,122,123,124,126,136,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,163,169,172,173,174,175,177,181,183,192,193,196,200,204,],[-100,-98,-97,-99,-95,-94,-96,36,40,-101,96,-110,-114,-114,-114,-80,-114,-67,-73,-61,-63,-58,-114,-55,-57,-64,-56,-53,-66,-54,157,161,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-114,-65,-111,96,-79,-114,-72,-62,157,161,-113,-114,205,-75,-37,-31,]),'/':([99,104,136,137,138,139,140,141,142,143,144,145,146,163,172,173,183,200,204,],[-80,150,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-111,-79,150,-113,-37,-31,]),'.':([67,146,],[92,171,]),'CTE_CHAR':([52,77,78,83,85,87,88,91,93,94,100,101,102,103,105,106,108,110,111,113,149,150,151,161,164,170,185,194,205,206,210,],[-114,-114,-77,-78,-114,-114,-114,-114,-114,-114,144,-114,-68,-69,-82,-83,-114,-60,-114,-59,-70,-71,-114,-114,-114,-114,-78,-78,-114,-114,-78,]),';':([3,27,28,44,54,60,62,64,65,66,70,71,73,76,79,80,81,82,99,104,107,109,112,114,115,116,117,118,119,120,121,122,123,127,130,136,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,163,172,173,174,175,176,180,183,196,200,204,],[4,35,-9,-8,-46,-43,-47,90,-42,-49,-45,-48,-44,-110,-114,-114,-114,-36,-80,-114,-67,-73,-61,-63,-58,-114,-55,-57,-64,-56,-53,-66,-54,-112,-21,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-114,-65,-111,-79,-114,-72,-62,-25,-28,-113,-75,-37,-31,]),'<':([8,13,79,81,99,104,107,109,115,116,117,118,120,121,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,163,172,173,174,183,192,196,200,204,],[19,26,-114,121,-80,-114,-67,-73,-58,121,-55,-57,-56,-53,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-111,-79,-114,-72,-113,121,-75,-37,-31,]),'>':([6,7,12,14,16,17,18,29,37,51,76,79,81,99,104,107,109,115,116,117,118,120,121,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,163,172,173,174,183,192,196,200,204,],[-100,-98,-97,-99,-95,-94,-96,37,-101,76,-110,-114,123,-80,-114,-67,-73,-58,123,-55,-57,-56,-53,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-111,-79,-114,-72,-113,123,-75,-37,-31,]),'CTE_STRING':([52,77,78,83,85,87,88,91,93,94,100,101,102,103,105,106,108,110,111,113,149,150,151,161,164,170,185,194,205,206,210,],[-114,-114,-77,-78,-114,-114,-114,-114,-114,-114,136,-114,-68,-69,-82,-83,-114,-60,-114,-59,-70,-71,-114,-114,-114,-114,-78,-78,-114,-114,-78,]),'STRING':([4,5,10,11,19,22,26,35,38,39,40,41,42,43,95,96,187,],[12,-3,12,-4,12,12,12,12,12,12,12,-10,-7,-11,12,12,-12,]),'NOT_EQ':([79,81,99,104,107,109,115,116,117,118,120,121,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,163,172,173,174,183,192,196,200,204,],[-114,117,-80,-114,-67,-73,-58,117,-55,-57,-56,-53,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-111,-79,-114,-72,-113,117,-75,-37,-31,]),'ELSE':([186,207,],[201,-104,]),'CTE_INT':([52,77,78,83,85,87,88,91,93,94,100,101,102,103,105,106,108,110,111,113,149,150,151,161,164,170,185,194,205,206,210,],[-114,-114,-77,-78,-114,-114,-114,-114,-114,-114,145,-114,-68,-69,-82,-83,-114,-60,-114,-59,-70,-71,-114,-114,-114,-114,-78,-78,-114,-114,-78,]),'EQ':([79,81,99,104,107,109,115,116,117,118,120,121,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,163,172,173,174,183,192,196,200,204,],[-114,120,-80,-114,-67,-73,-58,120,-55,-57,-56,-53,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-111,-79,-114,-72,-113,120,-75,-37,-31,]),'ID':([1,6,7,12,14,15,16,17,18,20,24,25,35,36,37,38,41,42,43,45,46,47,50,52,59,63,68,72,76,77,78,83,84,85,87,88,90,91,93,94,95,100,101,102,103,105,106,108,110,111,113,132,133,134,135,149,150,151,157,161,164,167,170,178,179,185,186,194,202,203,205,206,207,208,210,],[3,-100,-98,-97,-99,28,-95,-94,-96,-103,33,-102,-114,28,-101,-114,-10,-7,-11,-108,67,-109,75,-114,67,-41,-50,-51,-110,-114,-77,-78,124,-114,-114,-114,-40,-114,-114,-114,-114,146,-114,-68,-69,-82,-83,-114,-60,-114,-59,-17,67,-18,169,-70,-71,-114,177,-114,-114,67,-114,67,-52,-78,-114,-78,-24,-22,-114,-114,-104,-23,-78,]),'IF':([35,38,41,42,43,45,46,47,59,63,68,72,90,95,132,133,134,167,178,179,186,202,203,207,208,],[-114,-114,-10,-7,-11,-108,69,-109,69,-41,-50,-51,-40,-114,-17,69,-18,69,69,-52,-114,-24,-22,-104,-23,]),'AND':([79,80,81,99,104,107,109,115,116,117,118,119,120,121,122,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,163,172,173,174,183,192,196,200,204,],[-114,110,-114,-80,-114,-67,-73,-58,-114,-55,-57,-64,-56,-53,-66,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,110,-65,-111,-79,-114,-72,-113,-114,-75,-37,-31,]),'MAP':([4,5,10,11,19,22,26,35,38,39,40,41,42,43,45,46,47,59,63,68,72,90,95,96,132,133,134,167,178,179,186,187,202,203,207,208,],[13,-3,13,-4,13,13,13,13,13,13,13,-10,-7,-11,-108,13,-109,13,-41,-50,-51,-40,13,13,-17,13,-18,13,13,-52,-114,-12,-24,-22,-104,-23,]),'INT':([4,5,10,11,19,22,26,35,38,39,40,41,42,43,95,96,187,],[17,-3,17,-4,17,17,17,17,17,17,17,-10,-7,-11,17,17,-12,]),'FLOAT':([4,5,10,11,19,22,26,35,38,39,40,41,42,43,95,96,187,],[16,-3,16,-4,16,16,16,16,16,16,16,-10,-7,-11,16,16,-12,]),'CTE_FLOAT':([52,77,78,83,85,87,88,91,93,94,100,101,102,103,105,106,108,110,111,113,149,150,151,161,164,170,185,194,205,206,210,],[-114,-114,-77,-78,-114,-114,-114,-114,-114,-114,139,-114,-68,-69,-82,-83,-114,-60,-114,-59,-70,-71,-114,-114,-114,-114,-78,-78,-114,-114,-78,]),'CTE_BOOL':([52,77,78,83,85,87,88,91,93,94,100,101,102,103,105,106,108,110,111,113,149,150,151,161,164,170,185,194,205,206,210,],[-114,-114,-77,-78,-114,-114,-114,-114,-114,-114,140,-114,-68,-69,-82,-83,-114,-60,-114,-59,-70,-71,-114,-114,-114,-114,-78,-78,-114,-114,-78,]),'LEQ':([79,81,99,104,107,109,115,116,117,118,120,121,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,163,172,173,174,183,192,196,200,204,],[-114,118,-80,-114,-67,-73,-58,118,-55,-57,-56,-53,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,-111,-79,-114,-72,-113,118,-75,-37,-31,]),'BOOL':([4,5,10,11,19,22,26,35,38,39,40,41,42,43,95,96,187,],[18,-3,18,-4,18,18,18,18,18,18,18,-10,-7,-11,18,18,-12,]),'{':([30,74,159,165,201,],[38,95,178,178,178,]),'MAIN':([4,5,10,11,21,22,23,32,35,41,42,43,187,],[-114,-3,-114,-4,30,-114,-6,-5,-114,-10,-7,-11,-12,]),'}':([35,38,41,42,43,45,46,47,56,59,61,63,68,72,89,90,95,132,133,134,166,167,168,178,179,186,188,198,202,203,207,208,],[-114,-114,-10,-7,-11,-108,-114,-109,86,-114,-106,-41,-50,-51,-105,-40,-114,-17,-114,-18,187,-114,-20,-114,-52,-114,-19,207,-24,-22,-104,-23,]),'OR':([79,80,81,99,104,107,109,115,116,117,118,119,120,121,122,123,136,137,138,139,140,141,142,143,144,145,146,148,152,153,154,155,163,172,173,174,183,192,196,200,204,],[-114,113,-114,-80,-114,-67,-73,-58,-114,-55,-57,-64,-56,-53,-66,-54,-88,-81,-93,-86,-87,-90,-91,-92,-89,-85,-84,-74,-76,-114,113,-65,-111,-79,-114,-72,-113,-114,-75,-37,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'set_operation1':([164,206,],[182,182,]),'input1':([124,177,],[156,197,]),'term2':([104,173,],[148,196,]),'vars':([4,35,38,95,],[5,41,45,132,]),'output1':([126,181,],[160,199,]),'map_definition':([4,10,19,22,26,35,38,39,40,46,59,95,96,133,167,178,],[6,6,6,6,6,6,6,6,6,54,54,6,6,54,54,54,]),'function_call':([100,],[141,]),'vars_aux':([38,],[46,]),'statement_aux':([46,59,178,],[56,89,198,]),'proc4':([133,167,],[166,188,]),'addsub':([77,79,151,153,],[105,108,105,108,]),'proc1':([39,],[48,]),'proc3':([95,],[133,]),'proc2':([75,169,],[98,189,]),'program1':([4,],[9,]),'program2':([4,],[10,]),'program3':([10,22,],[21,32,]),'exp2':([79,153,],[107,174,]),'exp0':([52,85,87,93,94,101,111,161,164,170,205,206,],[80,80,80,80,80,80,154,80,80,80,80,80,]),'vars2':([35,],[42,]),'vars1':([15,36,],[27,44,]),'program':([0,],[2,]),'statement':([46,59,133,167,178,],[59,59,167,167,59,]),'factor':([77,151,],[104,173,]),'input':([46,59,133,167,178,],[60,60,60,60,60,]),'main':([21,],[31,]),'proc':([10,22,],[22,22,]),'empty':([4,10,22,35,38,39,46,52,59,75,77,79,80,81,85,87,88,91,93,94,95,101,104,108,111,116,124,126,133,151,153,154,161,164,167,169,170,173,177,178,181,186,192,205,206,],[11,23,23,43,47,49,61,83,61,97,106,109,114,122,83,83,83,83,83,83,134,83,152,83,83,122,158,162,168,106,109,114,83,185,168,97,194,152,158,61,162,202,122,210,185,]),'term_not':([52,85,87,88,91,93,94,101,108,111,161,164,170,205,206,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'return':([46,59,133,167,178,],[62,62,62,62,62,]),'statement2':([46,59,133,167,178,],[63,63,63,63,63,]),'statement1':([46,59,133,167,178,],[64,64,64,64,64,]),'assignment':([46,59,133,167,178,],[65,65,65,65,65,]),'functype':([10,22,],[24,24,]),'logop':([80,154,],[111,111,]),'map_access':([46,59,100,133,167,178,],[58,58,142,58,58,58,]),'map_operation':([46,59,100,133,167,178,],[66,66,143,66,66,66,]),'expression2':([80,154,],[112,175,]),'condition':([46,59,133,167,178,],[68,68,68,68,68,]),'relop':([81,116,192,],[116,116,116,]),'varcte':([100,],[137,]),'term':([52,85,87,88,91,93,94,101,108,111,161,164,170,205,206,],[79,79,79,79,79,79,79,79,153,79,79,79,79,79,79,]),'set_definition':([4,10,19,22,26,35,38,39,40,95,96,],[14,14,14,14,14,14,14,14,14,14,14,]),'factor2':([77,151,],[99,99,]),'set_operation':([46,59,100,133,167,178,],[70,70,138,70,70,70,]),'map_assignment':([46,59,133,167,178,],[71,71,71,71,71,]),'condition1':([186,],[203,]),'factor3':([77,151,],[100,100,]),'function_call1':([170,],[190,]),'datatype':([4,10,19,22,26,35,38,39,40,95,96,],[15,25,29,25,34,15,15,50,51,15,135,]),'while':([46,59,133,167,178,],[72,72,72,72,72,]),'function_call2':([170,205,],[191,209,]),'exp':([52,85,87,88,91,93,94,101,111,161,164,170,205,206,],[81,81,81,127,128,81,81,81,81,81,81,192,81,81,]),'output':([46,59,133,167,178,],[73,73,73,73,73,]),'exp02':([81,116,192,],[119,155,119,]),'expression':([52,85,87,93,94,101,161,164,170,205,206,],[82,125,126,130,131,147,181,184,193,193,184,]),'block':([159,165,201,],[179,186,208,]),'muldiv':([104,173,],[151,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; program1','program',4,'p_program','lexer.py',93),
  ('program1 -> program2 program3 main','program1',3,'p_program1','lexer.py',96),
  ('program2 -> vars','program2',1,'p_program2','lexer.py',99),
  ('program2 -> empty','program2',1,'p_program2','lexer.py',100),
  ('program3 -> proc program3','program3',2,'p_program3','lexer.py',103),
  ('program3 -> empty','program3',1,'p_program3','lexer.py',104),
  ('vars -> datatype vars1 ; vars2','vars',4,'p_vars','lexer.py',107),
  ('vars1 -> ID , vars1','vars1',3,'p_vars1','lexer.py',110),
  ('vars1 -> ID','vars1',1,'p_vars1','lexer.py',111),
  ('vars2 -> vars','vars2',1,'p_vars2','lexer.py',114),
  ('vars2 -> empty','vars2',1,'p_vars2','lexer.py',115),
  ('proc -> functype ID ( proc1 ) { proc3 proc4 }','proc',9,'p_proc','lexer.py',118),
  ('proc1 -> datatype ID proc2','proc1',3,'p_proc1','lexer.py',121),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',122),
  ('proc2 -> , datatype ID proc2','proc2',4,'p_proc2','lexer.py',125),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',126),
  ('proc3 -> vars','proc3',1,'p_proc3','lexer.py',129),
  ('proc3 -> empty','proc3',1,'p_proc3','lexer.py',130),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',133),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',134),
  ('assignment -> ID ASSIGNATOR expression','assignment',3,'p_assignment','lexer.py',137),
  ('condition -> IF ( expression ) block condition1','condition',6,'p_condition','lexer.py',140),
  ('condition1 -> ELSE block','condition1',2,'p_condition1','lexer.py',143),
  ('condition1 -> empty','condition1',1,'p_condition1','lexer.py',144),
  ('input -> READ ( ID input1 )','input',5,'p_input','lexer.py',147),
  ('input1 -> , ID input1','input1',3,'p_input1','lexer.py',150),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',151),
  ('output -> PRINT ( expression output1 )','output',5,'p_output','lexer.py',154),
  ('output1 -> , expression output1','output1',3,'p_output1','lexer.py',157),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',158),
  ('function_call -> ID ( function_call1 )','function_call',4,'p_function_call','lexer.py',161),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',164),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',165),
  ('function_call2 -> expression , function_call2','function_call2',3,'p_function_call2','lexer.py',168),
  ('function_call2 -> empty','function_call2',1,'p_function_call2','lexer.py',169),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',172),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',175),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',178),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',179),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',182),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',183),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',186),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',187),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',188),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',189),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',190),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',191),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',192),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',193),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',196),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',197),
  ('while -> WHILE ( expression ) block','while',5,'p_while','lexer.py',200),
  ('relop -> <','relop',1,'p_relop','lexer.py',203),
  ('relop -> >','relop',1,'p_relop','lexer.py',204),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',205),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',206),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',207),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',208),
  ('logop -> OR','logop',1,'p_logop','lexer.py',211),
  ('logop -> AND','logop',1,'p_logop','lexer.py',212),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',217),
  ('expression2 -> logop exp0 expression2','expression2',3,'p_expression2','lexer.py',220),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',221),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',224),
  ('exp02 -> relop exp02','exp02',2,'p_exp02','lexer.py',227),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',228),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',231),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',234),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',235),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',238),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',239),
  ('exp2 -> addsub term exp2','exp2',3,'p_exp2','lexer.py',242),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',243),
  ('term -> term_not factor term2','term',3,'p_term','lexer.py',246),
  ('term2 -> muldiv factor term2','term2',3,'p_term2','lexer.py',249),
  ('term2 -> empty','term2',1,'p_term2','lexer.py',250),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',253),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',254),
  ('factor -> ( expression )','factor',3,'p_factor','lexer.py',257),
  ('factor -> factor2','factor',1,'p_factor','lexer.py',258),
  ('factor2 -> factor3 varcte','factor2',2,'p_factor2','lexer.py',261),
  ('factor3 -> addsub','factor3',1,'p_factor3','lexer.py',264),
  ('factor3 -> empty','factor3',1,'p_factor3','lexer.py',265),
  ('varcte -> ID','varcte',1,'p_varcte','lexer.py',268),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','lexer.py',269),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','lexer.py',270),
  ('varcte -> CTE_BOOL','varcte',1,'p_varcte','lexer.py',271),
  ('varcte -> CTE_STRING','varcte',1,'p_varcte','lexer.py',272),
  ('varcte -> CTE_CHAR','varcte',1,'p_varcte','lexer.py',273),
  ('varcte -> function_call','varcte',1,'p_varcte','lexer.py',274),
  ('varcte -> map_access','varcte',1,'p_varcte','lexer.py',275),
  ('varcte -> map_operation','varcte',1,'p_varcte','lexer.py',276),
  ('varcte -> set_operation','varcte',1,'p_varcte','lexer.py',277),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',280),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',281),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',282),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',283),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',284),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',285),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',286),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',289),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',292),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',293),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',296),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',299),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',300),
  ('main -> MAIN { vars_aux statement_aux }','main',5,'p_main','lexer.py',303),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',306),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',307),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',310),
  ('map_access -> ID ( exp )','map_access',4,'p_map_access','lexer.py',313),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',316),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',319),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',322),
]
