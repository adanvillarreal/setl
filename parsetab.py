
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OPERATION OPERATION OPERATION OPERATION OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' program1program1 : var program1\n                | program2program2 : procs main\n                | mainprocs : proc\n             | proc procsproc : datatype procA\n            | VOID procA\n            | emptyprocA : ID '(' proc1 ')' '{' proc3 '}' proc1 : datatype ID proc2\n             | emptyproc2 : ',' datatype ID proc2\n             | emptyproc3 : var proc3\n             | proc4proc4 : statement proc4\n             | emptyvars : var vars\n            | varvar : datatype var1 var1 : ID ',' var1\n             | ID var2var2 : ';' assignment : ID ASSIGNATOR expressioncondition : IF '(' expression ')' block condition1condition1 : ELSE block\n                  | emptyinput : READ '(' ID input1 ')' input1 : ',' ID input1\n              | emptyoutput : PRINT '(' expression output1 ')' output1 : ',' expression output1\n               | emptyfunction_call : ID '(' function_call1 ')' function_call1 : function_call2\n                      | emptyfunction_call2 : expression ',' function_call2\n                      | emptyreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operation\n                  | function_callstatement2 : condition\n                  | whilewhile : WHILE '(' expression ')' blockrelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n          | ANDexpression : exp0 expression2expression2 : logop exp0 expression2\n                 | emptyexp0 : exp exp02exp02 : relop exp0\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term exp2\n          | emptyterm : term_not factor term2term2 : muldiv factor term2\n           | emptyterm_not : '!'\n              | emptyfactor : '(' expression ')'\n            | factor2factor2 : factor3 varctefactor3 : addsub\n             | emptyvarcte : ID\n            | CTE_INT\n            | CTE_FLOAT\n            | CTE_BOOL\n            | CTE_STRING\n            | CTE_CHAR\n            | function_call\n            | map_access\n            | map_operation\n            | set_operation functype : datatype\n               | VOIDdatatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' block : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN '{' vars_aux statement_aux '}' vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '(' exp ')' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty :"
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,7,10,24,28,80,],[0,-1,-3,-5,-2,-4,-113,]),'ID':([2,8,11,12,13,14,15,16,17,22,25,30,31,36,37,39,40,41,42,43,44,48,50,53,56,66,67,71,75,76,82,83,85,86,87,92,93,94,95,96,97,99,108,113,115,116,118,120,121,122,123,124,125,127,129,130,132,134,135,136,140,142,144,146,147,148,151,153,156,162,164,165,187,189,199,200,201,208,210,212,213,214,],[3,27,-102,-103,-104,-105,-106,-107,-108,35,-22,35,-120,47,-24,-25,68,-114,-115,-21,47,-23,79,68,-46,-56,-57,-120,-20,-109,-45,-120,-120,110,-120,-120,-83,-84,-120,-120,-120,68,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,168,-88,-89,-116,68,68,-108,183,-120,-120,191,-120,-120,-76,-77,-84,-84,-120,68,-58,-27,-29,-120,-28,-110,]),';':([3,27,47,55,57,58,59,60,61,62,63,64,65,88,89,90,91,103,112,114,117,119,126,128,131,133,137,140,146,149,150,158,159,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,190,192,194,195,196,197,203,206,],[4,39,39,82,-47,-48,-49,-50,-51,-52,-53,-54,-55,-41,-120,-120,-120,-26,-67,-69,-70,-72,-73,-79,-120,-86,-118,-116,-51,-36,-117,-120,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-30,-33,-68,-78,-120,-85,-42,-81,]),'INT':([4,6,18,23,25,26,31,32,33,34,37,38,39,43,48,77,99,101,142,180,],[11,11,11,-10,-22,-8,11,11,11,-9,-24,11,-25,11,-23,11,11,11,11,-11,]),'FLOAT':([4,6,18,23,25,26,31,32,33,34,37,38,39,43,48,77,99,101,142,180,],[12,12,12,-10,-22,-8,12,12,12,-9,-24,12,-25,12,-23,12,12,12,12,-11,]),'BOOL':([4,6,18,23,25,26,31,32,33,34,37,38,39,43,48,77,99,101,142,180,],[13,13,13,-10,-22,-8,13,13,13,-9,-24,13,-25,13,-23,13,13,13,13,-11,]),'STRING':([4,6,18,23,25,26,31,32,33,34,37,38,39,43,48,77,99,101,142,180,],[14,14,14,-10,-22,-8,14,14,14,-9,-24,14,-25,14,-23,14,14,14,14,-11,]),'CHAR':([4,6,18,23,25,26,31,32,33,34,37,38,39,43,48,77,99,101,142,180,],[15,15,15,-10,-22,-8,15,15,15,-9,-24,15,-25,15,-23,15,15,15,15,-11,]),'MAIN':([4,6,9,18,23,25,26,29,34,37,39,48,180,],[19,19,19,-6,-10,-22,-8,-7,-9,-24,-25,-23,-11,]),'SET':([4,6,18,23,25,26,31,32,33,34,37,38,39,43,48,77,99,101,142,180,],[20,20,20,-10,-22,-8,20,20,20,-9,-24,20,-25,20,-23,20,20,20,20,-11,]),'MAP':([4,6,18,23,25,26,31,32,33,34,37,38,39,40,41,42,43,48,53,56,66,67,75,77,82,99,101,142,144,180,199,200,201,208,210,213,214,],[21,21,21,-10,-22,-8,21,21,21,-9,-24,21,-25,21,-114,-115,21,-23,21,-46,-56,-57,-20,21,-45,21,21,21,21,-11,-120,21,-58,-27,-29,-28,-110,]),'VOID':([4,6,18,23,25,26,34,37,39,48,180,],[22,22,22,-10,-22,-8,-9,-24,-25,-23,-11,]),'>':([11,12,13,14,15,16,17,45,76,90,91,98,106,126,128,131,133,140,149,150,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[-102,-103,-104,-105,-106,-107,-108,76,-109,121,-120,140,121,-73,-79,-120,-86,-116,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),',':([11,12,13,14,15,16,17,27,46,47,76,79,89,90,91,106,109,110,111,112,114,117,119,126,128,131,133,140,149,150,158,159,160,161,163,167,168,169,170,171,172,173,174,175,176,177,183,185,191,193,194,195,196,197,203,206,],[-102,-103,-104,-105,-106,-107,-108,36,77,36,-109,101,-120,-120,-120,-120,151,153,156,-67,-69,-70,-72,-73,-79,-120,-86,-116,-36,-117,-120,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,101,-119,153,156,-68,-78,-120,-85,-42,-81,]),'{':([19,78,178,179,209,],[31,99,200,200,200,]),'<':([20,21,90,91,106,126,128,131,133,149,150,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[32,33,120,-120,120,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'READ':([25,31,37,39,40,41,42,43,48,53,56,66,67,75,82,99,142,144,199,200,201,208,210,213,214,],[-22,-120,-24,-25,69,-114,-115,-21,-23,69,-46,-56,-57,-20,-45,69,69,69,-120,69,-58,-27,-29,-28,-110,]),'PRINT':([25,31,37,39,40,41,42,43,48,53,56,66,67,75,82,99,142,144,199,200,201,208,210,213,214,],[-22,-120,-24,-25,70,-114,-115,-21,-23,70,-46,-56,-57,-20,-45,70,70,70,-120,70,-58,-27,-29,-28,-110,]),'RETURN':([25,31,37,39,40,41,42,43,48,53,56,66,67,75,82,99,142,144,199,200,201,208,210,213,214,],[-22,-120,-24,-25,71,-114,-115,-21,-23,71,-46,-56,-57,-20,-45,71,71,71,-120,71,-58,-27,-29,-28,-110,]),'IF':([25,31,37,39,40,41,42,43,48,53,56,66,67,75,82,99,142,144,199,200,201,208,210,213,214,],[-22,-120,-24,-25,73,-114,-115,-21,-23,73,-46,-56,-57,-20,-45,73,73,73,-120,73,-58,-27,-29,-28,-110,]),'WHILE':([25,31,37,39,40,41,42,43,48,53,56,66,67,75,82,99,142,144,199,200,201,208,210,213,214,],[-22,-120,-24,-25,74,-114,-115,-21,-23,74,-46,-56,-57,-20,-45,74,74,74,-120,74,-58,-27,-29,-28,-110,]),'}':([25,31,37,39,40,41,42,43,48,52,53,54,56,66,67,75,81,82,99,141,142,143,144,145,181,182,199,200,201,208,210,211,213,214,],[-22,-120,-24,-25,-120,-114,-115,-21,-23,80,-120,-112,-46,-56,-57,-20,-111,-45,-120,180,-120,-17,-120,-19,-16,-18,-120,-120,-58,-27,-29,214,-28,-110,]),'(':([27,35,68,69,70,71,73,74,83,85,87,92,93,94,95,96,97,104,108,113,115,116,118,120,121,122,123,124,125,127,129,130,132,148,151,156,162,164,165,168,187,189,207,212,],[38,38,85,86,87,-120,96,97,-120,-120,-120,132,-83,-84,-120,-120,-120,148,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,-120,-120,-120,132,-76,-77,85,-84,-84,212,-120,]),')':([38,49,51,79,85,89,90,91,100,102,105,106,107,108,110,111,112,114,117,119,126,128,131,133,138,139,148,149,150,151,152,154,155,157,158,159,160,161,163,166,167,168,169,170,171,172,173,174,175,176,177,183,184,185,186,187,188,189,191,193,194,195,196,197,202,203,204,205,206,212,],[-120,78,-13,-120,-120,-120,-120,-120,-12,-15,149,150,-37,-38,-120,-120,-67,-69,-70,-72,-73,-79,-120,-86,178,179,185,-36,-117,-120,190,-32,192,-35,-120,-71,-120,-80,-82,197,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-120,203,-119,-43,-44,-39,-40,-120,-120,-68,-78,-120,-85,-14,-42,-31,-34,-81,185,]),'ASSIGNATOR':([68,72,150,],[83,95,-117,]),'.':([68,168,],[84,198,]),'!':([71,83,85,87,95,96,97,113,115,116,118,120,121,122,123,124,125,127,129,130,132,148,151,156,212,],[93,93,93,93,93,93,93,93,-65,-66,93,-59,-60,-61,-62,-63,-64,93,-74,-75,93,93,93,93,93,]),'+':([71,83,85,87,91,92,93,94,95,96,97,108,113,115,116,118,120,121,122,123,124,125,127,129,130,131,132,133,148,149,150,151,156,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,185,187,189,196,197,203,206,212,],[-120,-120,-120,-120,129,129,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,-120,-86,-120,-36,-117,-120,-120,129,-80,129,-82,-76,-77,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-84,-84,-120,-85,-42,-81,-120,]),'-':([71,83,85,87,91,92,93,94,95,96,97,108,113,115,116,118,120,121,122,123,124,125,127,129,130,131,132,133,148,149,150,151,156,160,161,162,163,164,165,167,168,169,170,171,172,173,174,175,176,177,185,187,189,196,197,203,206,212,],[-120,-120,-120,-120,130,130,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,-120,-86,-120,-36,-117,-120,-120,130,-80,130,-82,-76,-77,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-84,-84,-120,-85,-42,-81,-120,]),'CTE_INT':([71,83,85,87,92,93,94,95,96,97,108,113,115,116,118,120,121,122,123,124,125,127,129,130,132,134,135,136,148,151,156,162,164,165,187,189,212,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,169,-88,-89,-120,-120,-120,-120,-76,-77,-84,-84,-120,]),'CTE_FLOAT':([71,83,85,87,92,93,94,95,96,97,108,113,115,116,118,120,121,122,123,124,125,127,129,130,132,134,135,136,148,151,156,162,164,165,187,189,212,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,170,-88,-89,-120,-120,-120,-120,-76,-77,-84,-84,-120,]),'CTE_BOOL':([71,83,85,87,92,93,94,95,96,97,108,113,115,116,118,120,121,122,123,124,125,127,129,130,132,134,135,136,148,151,156,162,164,165,187,189,212,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,171,-88,-89,-120,-120,-120,-120,-76,-77,-84,-84,-120,]),'CTE_STRING':([71,83,85,87,92,93,94,95,96,97,108,113,115,116,118,120,121,122,123,124,125,127,129,130,132,134,135,136,148,151,156,162,164,165,187,189,212,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,172,-88,-89,-120,-120,-120,-120,-76,-77,-84,-84,-120,]),'CTE_CHAR':([71,83,85,87,92,93,94,95,96,97,108,113,115,116,118,120,121,122,123,124,125,127,129,130,132,134,135,136,148,151,156,162,164,165,187,189,212,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,173,-88,-89,-120,-120,-120,-120,-76,-77,-84,-84,-120,]),'OPERATION':([84,198,],[104,207,]),'OR':([89,90,91,106,117,119,126,128,131,133,149,150,158,159,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[115,-120,-120,-120,-70,-72,-73,-79,-120,-86,-36,-117,115,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'AND':([89,90,91,106,117,119,126,128,131,133,149,150,158,159,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[116,-120,-120,-120,-70,-72,-73,-79,-120,-86,-36,-117,116,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'NOT_EQ':([90,91,106,126,128,131,133,149,150,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[122,-120,122,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'EQ':([90,91,106,126,128,131,133,149,150,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[123,-120,123,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'LEQ':([90,91,106,126,128,131,133,149,150,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[124,-120,124,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'GEQ':([90,91,106,126,128,131,133,149,150,160,161,163,167,168,169,170,171,172,173,174,175,176,177,185,195,196,197,203,206,],[125,-120,125,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'*':([131,133,149,150,167,168,169,170,171,172,173,174,175,176,177,185,196,197,203,],[164,-86,-36,-117,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,164,-85,-42,]),'/':([131,133,149,150,167,168,169,170,171,172,173,174,175,176,177,185,196,197,203,],[165,-86,-36,-117,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,165,-85,-42,]),'ELSE':([199,214,],[209,-110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program1':([4,6,],[5,24,]),'var':([4,6,31,43,99,142,],[6,6,43,43,142,142,]),'program2':([4,6,],[7,7,]),'datatype':([4,6,18,31,32,33,38,43,77,99,101,142,],[8,8,30,44,45,46,50,44,98,44,147,44,]),'procs':([4,6,18,],[9,9,29,]),'main':([4,6,9,],[10,10,28,]),'set_definition':([4,6,18,31,32,33,38,43,77,99,101,142,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'map_definition':([4,6,18,31,32,33,38,40,43,53,77,99,101,142,144,200,],[17,17,17,17,17,17,17,61,17,61,17,146,17,146,61,61,]),'proc':([4,6,18,],[18,18,18,]),'empty':([4,6,18,31,38,40,53,71,79,83,85,87,89,90,91,92,95,96,97,99,106,110,111,113,118,127,131,132,142,144,148,151,156,158,160,162,183,191,193,196,199,200,212,],[23,23,23,42,51,54,54,94,102,94,108,94,114,119,128,136,94,94,94,145,119,154,157,94,94,94,163,94,145,145,187,189,94,114,128,136,102,154,157,163,210,54,187,]),'var1':([8,36,44,],[25,48,25,]),'procA':([8,22,30,],[26,34,26,]),'var2':([27,47,],[37,37,]),'vars_aux':([31,],[40,]),'vars':([31,43,],[41,75,]),'proc1':([38,],[49,]),'statement_aux':([40,53,200,],[52,81,211,]),'statement':([40,53,99,142,144,200,],[53,53,144,144,144,53,]),'statement1':([40,53,99,142,144,200,],[55,55,55,55,55,55,]),'statement2':([40,53,99,142,144,200,],[56,56,56,56,56,56,]),'assignment':([40,53,99,142,144,200,],[57,57,57,57,57,57,]),'input':([40,53,99,142,144,200,],[58,58,58,58,58,58,]),'output':([40,53,99,142,144,200,],[59,59,59,59,59,59,]),'set_operation':([40,53,99,134,142,144,200,],[60,60,60,177,60,60,60,]),'return':([40,53,99,142,144,200,],[62,62,62,62,62,62,]),'map_assignment':([40,53,99,142,144,200,],[63,63,63,63,63,63,]),'map_operation':([40,53,99,134,142,144,200,],[64,64,64,176,64,64,64,]),'function_call':([40,53,99,134,142,144,200,],[65,65,65,174,65,65,65,]),'condition':([40,53,99,142,144,200,],[66,66,66,66,66,66,]),'while':([40,53,99,142,144,200,],[67,67,67,67,67,67,]),'map_access':([40,53,99,134,142,144,200,],[72,72,72,175,72,72,72,]),'expression':([71,83,85,87,96,97,132,148,151,156,212,],[88,103,109,111,138,139,166,186,109,193,186,]),'exp0':([71,83,85,87,96,97,113,118,132,148,151,156,212,],[89,89,89,89,89,89,158,159,89,89,89,89,89,]),'exp':([71,83,85,87,95,96,97,113,118,132,148,151,156,212,],[90,90,106,90,137,90,90,90,90,90,90,90,90,90,]),'term':([71,83,85,87,95,96,97,113,118,127,132,148,151,156,212,],[91,91,91,91,91,91,91,91,91,160,91,91,91,91,91,]),'term_not':([71,83,85,87,95,96,97,113,118,127,132,148,151,156,212,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'proc2':([79,183,],[100,202,]),'function_call1':([85,],[105,]),'function_call2':([85,151,],[107,188,]),'expression2':([89,158,],[112,194,]),'logop':([89,158,],[113,113,]),'exp02':([90,106,],[117,117,]),'relop':([90,106,],[118,118,]),'exp2':([91,160,],[126,195,]),'addsub':([91,92,160,162,],[127,135,127,135,]),'factor':([92,162,],[131,196,]),'factor2':([92,162,],[133,133,]),'factor3':([92,162,],[134,134,]),'proc3':([99,142,],[141,181,]),'proc4':([99,142,144,],[143,143,182,]),'input1':([110,191,],[152,204,]),'output1':([111,193,],[155,205,]),'term2':([131,196,],[161,206,]),'muldiv':([131,196,],[162,162,]),'varcte':([134,],[167,]),'set_operation1':([148,212,],[184,184,]),'block':([178,179,209,],[199,201,213,]),'condition1':([199,],[208,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; program1','program',4,'p_program','lexer.py',99),
  ('program1 -> var program1','program1',2,'p_program1','lexer.py',102),
  ('program1 -> program2','program1',1,'p_program1','lexer.py',103),
  ('program2 -> procs main','program2',2,'p_program2','lexer.py',106),
  ('program2 -> main','program2',1,'p_program2','lexer.py',107),
  ('procs -> proc','procs',1,'p_procs','lexer.py',110),
  ('procs -> proc procs','procs',2,'p_procs','lexer.py',111),
  ('proc -> datatype procA','proc',2,'p_proc','lexer.py',114),
  ('proc -> VOID procA','proc',2,'p_proc','lexer.py',115),
  ('proc -> empty','proc',1,'p_proc','lexer.py',116),
  ('procA -> ID ( proc1 ) { proc3 }','procA',7,'p_procA','lexer.py',118),
  ('proc1 -> datatype ID proc2','proc1',3,'p_proc1','lexer.py',121),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',122),
  ('proc2 -> , datatype ID proc2','proc2',4,'p_proc2','lexer.py',125),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',126),
  ('proc3 -> var proc3','proc3',2,'p_proc3','lexer.py',129),
  ('proc3 -> proc4','proc3',1,'p_proc3','lexer.py',130),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',133),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',134),
  ('vars -> var vars','vars',2,'p_vars','lexer.py',161),
  ('vars -> var','vars',1,'p_vars','lexer.py',162),
  ('var -> datatype var1','var',2,'p_var','lexer.py',165),
  ('var1 -> ID , var1','var1',3,'p_var1','lexer.py',168),
  ('var1 -> ID var2','var1',2,'p_var1','lexer.py',169),
  ('var2 -> ;','var2',1,'p_var2','lexer.py',172),
  ('assignment -> ID ASSIGNATOR expression','assignment',3,'p_assignment','lexer.py',192),
  ('condition -> IF ( expression ) block condition1','condition',6,'p_condition','lexer.py',195),
  ('condition1 -> ELSE block','condition1',2,'p_condition1','lexer.py',198),
  ('condition1 -> empty','condition1',1,'p_condition1','lexer.py',199),
  ('input -> READ ( ID input1 )','input',5,'p_input','lexer.py',202),
  ('input1 -> , ID input1','input1',3,'p_input1','lexer.py',205),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',206),
  ('output -> PRINT ( expression output1 )','output',5,'p_output','lexer.py',209),
  ('output1 -> , expression output1','output1',3,'p_output1','lexer.py',212),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',213),
  ('function_call -> ID ( function_call1 )','function_call',4,'p_function_call','lexer.py',216),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',219),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',220),
  ('function_call2 -> expression , function_call2','function_call2',3,'p_function_call2','lexer.py',223),
  ('function_call2 -> empty','function_call2',1,'p_function_call2','lexer.py',224),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',227),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',230),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',233),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',234),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',237),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',238),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',241),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',242),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',243),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',244),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',245),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',246),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',247),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',248),
  ('statement1 -> function_call','statement1',1,'p_statement1','lexer.py',249),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',252),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',253),
  ('while -> WHILE ( expression ) block','while',5,'p_while','lexer.py',256),
  ('relop -> <','relop',1,'p_relop','lexer.py',259),
  ('relop -> >','relop',1,'p_relop','lexer.py',260),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',261),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',262),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',263),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',264),
  ('logop -> OR','logop',1,'p_logop','lexer.py',267),
  ('logop -> AND','logop',1,'p_logop','lexer.py',268),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',273),
  ('expression2 -> logop exp0 expression2','expression2',3,'p_expression2','lexer.py',276),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',277),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',280),
  ('exp02 -> relop exp0','exp02',2,'p_exp02','lexer.py',283),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',284),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',287),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',290),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',291),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',294),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',295),
  ('exp2 -> addsub term exp2','exp2',3,'p_exp2','lexer.py',298),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',299),
  ('term -> term_not factor term2','term',3,'p_term','lexer.py',302),
  ('term2 -> muldiv factor term2','term2',3,'p_term2','lexer.py',305),
  ('term2 -> empty','term2',1,'p_term2','lexer.py',306),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',309),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',310),
  ('factor -> ( expression )','factor',3,'p_factor','lexer.py',313),
  ('factor -> factor2','factor',1,'p_factor','lexer.py',314),
  ('factor2 -> factor3 varcte','factor2',2,'p_factor2','lexer.py',317),
  ('factor3 -> addsub','factor3',1,'p_factor3','lexer.py',320),
  ('factor3 -> empty','factor3',1,'p_factor3','lexer.py',321),
  ('varcte -> ID','varcte',1,'p_varcte','lexer.py',324),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','lexer.py',325),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','lexer.py',326),
  ('varcte -> CTE_BOOL','varcte',1,'p_varcte','lexer.py',327),
  ('varcte -> CTE_STRING','varcte',1,'p_varcte','lexer.py',328),
  ('varcte -> CTE_CHAR','varcte',1,'p_varcte','lexer.py',329),
  ('varcte -> function_call','varcte',1,'p_varcte','lexer.py',330),
  ('varcte -> map_access','varcte',1,'p_varcte','lexer.py',331),
  ('varcte -> map_operation','varcte',1,'p_varcte','lexer.py',332),
  ('varcte -> set_operation','varcte',1,'p_varcte','lexer.py',333),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',336),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',337),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',340),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',341),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',342),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',343),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',344),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',345),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',346),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',349),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',352),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',355),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',356),
  ('main -> MAIN { vars_aux statement_aux }','main',5,'p_main','lexer.py',359),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',362),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',363),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',366),
  ('map_access -> ID ( exp )','map_access',4,'p_map_access','lexer.py',369),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',372),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',375),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',378),
]
