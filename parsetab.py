
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OPERATION OPERATION OPERATION OPERATION OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' program1program1 : var program1\n                | program2program2 : proc program2\n                | mainprocs : proc\n             | proc procsproc : proca1 procA\n            | VOID procA\n            | emptyproca1 :  datatype ID '(' procA : proc1 ')' '{' proc3 '}' proc1 : datatype ID proc2\n             | emptyproc2 : ',' datatype ID proc2\n             | emptyproc3 : var proc3\n             | proc4proc4 : statement proc4\n             | emptyvars : var vars\n            | varvar : datatype var1 var1 : ID ',' var1\n             | ID var2var2 : ';' assignment : ID ASSIGNATOR expressioncondition : IF '(' expression ')' block condition1condition1 : ELSE block\n                  | emptyinput : READ '(' ID input1 ')' input1 : ',' ID input1\n              | emptyoutput : PRINT '(' expression output1 ')' output1 : ',' expression output1\n               | emptyfunction_call : ID '(' function_call1 ')' function_call1 : empty\n                      | function_call2function_call2 : expression ',' function_call2\n                      | expressionreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operation\n                  | function_callstatement2 : condition\n                  | whilewhile : WHILE '(' expression ')' blockrelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n           | ANDexpression : exp0 expression2expression2 : logop exp0 n_quad_logop expression2\n                 | emptyn_quad_logop : exp0 : exp exp02exp02 : relop exp\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term n_quad_addsub exp2\n          | emptyterm : term_not factor n_quad_muldiv term2n_quad_muldiv : n_quad_addsub : term2 : muldiv factor n_quad_muldiv term2\n           | n_quad_notn_quad_not : term_not : '!'\n              | emptyfactor : '(' n_push_false_bottom expression ')' n_pop_false_bottom\n            | varcten_push_false_bottom : n_pop_false_bottom : varcte : ID n_push_operand\n            | varcte1n_push_operand : varcte1 : CTE_INT\n               | CTE_FLOAT\n               | CTE_BOOL\n               | CTE_STRING\n               | CTE_CHAR\n               | function_call\n               | map_access\n               | map_operation\n               | set_operationfunctype : datatype\n               | VOIDdatatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' block : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN n_clear_scope '{' vars_aux statement_aux '}'  n_clear_scope : vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '(' exp ')' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty :"
    
_lr_action_items = {'$end':([2,9,10,13,30,31,113,],[0,-1,-3,-5,-2,-4,-119,]),'RETURN':([34,42,45,46,47,53,55,56,57,58,69,71,72,80,83,89,91,106,191,192,200,211,212,215,216,],[-23,-25,-26,-127,60,-24,-121,60,-22,-122,-47,60,60,-57,-58,60,-21,-46,60,-59,-127,-30,-28,-116,-29,]),'READ':([34,42,45,46,47,53,55,56,57,58,69,71,72,80,83,89,91,106,191,192,200,211,212,215,216,],[-23,-25,-26,-127,61,-24,-121,61,-22,-122,-47,61,61,-57,-58,61,-21,-46,61,-59,-127,-30,-28,-116,-29,]),'VOID':([4,12,14,15,27,29,34,42,45,53,102,],[5,5,5,-10,-9,-8,-23,-25,-26,-24,-12,]),'OPERATION':([108,163,],[157,186,]),'CHAR':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,72,102,],[7,7,7,7,7,-10,-9,7,-8,7,-23,-25,-11,-26,7,7,7,7,-24,7,7,-12,]),'ASSIGNATOR':([70,79,176,],[103,109,-124,]),'WHILE':([34,42,45,46,47,53,55,56,57,58,69,71,72,80,83,89,91,106,191,192,200,211,212,215,216,],[-23,-25,-26,-127,65,-24,-121,65,-22,-122,-47,65,65,-57,-58,65,-21,-46,65,-59,-127,-30,-28,-116,-29,]),'PROGRAM':([0,],[1,]),'PRINT':([34,42,45,46,47,53,55,56,57,58,69,71,72,80,83,89,91,106,191,192,200,211,212,215,216,],[-23,-25,-26,-127,66,-24,-121,66,-22,-122,-47,66,66,-57,-58,66,-21,-46,66,-59,-127,-30,-28,-116,-29,]),'!':([60,100,101,103,107,109,110,117,130,131,132,134,135,137,139,140,141,142,144,145,147,161,173,177,178,203,],[95,95,95,95,95,95,95,-92,-76,-77,95,-67,95,-66,-65,95,-62,-64,-63,-60,-61,95,95,95,95,95,]),'GEQ':([93,96,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,154,162,164,165,175,176,181,183,187,197,201,202,204,209,213,214,217,],[-127,139,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,139,-87,-94,-84,-37,-124,-82,-86,-127,-126,-93,-83,-80,-43,-90,-87,-85,]),'SET':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,72,102,],[8,8,8,8,8,-10,-9,8,-8,8,-23,-25,-11,-26,8,8,8,8,-24,8,8,-12,]),')':([5,11,24,25,38,43,49,50,93,94,96,107,111,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,136,138,143,146,148,149,150,152,153,154,155,156,159,160,162,164,165,166,167,168,170,172,174,175,176,178,180,181,183,187,188,190,194,195,196,197,198,199,201,202,203,204,205,206,208,209,213,214,217,],[-127,-127,37,-14,-127,-11,-16,-13,-127,-127,-127,-127,-127,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,-68,-70,-72,-74,-127,171,-127,175,-39,176,-41,-38,179,-15,-87,-94,-84,-71,-73,189,-33,193,-36,-37,-124,197,201,-82,-86,-127,-127,-127,-127,-40,209,-126,-44,-45,-93,-83,197,-80,-69,-32,-35,-43,-90,-87,-85,]),'(':([35,40,60,61,65,66,79,81,92,95,98,100,101,103,107,109,110,117,122,130,131,132,134,135,137,139,140,141,142,144,145,147,156,157,161,173,177,178,182,184,185,186,199,203,],[43,43,-127,99,100,101,107,110,117,-88,-89,-127,-127,-127,-127,-127,-127,-92,107,-76,-77,-127,-67,-127,-66,-65,-127,-62,-64,-63,-60,-61,-89,178,-127,-127,-127,-127,-78,-79,117,203,-89,-127,]),'+':([93,115,116,118,119,120,121,122,123,124,125,126,127,128,162,164,165,175,176,181,183,187,197,201,202,209,213,214,217,],[130,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-87,-94,-84,-37,-124,-82,-86,130,-126,-93,-83,-43,-90,-87,-85,]),'*':([115,116,118,119,120,121,122,123,124,125,126,127,128,162,164,175,176,197,201,202,209,213,214,],[-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,182,-94,-37,-124,-126,-93,-83,-43,-90,182,]),'-':([93,115,116,118,119,120,121,122,123,124,125,126,127,128,162,164,165,175,176,181,183,187,197,201,202,209,213,214,217,],[131,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-87,-94,-84,-37,-124,-82,-86,131,-126,-93,-83,-43,-90,-87,-85,]),',':([6,7,16,18,20,21,22,35,38,41,51,54,93,94,96,111,112,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,136,138,143,146,148,150,154,155,162,164,165,166,167,175,176,181,183,187,188,190,194,197,201,202,204,205,209,213,214,217,],[-114,-112,-111,-113,-109,-108,-110,44,48,52,-115,44,-127,-127,-127,48,-123,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,-68,-70,-72,-74,169,173,-127,177,-87,-94,-84,-71,-73,-37,-124,-82,-86,-127,-127,169,173,-126,-93,-83,-80,-69,-43,-90,-87,-85,]),'/':([115,116,118,119,120,121,122,123,124,125,126,127,128,162,164,175,176,197,201,202,209,213,214,],[-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,184,-94,-37,-124,-126,-93,-83,-43,-90,184,]),'.':([79,122,],[108,163,]),'CTE_CHAR':([60,92,95,98,100,101,103,107,109,110,117,130,131,132,134,135,137,139,140,141,142,144,145,147,156,161,173,177,178,182,184,185,199,203,],[-127,119,-88,-89,-127,-127,-127,-127,-127,-127,-92,-76,-77,-127,-67,-127,-66,-65,-127,-62,-64,-63,-60,-61,-89,-127,-127,-127,-127,-78,-79,119,-89,-127,]),';':([3,35,54,62,63,64,73,75,76,77,78,82,84,87,93,94,96,97,112,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,136,138,143,146,151,158,162,164,165,166,167,175,176,181,183,187,188,189,193,197,201,202,204,205,209,213,214,217,],[4,45,45,-54,-52,-56,-49,106,-48,-53,-55,-51,-50,-52,-127,-127,-127,-42,-123,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,-68,-70,-72,-74,-125,-27,-87,-94,-84,-71,-73,-37,-124,-82,-86,-127,-127,-31,-34,-126,-93,-83,-80,-69,-43,-90,-87,-85,]),'<':([8,17,93,96,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,154,162,164,165,175,176,181,183,187,197,201,202,204,209,213,214,217,],[28,33,-127,145,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,145,-87,-94,-84,-37,-124,-82,-86,-127,-126,-93,-83,-80,-43,-90,-87,-85,]),'>':([6,7,16,18,20,21,22,39,51,86,93,96,112,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,154,162,164,165,175,176,181,183,187,197,201,202,204,209,213,214,217,],[-114,-112,-111,-113,-109,-108,-110,51,-115,112,-127,147,-123,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,147,-87,-94,-84,-37,-124,-82,-86,-127,-126,-93,-83,-80,-43,-90,-87,-85,]),'CTE_STRING':([60,92,95,98,100,101,103,107,109,110,117,130,131,132,134,135,137,139,140,141,142,144,145,147,156,161,173,177,178,182,184,185,199,203,],[-127,127,-88,-89,-127,-127,-127,-127,-127,-127,-92,-76,-77,-127,-67,-127,-66,-65,-127,-62,-64,-63,-60,-61,-89,-127,-127,-127,-127,-78,-79,127,-89,-127,]),'STRING':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,72,102,],[16,16,16,16,16,-10,-9,16,-8,16,-23,-25,-11,-26,16,16,16,16,-24,16,16,-12,]),'NOT_EQ':([93,96,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,154,162,164,165,175,176,181,183,187,197,201,202,204,209,213,214,217,],[-127,141,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,141,-87,-94,-84,-37,-124,-82,-86,-127,-126,-93,-83,-80,-43,-90,-87,-85,]),'ELSE':([200,215,],[210,-116,]),'CTE_INT':([60,92,95,98,100,101,103,107,109,110,117,130,131,132,134,135,137,139,140,141,142,144,145,147,156,161,173,177,178,182,184,185,199,203,],[-127,121,-88,-89,-127,-127,-127,-127,-127,-127,-92,-76,-77,-127,-67,-127,-66,-65,-127,-62,-64,-63,-60,-61,-89,-127,-127,-127,-127,-78,-79,121,-89,-127,]),'EQ':([93,96,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,154,162,164,165,175,176,181,183,187,197,201,202,204,209,213,214,217,],[-127,144,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,144,-87,-94,-84,-37,-124,-82,-86,-127,-126,-93,-83,-80,-43,-90,-87,-85,]),'ID':([1,6,7,16,18,19,20,21,22,26,32,34,42,44,45,46,47,51,53,55,56,57,58,59,60,63,69,71,72,80,83,85,89,91,92,95,98,99,100,101,103,106,107,109,110,112,117,130,131,132,134,135,137,139,140,141,142,144,145,147,156,161,169,173,177,178,182,184,185,191,192,199,200,203,211,212,215,216,],[3,-114,-112,-111,-113,35,-109,-108,-110,38,40,-23,-25,54,-26,-127,79,-115,-24,-121,79,-22,-122,54,-127,-114,-47,79,79,-57,-58,111,79,-21,122,-88,-89,148,-127,-127,-127,-46,-127,-127,-127,-123,-92,-76,-77,-127,-67,-127,-66,-65,-127,-62,-64,-63,-60,-61,-89,-127,190,-127,-127,-127,-78,-79,122,79,-59,-89,-127,-127,-30,-28,-116,-29,]),'IF':([34,42,45,46,47,53,55,56,57,58,69,71,72,80,83,89,91,106,191,192,200,211,212,215,216,],[-23,-25,-26,-127,81,-24,-121,81,-22,-122,-47,81,81,-57,-58,81,-21,-46,81,-59,-127,-30,-28,-116,-29,]),'AND':([93,94,96,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,143,146,154,162,164,165,166,167,175,176,181,183,187,188,197,201,202,204,209,213,214,217,],[-127,134,-127,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,-72,-74,-127,-87,-94,-84,-71,-73,-37,-124,-82,-86,-127,134,-126,-93,-83,-80,-43,-90,-87,-85,]),'MAP':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,55,56,57,58,69,71,72,80,83,89,91,102,106,191,192,200,211,212,215,216,],[17,17,17,17,17,-10,-9,17,-8,17,-23,-25,-11,-26,17,17,17,17,-24,-121,17,17,-122,-47,17,17,-57,-58,17,-21,-12,-46,17,-59,-127,-30,-28,-116,-29,]),'INT':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,72,102,],[21,21,21,21,21,-10,-9,21,-8,21,-23,-25,-11,-26,21,21,21,21,-24,21,21,-12,]),'FLOAT':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,72,102,],[20,20,20,20,20,-10,-9,20,-8,20,-23,-25,-11,-26,20,20,20,20,-24,20,20,-12,]),'CTE_FLOAT':([60,92,95,98,100,101,103,107,109,110,117,130,131,132,134,135,137,139,140,141,142,144,145,147,156,161,173,177,178,182,184,185,199,203,],[-127,125,-88,-89,-127,-127,-127,-127,-127,-127,-92,-76,-77,-127,-67,-127,-66,-65,-127,-62,-64,-63,-60,-61,-89,-127,-127,-127,-127,-78,-79,125,-89,-127,]),'CTE_BOOL':([60,92,95,98,100,101,103,107,109,110,117,130,131,132,134,135,137,139,140,141,142,144,145,147,156,161,173,177,178,182,184,185,199,203,],[-127,126,-88,-89,-127,-127,-127,-127,-127,-127,-92,-76,-77,-127,-67,-127,-66,-65,-127,-62,-64,-63,-60,-61,-89,-127,-127,-127,-127,-78,-79,126,-89,-127,]),'LEQ':([93,96,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,154,162,164,165,175,176,181,183,187,197,201,202,204,209,213,214,217,],[-127,142,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,142,-87,-94,-84,-37,-124,-82,-86,-127,-126,-93,-83,-80,-43,-90,-87,-85,]),'BOOL':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,72,102,],[22,22,22,22,22,-10,-9,22,-8,22,-23,-25,-11,-26,22,22,22,22,-24,22,22,-12,]),'{':([23,36,37,171,179,210,],[-120,46,47,191,191,191,]),'MAIN':([4,12,14,15,27,29,34,42,45,53,102,],[23,23,23,-10,-9,-8,-23,-25,-26,-24,-12,]),'}':([34,42,45,46,47,53,55,56,57,58,67,68,69,71,72,74,80,83,88,89,90,91,104,105,106,114,191,192,200,207,211,212,215,216,],[-23,-25,-26,-127,-127,-24,-121,-127,-22,-122,-18,102,-47,-127,-127,-20,-57,-58,113,-127,-118,-21,-19,-17,-46,-117,-127,-59,-127,215,-30,-28,-116,-29,]),'OR':([93,94,96,115,116,118,119,120,121,122,123,124,125,126,127,128,129,133,143,146,154,162,164,165,166,167,175,176,181,183,187,188,197,201,202,204,209,213,214,217,],[-127,137,-127,-102,-95,-83,-101,-104,-97,-96,-91,-105,-98,-99,-100,-103,-75,-81,-72,-74,-127,-87,-94,-84,-71,-73,-37,-124,-82,-86,-127,137,-126,-93,-83,-80,-43,-90,-87,-85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'n_quad_muldiv':([118,202,],[162,214,]),'input1':([148,190,],[168,206,]),'term2':([162,214,],[181,217,]),'vars':([46,57,],[55,91,]),'set_operation1':([178,203,],[196,196,]),'n_clear_scope':([23,],[36,]),'output1':([150,194,],[172,208,]),'map_definition':([4,5,11,12,14,28,33,46,47,48,52,56,57,71,72,89,191,],[6,6,6,6,6,6,6,6,63,6,6,87,6,87,63,87,87,]),'function_call':([47,56,71,72,89,92,185,191,],[64,64,64,64,64,115,115,64,]),'vars_aux':([46,],[56,]),'statement_aux':([56,89,191,],[88,114,207,]),'proc4':([47,71,72,],[67,104,67,]),'return':([47,56,71,72,89,191,],[77,77,77,77,77,77,]),'addsub':([93,187,],[132,132,]),'proc1':([5,11,],[24,24,]),'proc3':([47,72,],[68,105,]),'proc2':([38,111,],[50,160,]),'program1':([4,12,],[9,30,]),'program2':([4,12,14,],[10,10,31,]),'map_access':([47,56,71,72,89,92,185,191,],[70,70,70,70,70,128,128,70,]),'exp2':([93,187,],[129,204,]),'exp0':([60,100,101,107,109,110,135,161,173,177,178,203,],[94,94,94,94,94,94,166,94,94,94,94,94,]),'proca1':([4,12,14,],[11,11,11,]),'n_pop_false_bottom':([201,],[213,]),'n_push_operand':([122,],[164,]),'program':([0,],[2,]),'statement':([47,56,71,72,89,191,],[71,89,71,71,89,89,]),'factor':([92,185,],[118,202,]),'var':([4,12,46,47,57,72,],[12,12,57,72,57,72,]),'input':([47,56,71,72,89,191,],[73,73,73,73,73,73,]),'n_quad_logop':([166,],[188,]),'main':([4,12,14,],[13,13,13,]),'proc':([4,12,14,],[14,14,14,]),'empty':([4,5,11,12,14,38,46,47,56,60,71,72,89,93,94,96,100,101,103,107,109,110,111,132,135,140,148,150,154,161,173,177,178,187,188,190,191,194,200,203,],[15,25,25,15,15,49,58,74,90,98,74,74,90,133,138,146,98,98,98,156,98,98,49,98,98,98,170,174,146,98,98,98,199,133,138,170,90,174,211,199,]),'term_not':([60,100,101,103,107,109,110,132,135,140,161,173,177,178,203,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'var1':([19,44,59,],[34,53,34,]),'statement2':([47,56,71,72,89,191,],[69,69,69,69,69,69,]),'statement1':([47,56,71,72,89,191,],[75,75,75,75,75,75,]),'var2':([35,54,],[42,42,]),'assignment':([47,56,71,72,89,191,],[76,76,76,76,76,76,]),'logop':([94,188,],[135,135,]),'n_push_false_bottom':([117,],[161,]),'condition1':([200,],[212,]),'map_operation':([47,56,71,72,89,92,185,191,],[78,78,78,78,78,120,120,78,]),'expression2':([94,188,],[136,205,]),'condition':([47,56,71,72,89,191,],[80,80,80,80,80,80,]),'varcte':([92,185,],[123,123,]),'term':([60,100,101,103,107,109,110,132,135,140,161,173,177,178,203,],[93,93,93,93,93,93,93,165,93,93,93,93,93,93,93,]),'set_definition':([4,5,11,12,14,28,33,46,47,48,52,57,72,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'set_operation':([47,56,71,72,89,92,185,191,],[82,82,82,82,82,124,124,82,]),'map_assignment':([47,56,71,72,89,191,],[62,62,62,62,62,62,]),'varcte1':([92,185,],[116,116,]),'relop':([96,154,],[140,140,]),'procA':([5,11,],[27,29,]),'function_call1':([107,],[152,]),'datatype':([4,5,11,12,14,28,33,46,47,48,52,57,72,],[19,26,26,19,32,39,41,59,59,85,86,59,59,]),'while':([47,56,71,72,89,191,],[83,83,83,83,83,83,]),'function_call2':([107,177,],[153,195,]),'exp':([60,100,101,103,107,109,110,135,140,161,173,177,178,203,],[96,96,96,151,154,96,96,96,167,96,96,96,96,96,]),'n_quad_addsub':([165,],[187,]),'output':([47,56,71,72,89,191,],[84,84,84,84,84,84,]),'exp02':([96,154,],[143,143,]),'n_quad_not':([162,214,],[183,183,]),'expression':([60,100,101,107,109,110,161,173,177,178,203,],[97,149,150,155,158,159,180,194,155,198,198,]),'block':([171,179,210,],[192,200,216,]),'muldiv':([162,214,],[185,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; program1','program',4,'p_program','lexer.py',125),
  ('program1 -> var program1','program1',2,'p_program1','lexer.py',129),
  ('program1 -> program2','program1',1,'p_program1','lexer.py',130),
  ('program2 -> proc program2','program2',2,'p_program2','lexer.py',133),
  ('program2 -> main','program2',1,'p_program2','lexer.py',134),
  ('procs -> proc','procs',1,'p_procs','lexer.py',137),
  ('procs -> proc procs','procs',2,'p_procs','lexer.py',138),
  ('proc -> proca1 procA','proc',2,'p_proc','lexer.py',141),
  ('proc -> VOID procA','proc',2,'p_proc','lexer.py',142),
  ('proc -> empty','proc',1,'p_proc','lexer.py',143),
  ('proca1 -> datatype ID (','proca1',3,'p_proca1','lexer.py',148),
  ('procA -> proc1 ) { proc3 }','procA',5,'p_procA','lexer.py',156),
  ('proc1 -> datatype ID proc2','proc1',3,'p_proc1','lexer.py',159),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',160),
  ('proc2 -> , datatype ID proc2','proc2',4,'p_proc2','lexer.py',163),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',164),
  ('proc3 -> var proc3','proc3',2,'p_proc3','lexer.py',167),
  ('proc3 -> proc4','proc3',1,'p_proc3','lexer.py',168),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',171),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',172),
  ('vars -> var vars','vars',2,'p_vars','lexer.py',175),
  ('vars -> var','vars',1,'p_vars','lexer.py',176),
  ('var -> datatype var1','var',2,'p_var','lexer.py',179),
  ('var1 -> ID , var1','var1',3,'p_var1','lexer.py',189),
  ('var1 -> ID var2','var1',2,'p_var1','lexer.py',190),
  ('var2 -> ;','var2',1,'p_var2','lexer.py',197),
  ('assignment -> ID ASSIGNATOR expression','assignment',3,'p_assignment','lexer.py',217),
  ('condition -> IF ( expression ) block condition1','condition',6,'p_condition','lexer.py',228),
  ('condition1 -> ELSE block','condition1',2,'p_condition1','lexer.py',231),
  ('condition1 -> empty','condition1',1,'p_condition1','lexer.py',232),
  ('input -> READ ( ID input1 )','input',5,'p_input','lexer.py',235),
  ('input1 -> , ID input1','input1',3,'p_input1','lexer.py',238),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',239),
  ('output -> PRINT ( expression output1 )','output',5,'p_output','lexer.py',242),
  ('output1 -> , expression output1','output1',3,'p_output1','lexer.py',245),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',246),
  ('function_call -> ID ( function_call1 )','function_call',4,'p_function_call','lexer.py',249),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',255),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',256),
  ('function_call2 -> expression , function_call2','function_call2',3,'p_function_call2','lexer.py',259),
  ('function_call2 -> expression','function_call2',1,'p_function_call2','lexer.py',260),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',263),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',266),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',269),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',270),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',273),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',274),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',277),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',278),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',279),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',280),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',281),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',282),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',283),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',284),
  ('statement1 -> function_call','statement1',1,'p_statement1','lexer.py',285),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',288),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',289),
  ('while -> WHILE ( expression ) block','while',5,'p_while','lexer.py',292),
  ('relop -> <','relop',1,'p_relop','lexer.py',295),
  ('relop -> >','relop',1,'p_relop','lexer.py',296),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',297),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',298),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',299),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',300),
  ('logop -> OR','logop',1,'p_logop','lexer.py',304),
  ('logop -> AND','logop',1,'p_logop','lexer.py',305),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',358),
  ('expression2 -> logop exp0 n_quad_logop expression2','expression2',4,'p_expression2','lexer.py',361),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',362),
  ('n_quad_logop -> <empty>','n_quad_logop',0,'p_n_quad_logop','lexer.py',365),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',369),
  ('exp02 -> relop exp','exp02',2,'p_exp02','lexer.py',372),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',373),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',378),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',381),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',382),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',386),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',387),
  ('exp2 -> addsub term n_quad_addsub exp2','exp2',4,'p_exp2','lexer.py',392),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',393),
  ('term -> term_not factor n_quad_muldiv term2','term',4,'p_term','lexer.py',396),
  ('n_quad_muldiv -> <empty>','n_quad_muldiv',0,'p_n_quad_muldiv','lexer.py',399),
  ('n_quad_addsub -> <empty>','n_quad_addsub',0,'p_n_quad_addsub','lexer.py',403),
  ('term2 -> muldiv factor n_quad_muldiv term2','term2',4,'p_term2','lexer.py',407),
  ('term2 -> n_quad_not','term2',1,'p_term2','lexer.py',408),
  ('n_quad_not -> <empty>','n_quad_not',0,'p_n_quad_not','lexer.py',411),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',417),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',418),
  ('factor -> ( n_push_false_bottom expression ) n_pop_false_bottom','factor',5,'p_factor','lexer.py',423),
  ('factor -> varcte','factor',1,'p_factor','lexer.py',424),
  ('n_push_false_bottom -> <empty>','n_push_false_bottom',0,'p_n_push_false_bottom','lexer.py',427),
  ('n_pop_false_bottom -> <empty>','n_pop_false_bottom',0,'p_n_pop_false_bottom','lexer.py',431),
  ('varcte -> ID n_push_operand','varcte',2,'p_varcte','lexer.py',435),
  ('varcte -> varcte1','varcte',1,'p_varcte','lexer.py',436),
  ('n_push_operand -> <empty>','n_push_operand',0,'p_n_push_operand','lexer.py',451),
  ('varcte1 -> CTE_INT','varcte1',1,'p_varcte1','lexer.py',454),
  ('varcte1 -> CTE_FLOAT','varcte1',1,'p_varcte1','lexer.py',455),
  ('varcte1 -> CTE_BOOL','varcte1',1,'p_varcte1','lexer.py',456),
  ('varcte1 -> CTE_STRING','varcte1',1,'p_varcte1','lexer.py',457),
  ('varcte1 -> CTE_CHAR','varcte1',1,'p_varcte1','lexer.py',458),
  ('varcte1 -> function_call','varcte1',1,'p_varcte1','lexer.py',459),
  ('varcte1 -> map_access','varcte1',1,'p_varcte1','lexer.py',460),
  ('varcte1 -> map_operation','varcte1',1,'p_varcte1','lexer.py',461),
  ('varcte1 -> set_operation','varcte1',1,'p_varcte1','lexer.py',462),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',470),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',471),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',474),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',475),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',476),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',477),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',478),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',479),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',480),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',484),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',488),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',491),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',492),
  ('main -> MAIN n_clear_scope { vars_aux statement_aux }','main',6,'p_main','lexer.py',495),
  ('n_clear_scope -> <empty>','n_clear_scope',0,'p_n_clear_scope','lexer.py',498),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',504),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',505),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',508),
  ('map_access -> ID ( exp )','map_access',4,'p_map_access','lexer.py',512),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',515),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',518),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',521),
]
