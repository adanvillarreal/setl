
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OPERATION OPERATION OPERATION OPERATION OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' program1program1 : var program1\n                | program2program2 : proc program2\n                | mainprocs : proc\n             | proc procsproc : proca1 procA\n            | VOID proca2 procA\n            | emptyproca2 : ID '(' proca1 :  datatype ID '(' procA : proc1 ')' '{' proc3 '}' proc1 : n_push_variable proc2\n             | emptyproc2 : ',' n_push_variable proc2\n             | emptyn_push_variable :  datatype IDproc3 : var proc3\n             | n_quad_counter proc4n_quad_counter : proc4 : statement proc4\n             | emptyvars : var vars\n            | varvar : datatype var1 var1 : ID ',' var1\n             | ID var2var2 : ';' assignment : assignment2 ASSIGNATOR n_quad_assign expressionassignment2 : IDn_quad_assign : condition : IF '(' expression n_while_2 ')' block condition1condition1 : ELSE n_if_2 block n_if_3\n                  | n_if_3n_if_2 : n_if_3 : while : WHILE n_while_1 '(' expression ')' n_while_2 block n_while_3n_while_1 : n_while_2 : n_while_3 : input : READ '(' n_process_read input1 ')' input1 : ',' n_process_read input1\n              | emptyn_process_read : IDoutput : PRINT '(' n_output_quad output1 ')' output1 : ',' n_output_quad output1\n               | emptyn_output_quad : expressionfunction_call : n_era_size function_call1 ')' n_era_size : ID '(' function_call1 : empty\n                      | function_call2function_call2 : n_verify_argument ',' n_add_one_to_counter function_call2\n                      | n_verify_argumentn_add_one_to_counter : n_verify_argument : expressionreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operation\n                  | function_callstatement2 : condition\n                  | whilerelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n           | ANDexpression : exp0 expression2expression2 : logop exp0 n_quad_logop expression2\n                 | emptyn_quad_logop : exp0 : exp exp02exp02 : relop exp\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term n_quad_addsub exp2\n          | emptyterm : term_not factor n_quad_muldiv term2n_quad_muldiv : n_quad_addsub : term2 : muldiv factor n_quad_muldiv term2\n           | n_quad_notn_quad_not : term_not : '!'\n              | emptyfactor : '(' n_push_false_bottom expression ')' n_pop_false_bottom\n            | varcten_push_false_bottom : n_pop_false_bottom : varcte : ID empty\n            | varcte1varcte1 : CTE_INT\n               | CTE_FLOAT\n               | CTE_BOOL\n               | CTE_STRING\n               | CTE_CHAR\n               | function_call\n               | map_access\n               | map_operation\n               | set_operationfunctype : datatype\n               | VOIDdatatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' block : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN n_clear_scope '{' vars_aux statement_aux '}'  n_clear_scope : vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '[' exp ']' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty :"
    
_lr_action_items = {'$end':([2,9,10,13,32,33,111,],[0,-1,-3,-5,-2,-4,-133,]),'RETURN':([36,49,52,53,55,58,60,61,62,63,66,67,79,83,89,93,95,98,116,220,221,224,226,228,230,231,233,234,],[-26,-28,-29,-141,-21,-27,-135,70,-25,-136,70,-21,70,-63,-73,-74,-24,70,-62,70,-37,-41,-35,-33,-38,-130,-37,-34,]),'READ':([36,49,52,53,55,58,60,61,62,63,66,67,79,83,89,93,95,98,116,220,221,224,226,228,230,231,233,234,],[-26,-28,-29,-141,-21,-27,-135,71,-25,-136,71,-21,71,-63,-73,-74,-24,71,-62,71,-37,-41,-35,-33,-38,-130,-37,-34,]),'VOID':([4,12,14,15,31,36,40,49,52,58,96,],[5,5,5,-10,-8,-26,-9,-28,-29,-27,-13,]),'OPERATION':([123,174,],[169,197,]),'CHAR':([4,11,12,14,15,25,26,31,35,36,39,40,43,49,50,52,53,55,57,58,62,67,96,],[7,7,7,7,-10,7,7,-8,7,-26,-11,-9,7,-28,-12,-29,7,7,7,-27,7,7,-13,]),'ASSIGNATOR':([77,78,88,189,],[113,114,-31,-138,]),'WHILE':([36,49,52,53,55,58,60,61,62,63,66,67,79,83,89,93,95,98,116,220,221,224,226,228,230,231,233,234,],[-26,-28,-29,-141,-21,-27,-135,74,-25,-136,74,-21,74,-63,-73,-74,-24,74,-62,74,-37,-41,-35,-33,-38,-130,-37,-34,]),'PROGRAM':([0,],[1,]),'PRINT':([36,49,52,53,55,58,60,61,62,63,66,67,79,83,89,93,95,98,116,220,221,224,226,228,230,231,233,234,],[-26,-28,-29,-141,-21,-27,-135,76,-25,-136,76,-21,76,-63,-73,-74,-24,76,-62,76,-37,-41,-35,-33,-38,-130,-37,-34,]),'!':([70,85,112,113,114,122,124,125,130,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,172,184,187,188,213,],[105,105,105,105,-32,-51,105,105,-107,-91,-92,105,-82,105,-81,-80,105,-77,-79,-78,-75,-76,105,105,-56,105,105,105,105,105,]),'GEQ':([103,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,167,173,175,176,189,192,194,198,207,211,212,214,219,222,223,229,],[-141,151,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-138,-97,-101,-141,-140,-108,-98,-95,-59,-105,-102,-100,]),'SET':([4,11,12,14,15,25,26,31,35,36,39,40,43,49,50,52,53,55,57,58,62,67,96,],[8,8,8,8,-10,8,8,-8,8,-26,-11,-9,8,-28,-12,-29,8,8,8,-27,8,8,-13,]),')':([11,25,27,28,29,39,44,45,46,50,56,68,85,103,104,106,117,118,119,120,121,122,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,148,150,155,158,160,161,163,164,167,171,173,175,176,177,178,179,181,182,183,185,188,189,190,191,192,194,198,199,201,204,205,206,207,208,209,211,212,213,214,215,216,218,219,222,223,229,],[-141,-141,42,-15,-141,-11,-17,-14,-18,-12,-141,-16,-141,-141,-141,-141,-53,167,-57,-55,-52,-51,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-83,-85,-87,-89,-141,-45,-141,-49,-50,-40,-102,-109,-99,-86,-88,200,-44,202,203,-48,207,-138,210,211,-97,-101,-141,-141,-141,-141,-54,219,-140,-60,-61,-108,-98,207,-95,-84,-43,-47,-59,-105,-102,-100,]),'(':([24,37,47,70,71,74,76,85,88,90,102,105,108,110,112,113,114,121,122,124,125,130,135,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,169,172,184,187,188,193,195,196,197,209,213,],[39,50,50,-141,109,-39,112,-141,122,125,130,-103,-104,162,-141,-141,-32,-104,-51,-141,-141,-107,122,-91,-92,-141,-82,-141,-81,-80,-141,-77,-79,-78,-75,-76,-141,-141,-56,188,-141,-141,-141,-141,-93,-94,130,213,-104,-141,]),'+':([103,127,128,129,131,132,133,134,135,136,137,138,139,140,167,173,175,176,189,192,194,198,207,211,212,219,222,223,229,],[142,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-50,-102,-109,-99,-138,-97,-101,142,-140,-108,-98,-59,-105,-102,-100,]),'*':([127,128,129,131,132,133,134,135,136,137,138,139,140,167,173,175,189,207,211,212,219,222,223,],[-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-50,193,-109,-138,-140,-108,-98,-59,-105,193,]),'-':([103,127,128,129,131,132,133,134,135,136,137,138,139,140,167,173,175,176,189,192,194,198,207,211,212,219,222,223,229,],[143,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-50,-102,-109,-99,-138,-97,-101,143,-140,-108,-98,-59,-105,-102,-100,]),',':([6,7,16,18,20,21,22,29,37,46,48,54,56,59,101,103,104,106,119,120,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,148,150,155,158,160,161,163,164,167,173,175,176,177,178,189,192,194,198,199,201,204,207,211,212,214,215,219,222,223,229,],[-128,-126,-125,-127,-123,-122,-124,43,51,-18,57,-129,43,51,-137,-141,-141,-141,-57,168,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-83,-85,-87,-89,180,-45,184,-49,-50,-102,-109,-99,-86,-88,-138,-97,-101,-141,-141,180,184,-140,-108,-98,-95,-84,-59,-105,-102,-100,]),'/':([127,128,129,131,132,133,134,135,136,137,138,139,140,167,173,175,189,207,211,212,219,222,223,],[-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-50,195,-109,-138,-140,-108,-98,-59,-105,195,]),'.':([88,135,],[123,174,]),'CTE_CHAR':([70,85,102,105,108,112,113,114,121,122,124,125,130,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,172,184,187,188,193,195,196,209,213,],[-141,-141,132,-103,-104,-141,-141,-32,-104,-51,-141,-141,-107,-91,-92,-141,-82,-141,-81,-80,-141,-77,-79,-78,-75,-76,-141,-141,-56,-141,-141,-141,-141,-93,-94,132,-104,-141,]),';':([3,37,59,72,73,80,82,84,86,87,91,92,94,101,103,104,106,107,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,148,150,155,158,165,167,173,175,176,177,178,186,189,192,194,198,199,200,203,207,211,212,214,215,219,222,223,229,],[4,52,52,-68,-72,-65,-69,116,-64,-71,-67,-70,-66,-137,-141,-141,-141,-58,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-83,-85,-87,-89,-139,-50,-102,-109,-99,-86,-88,-30,-138,-97,-101,-141,-141,-42,-46,-140,-108,-98,-95,-84,-59,-105,-102,-100,]),'<':([8,17,103,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,167,173,175,176,189,192,194,198,207,211,212,214,219,222,223,229,],[26,35,-141,157,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-138,-97,-101,-141,-140,-108,-98,-95,-59,-105,-102,-100,]),'>':([6,7,16,18,20,21,22,41,54,69,101,103,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,167,173,175,176,189,192,194,198,207,211,212,214,219,222,223,229,],[-128,-126,-125,-127,-123,-122,-124,54,-129,101,-137,-141,159,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-138,-97,-101,-141,-140,-108,-98,-95,-59,-105,-102,-100,]),'CTE_STRING':([70,85,102,105,108,112,113,114,121,122,124,125,130,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,172,184,187,188,193,195,196,209,213,],[-141,-141,139,-103,-104,-141,-141,-32,-104,-51,-141,-141,-107,-91,-92,-141,-82,-141,-81,-80,-141,-77,-79,-78,-75,-76,-141,-141,-56,-141,-141,-141,-141,-93,-94,139,-104,-141,]),'STRING':([4,11,12,14,15,25,26,31,35,36,39,40,43,49,50,52,53,55,57,58,62,67,96,],[16,16,16,16,-10,16,16,-8,16,-26,-11,-9,16,-28,-12,-29,16,16,16,-27,16,16,-13,]),'NOT_EQ':([103,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,167,173,175,176,189,192,194,198,207,211,212,214,219,222,223,229,],[-141,153,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-138,-97,-101,-141,-140,-108,-98,-95,-59,-105,-102,-100,]),'ELSE':([221,231,],[227,-130,]),'[':([88,135,],[124,124,]),'CTE_INT':([70,85,102,105,108,112,113,114,121,122,124,125,130,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,172,184,187,188,193,195,196,209,213,],[-141,-141,134,-103,-104,-141,-141,-32,-104,-51,-141,-141,-107,-91,-92,-141,-82,-141,-81,-80,-141,-77,-79,-78,-75,-76,-141,-141,-56,-141,-141,-141,-141,-93,-94,134,-104,-141,]),']':([103,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,167,170,173,175,176,189,192,194,198,207,211,212,214,219,222,223,229,],[-141,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-50,189,-102,-109,-99,-138,-97,-101,-141,-140,-108,-98,-95,-59,-105,-102,-100,]),'ID':([1,5,6,7,16,18,19,20,21,22,30,34,36,49,51,52,53,54,55,58,60,61,62,63,64,66,67,70,79,83,85,89,93,95,98,101,102,105,108,109,112,113,114,116,121,122,124,125,130,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,172,180,184,187,188,193,195,196,209,213,220,221,224,226,228,230,231,233,234,],[3,24,-128,-126,-125,-127,37,-123,-122,-124,46,47,-26,-28,59,-29,-141,-129,-21,-27,-135,88,-25,-136,59,88,-21,-141,88,-63,-141,-73,-74,-24,88,-137,135,-103,-104,161,-141,-141,-32,-62,-104,-51,-141,-141,-107,-91,-92,-141,-82,-141,-81,-80,-141,-77,-79,-78,-75,-76,-141,-141,-56,-141,161,-141,-141,-141,-93,-94,135,-104,-141,88,-37,-41,-35,-33,-38,-130,-37,-34,]),'IF':([36,49,52,53,55,58,60,61,62,63,66,67,79,83,89,93,95,98,116,220,221,224,226,228,230,231,233,234,],[-26,-28,-29,-141,-21,-27,-135,90,-25,-136,90,-21,90,-63,-73,-74,-24,90,-62,90,-37,-41,-35,-33,-38,-130,-37,-34,]),'AND':([103,104,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,155,158,167,173,175,176,177,178,189,192,194,198,199,207,211,212,214,219,222,223,229,],[-141,146,-141,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-87,-89,-50,-102,-109,-99,-86,-88,-138,-97,-101,-141,146,-140,-108,-98,-95,-59,-105,-102,-100,]),'MAP':([4,11,12,14,15,25,26,31,35,36,39,40,43,49,50,52,53,55,57,58,60,61,62,63,66,67,79,83,89,93,95,96,98,116,220,221,224,226,228,230,231,233,234,],[17,17,17,17,-10,17,17,-8,17,-26,-11,-9,17,-28,-12,-29,17,17,17,-27,-135,17,17,-136,17,17,17,-63,-73,-74,-24,-13,17,-62,17,-37,-41,-35,-33,-38,-130,-37,-34,]),'EQ':([103,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,167,173,175,176,189,192,194,198,207,211,212,214,219,222,223,229,],[-141,156,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-138,-97,-101,-141,-140,-108,-98,-95,-59,-105,-102,-100,]),'INT':([4,11,12,14,15,25,26,31,35,36,39,40,43,49,50,52,53,55,57,58,62,67,96,],[21,21,21,21,-10,21,21,-8,21,-26,-11,-9,21,-28,-12,-29,21,21,21,-27,21,21,-13,]),'FLOAT':([4,11,12,14,15,25,26,31,35,36,39,40,43,49,50,52,53,55,57,58,62,67,96,],[20,20,20,20,-10,20,20,-8,20,-26,-11,-9,20,-28,-12,-29,20,20,20,-27,20,20,-13,]),'CTE_FLOAT':([70,85,102,105,108,112,113,114,121,122,124,125,130,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,172,184,187,188,193,195,196,209,213,],[-141,-141,137,-103,-104,-141,-141,-32,-104,-51,-141,-141,-107,-91,-92,-141,-82,-141,-81,-80,-141,-77,-79,-78,-75,-76,-141,-141,-56,-141,-141,-141,-141,-93,-94,137,-104,-141,]),'CTE_BOOL':([70,85,102,105,108,112,113,114,121,122,124,125,130,142,143,144,146,147,149,151,152,153,154,156,157,159,162,166,168,172,184,187,188,193,195,196,209,213,],[-141,-141,138,-103,-104,-141,-141,-32,-104,-51,-141,-141,-107,-91,-92,-141,-82,-141,-81,-80,-141,-77,-79,-78,-75,-76,-141,-141,-56,-141,-141,-141,-141,-93,-94,138,-104,-141,]),'LEQ':([103,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,167,173,175,176,189,192,194,198,207,211,212,214,219,222,223,229,],[-141,154,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-138,-97,-101,-141,-140,-108,-98,-95,-59,-105,-102,-100,]),'BOOL':([4,11,12,14,15,25,26,31,35,36,39,40,43,49,50,52,53,55,57,58,62,67,96,],[22,22,22,22,-10,22,22,-8,22,-26,-11,-9,22,-28,-12,-29,22,22,22,-27,22,22,-13,]),'{':([23,38,42,202,210,217,227,232,],[-134,53,55,-40,220,220,-36,220,]),'MAIN':([4,12,14,15,31,36,40,49,52,58,96,],[23,23,23,-10,-8,-26,-9,-28,-29,-27,-13,]),'}':([36,49,52,53,55,58,60,61,62,63,65,66,67,75,79,81,83,89,93,95,97,98,99,100,115,116,126,220,221,224,225,226,228,230,231,233,234,],[-26,-28,-29,-141,-21,-27,-135,-141,-25,-136,96,-141,-21,111,-141,-132,-63,-73,-74,-24,-20,-141,-23,-19,-131,-62,-22,-141,-37,-41,231,-35,-33,-38,-130,-37,-34,]),'OR':([103,104,106,127,128,129,131,132,133,134,135,136,137,138,139,140,141,145,155,158,167,173,175,176,177,178,189,192,194,198,199,207,211,212,214,219,222,223,229,],[-141,149,-141,-116,-110,-106,-98,-115,-118,-111,-141,-119,-112,-113,-114,-117,-90,-96,-87,-89,-50,-102,-109,-99,-86,-88,-138,-97,-101,-141,149,-140,-108,-98,-95,-59,-105,-102,-100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term_not':([70,85,112,113,124,125,144,147,152,162,166,172,184,187,188,213,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'input1':([160,201,],[179,216,]),'n_add_one_to_counter':([168,],[187,]),'term2':([173,223,],[192,229,]),'vars':([53,62,],[60,95,]),'n_quad_muldiv':([131,212,],[173,223,]),'n_clear_scope':([23,],[38,]),'output1':([163,204,],[183,218,]),'map_definition':([4,11,12,14,25,26,35,43,53,55,57,61,62,66,67,79,98,220,],[6,6,6,6,6,6,6,6,6,6,6,72,6,72,6,72,72,72,]),'n_process_read':([109,180,],[160,201,]),'function_call':([61,66,79,98,102,196,220,],[73,73,73,73,127,127,73,]),'n_if_2':([227,],[232,]),'vars_aux':([53,],[61,]),'statement_aux':([61,79,220,],[75,115,225,]),'n_while_2':([171,202,],[190,217,]),'proc4':([66,98,],[97,126,]),'return':([61,66,79,98,220,],[82,82,82,82,82,]),'addsub':([103,198,],[144,144,]),'proc1':([11,25,],[27,27,]),'proc3':([55,67,],[65,100,]),'proc2':([29,56,],[45,68,]),'n_while_3':([224,],[230,]),'program1':([4,12,],[9,32,]),'program2':([4,12,14,],[10,10,33,]),'map_access':([61,66,79,98,102,196,220,],[77,77,77,77,140,140,77,]),'muldiv':([173,223,],[196,196,]),'exp2':([103,198,],[141,214,]),'exp0':([70,85,112,125,147,162,166,172,184,187,188,213,],[104,104,104,104,177,104,104,104,104,104,104,104,]),'proca1':([4,12,14,],[11,11,11,]),'set_operation1':([188,213,],[206,206,]),'n_pop_false_bottom':([211,],[222,]),'proca2':([5,],[25,]),'assignment2':([61,66,79,98,220,],[78,78,78,78,78,]),'program':([0,],[2,]),'n_output_quad':([112,184,],[163,204,]),'statement':([61,66,79,98,220,],[79,98,79,98,79,]),'n_quad_counter':([55,67,],[66,66,]),'var':([4,12,53,55,62,67,],[12,12,62,67,62,67,]),'input':([61,66,79,98,220,],[80,80,80,80,80,]),'n_quad_logop':([177,],[199,]),'main':([4,12,14,],[13,13,13,]),'proc':([4,12,14,],[14,14,14,]),'n_verify_argument':([85,187,],[120,120,]),'empty':([4,11,12,14,25,29,53,56,61,66,70,79,85,98,103,104,106,112,113,124,125,135,144,147,152,160,162,163,166,172,184,187,188,198,199,201,204,213,220,],[15,28,15,15,28,44,63,44,81,99,108,81,121,99,145,150,158,108,108,108,108,175,108,108,108,181,108,185,108,108,108,108,209,145,150,181,185,209,81,]),'map_assignment':([61,66,79,98,220,],[92,92,92,92,92,]),'var1':([19,51,64,],[36,58,36,]),'statement2':([61,66,79,98,220,],[83,83,83,83,83,]),'statement1':([61,66,79,98,220,],[84,84,84,84,84,]),'var2':([37,59,],[49,49,]),'assignment':([61,66,79,98,220,],[86,86,86,86,86,]),'factor':([102,196,],[131,212,]),'logop':([104,199,],[147,147,]),'n_quad_assign':([114,],[166,]),'n_push_false_bottom':([130,],[172,]),'condition1':([221,],[228,]),'map_operation':([61,66,79,98,102,196,220,],[87,87,87,87,133,133,87,]),'expression2':([104,199,],[148,215,]),'n_if_3':([221,233,],[226,234,]),'condition':([61,66,79,98,220,],[89,89,89,89,89,]),'varcte':([102,196,],[129,129,]),'term':([70,85,112,113,124,125,144,147,152,162,166,172,184,187,188,213,],[103,103,103,103,103,103,176,103,103,103,103,103,103,103,103,103,]),'n_push_variable':([11,25,43,],[29,29,56,]),'set_definition':([4,11,12,14,25,26,35,43,53,55,57,62,67,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'set_operation':([61,66,79,98,102,196,220,],[91,91,91,91,136,136,91,]),'datatype':([4,11,12,14,25,26,35,43,53,55,57,62,67,],[19,30,19,34,30,41,48,30,64,64,69,64,64,]),'varcte1':([102,196,],[128,128,]),'relop':([106,],[152,]),'procA':([11,25,],[31,40,]),'function_call1':([85,],[118,]),'n_era_size':([61,66,79,98,102,196,220,],[85,85,85,85,85,85,85,]),'while':([61,66,79,98,220,],[93,93,93,93,93,]),'function_call2':([85,187,],[117,205,]),'exp':([70,85,112,113,124,125,147,152,162,166,172,184,187,188,213,],[106,106,106,165,170,106,106,178,106,106,106,106,106,106,106,]),'n_quad_addsub':([176,],[198,]),'output':([61,66,79,98,220,],[94,94,94,94,94,]),'exp02':([106,],[155,]),'n_quad_not':([173,223,],[194,194,]),'expression':([70,85,112,125,162,166,172,184,187,188,213,],[107,119,164,171,182,186,191,164,119,208,208,]),'block':([210,217,232,],[221,224,233,]),'n_while_1':([74,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; program1','program',4,'p_program','lexer.py',129),
  ('program1 -> var program1','program1',2,'p_program1','lexer.py',133),
  ('program1 -> program2','program1',1,'p_program1','lexer.py',134),
  ('program2 -> proc program2','program2',2,'p_program2','lexer.py',137),
  ('program2 -> main','program2',1,'p_program2','lexer.py',138),
  ('procs -> proc','procs',1,'p_procs','lexer.py',141),
  ('procs -> proc procs','procs',2,'p_procs','lexer.py',142),
  ('proc -> proca1 procA','proc',2,'p_proc','lexer.py',145),
  ('proc -> VOID proca2 procA','proc',3,'p_proc','lexer.py',146),
  ('proc -> empty','proc',1,'p_proc','lexer.py',147),
  ('proca2 -> ID (','proca2',2,'p_proca2','lexer.py',151),
  ('proca1 -> datatype ID (','proca1',3,'p_proca1','lexer.py',157),
  ('procA -> proc1 ) { proc3 }','procA',5,'p_procA','lexer.py',165),
  ('proc1 -> n_push_variable proc2','proc1',2,'p_proc1','lexer.py',170),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',171),
  ('proc2 -> , n_push_variable proc2','proc2',3,'p_proc2','lexer.py',174),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',175),
  ('n_push_variable -> datatype ID','n_push_variable',2,'p_n_push_variable','lexer.py',178),
  ('proc3 -> var proc3','proc3',2,'p_proc3','lexer.py',188),
  ('proc3 -> n_quad_counter proc4','proc3',2,'p_proc3','lexer.py',189),
  ('n_quad_counter -> <empty>','n_quad_counter',0,'p_n_quad_counter','lexer.py',192),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',196),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',197),
  ('vars -> var vars','vars',2,'p_vars','lexer.py',201),
  ('vars -> var','vars',1,'p_vars','lexer.py',202),
  ('var -> datatype var1','var',2,'p_var','lexer.py',205),
  ('var1 -> ID , var1','var1',3,'p_var1','lexer.py',215),
  ('var1 -> ID var2','var1',2,'p_var1','lexer.py',216),
  ('var2 -> ;','var2',1,'p_var2','lexer.py',223),
  ('assignment -> assignment2 ASSIGNATOR n_quad_assign expression','assignment',4,'p_assignment','lexer.py',243),
  ('assignment2 -> ID','assignment2',1,'p_assignment2','lexer.py',248),
  ('n_quad_assign -> <empty>','n_quad_assign',0,'p_n_quad_assign','lexer.py',260),
  ('condition -> IF ( expression n_while_2 ) block condition1','condition',7,'p_condition','lexer.py',277),
  ('condition1 -> ELSE n_if_2 block n_if_3','condition1',4,'p_condition1','lexer.py',280),
  ('condition1 -> n_if_3','condition1',1,'p_condition1','lexer.py',281),
  ('n_if_2 -> <empty>','n_if_2',0,'p_n_if_2','lexer.py',284),
  ('n_if_3 -> <empty>','n_if_3',0,'p_n_if_3','lexer.py',292),
  ('while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3','while',8,'p_while','lexer.py',297),
  ('n_while_1 -> <empty>','n_while_1',0,'p_n_while_1','lexer.py',300),
  ('n_while_2 -> <empty>','n_while_2',0,'p_n_while_2','lexer.py',304),
  ('n_while_3 -> <empty>','n_while_3',0,'p_n_while_3','lexer.py',308),
  ('input -> READ ( n_process_read input1 )','input',5,'p_input','lexer.py',323),
  ('input1 -> , n_process_read input1','input1',3,'p_input1','lexer.py',326),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',327),
  ('n_process_read -> ID','n_process_read',1,'p_n_process_read','lexer.py',330),
  ('output -> PRINT ( n_output_quad output1 )','output',5,'p_output','lexer.py',334),
  ('output1 -> , n_output_quad output1','output1',3,'p_output1','lexer.py',337),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',338),
  ('n_output_quad -> expression','n_output_quad',1,'p_n_output_quad','lexer.py',341),
  ('function_call -> n_era_size function_call1 )','function_call',3,'p_function_call','lexer.py',346),
  ('n_era_size -> ID (','n_era_size',2,'p_n_era_size','lexer.py',352),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',361),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',362),
  ('function_call2 -> n_verify_argument , n_add_one_to_counter function_call2','function_call2',4,'p_function_call2','lexer.py',365),
  ('function_call2 -> n_verify_argument','function_call2',1,'p_function_call2','lexer.py',366),
  ('n_add_one_to_counter -> <empty>','n_add_one_to_counter',0,'p_n_add_one_to_counter','lexer.py',372),
  ('n_verify_argument -> expression','n_verify_argument',1,'p_n_verify_argument','lexer.py',376),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',390),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',393),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',396),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',397),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',400),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',401),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',404),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',405),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',406),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',407),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',408),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',409),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',410),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',411),
  ('statement1 -> function_call','statement1',1,'p_statement1','lexer.py',412),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',415),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',416),
  ('relop -> <','relop',1,'p_relop','lexer.py',419),
  ('relop -> >','relop',1,'p_relop','lexer.py',420),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',421),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',422),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',423),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',424),
  ('logop -> OR','logop',1,'p_logop','lexer.py',428),
  ('logop -> AND','logop',1,'p_logop','lexer.py',429),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',512),
  ('expression2 -> logop exp0 n_quad_logop expression2','expression2',4,'p_expression2','lexer.py',515),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',516),
  ('n_quad_logop -> <empty>','n_quad_logop',0,'p_n_quad_logop','lexer.py',519),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',523),
  ('exp02 -> relop exp','exp02',2,'p_exp02','lexer.py',526),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',527),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',532),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',535),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',536),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',540),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',541),
  ('exp2 -> addsub term n_quad_addsub exp2','exp2',4,'p_exp2','lexer.py',545),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',546),
  ('term -> term_not factor n_quad_muldiv term2','term',4,'p_term','lexer.py',549),
  ('n_quad_muldiv -> <empty>','n_quad_muldiv',0,'p_n_quad_muldiv','lexer.py',552),
  ('n_quad_addsub -> <empty>','n_quad_addsub',0,'p_n_quad_addsub','lexer.py',556),
  ('term2 -> muldiv factor n_quad_muldiv term2','term2',4,'p_term2','lexer.py',560),
  ('term2 -> n_quad_not','term2',1,'p_term2','lexer.py',561),
  ('n_quad_not -> <empty>','n_quad_not',0,'p_n_quad_not','lexer.py',564),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',570),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',571),
  ('factor -> ( n_push_false_bottom expression ) n_pop_false_bottom','factor',5,'p_factor','lexer.py',576),
  ('factor -> varcte','factor',1,'p_factor','lexer.py',577),
  ('n_push_false_bottom -> <empty>','n_push_false_bottom',0,'p_n_push_false_bottom','lexer.py',580),
  ('n_pop_false_bottom -> <empty>','n_pop_false_bottom',0,'p_n_pop_false_bottom','lexer.py',584),
  ('varcte -> ID empty','varcte',2,'p_varcte','lexer.py',588),
  ('varcte -> varcte1','varcte',1,'p_varcte','lexer.py',589),
  ('varcte1 -> CTE_INT','varcte1',1,'p_varcte1','lexer.py',603),
  ('varcte1 -> CTE_FLOAT','varcte1',1,'p_varcte1','lexer.py',604),
  ('varcte1 -> CTE_BOOL','varcte1',1,'p_varcte1','lexer.py',605),
  ('varcte1 -> CTE_STRING','varcte1',1,'p_varcte1','lexer.py',606),
  ('varcte1 -> CTE_CHAR','varcte1',1,'p_varcte1','lexer.py',607),
  ('varcte1 -> function_call','varcte1',1,'p_varcte1','lexer.py',608),
  ('varcte1 -> map_access','varcte1',1,'p_varcte1','lexer.py',609),
  ('varcte1 -> map_operation','varcte1',1,'p_varcte1','lexer.py',610),
  ('varcte1 -> set_operation','varcte1',1,'p_varcte1','lexer.py',611),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',619),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',620),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',623),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',624),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',625),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',626),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',627),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',628),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',629),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',633),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',637),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',640),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',641),
  ('main -> MAIN n_clear_scope { vars_aux statement_aux }','main',6,'p_main','lexer.py',644),
  ('n_clear_scope -> <empty>','n_clear_scope',0,'p_n_clear_scope','lexer.py',647),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',653),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',654),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',657),
  ('map_access -> ID [ exp ]','map_access',4,'p_map_access','lexer.py',661),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',664),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',667),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',670),
]
