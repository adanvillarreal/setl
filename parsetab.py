
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OPERATION OPERATION OPERATION OPERATION OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' program1program1 : program2 program3 mainprogram2 : vars\n                | emptyprogram3 : proc program3\n                | emptyvars : datatype vars1 ';' vars2vars1 : ID ',' vars1\n             | IDvars2 : vars\n             | emptyproc : functype ID '(' proc1 ')' '{' proc3 proc4 '}' proc1 : datatype ID proc2\n             | emptyproc2 : ',' datatype ID proc2\n             | emptyproc3 : vars\n             | emptyproc4 : statement proc4\n             | emptyassignment : ID ASSIGNATOR expressioncondition : IF '(' expression ')' block condition1condition1 : ELSE block\n                  | emptyinput : READ '(' ID input1 ')' input1 : ',' ID input1\n              | emptyoutput : PRINT '(' expression output1 ')' output1 : ',' expression output1\n               | emptyfunction_call : ID '(' function_call1 ')' function_call1 : function_call2\n                      | emptyfunction_call2 : expression ',' function_call2\n                      | emptyreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operationstatement2 : condition\n                  | whilewhile : WHILE '(' expression ')' blockrelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n          | ANDexpression : exp0 expression2expression2 : logop exp0 expression2\n                 | emptyexp0 : exp exp02exp02 : relop exp02\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term exp2\n          | emptyterm : term_not factor term2term2 : muldiv factor term2\n           | emptyterm_not : '!'\n              | emptyfactor : '(' expression ')'\n            | factor2factor2 : factor3 varctefactor3 : addsub\n             | emptyvarcte : ID\n            | CTE_INT\n            | CTE_FLOAT\n            | CTE_BOOL\n            | CTE_STRING\n            | CTE_CHAR\n            | function_call\n            | map_access\n            | map_operation\n            | set_operation datatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' functype : datatype\n               | VOIDblock : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN '{' vars_aux statement_aux '}' vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '(' exp ')' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty : "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,29,77,],[0,-1,-2,-107,]),'ID':([2,9,10,11,12,13,14,15,16,22,23,24,33,34,37,39,40,41,43,45,46,47,49,53,56,65,66,70,76,79,80,82,83,84,89,90,91,92,93,94,95,105,107,108,119,121,122,124,126,127,128,132,133,134,135,136,139,142,148,150,151,167,173,182,184,185,186,197,200,202,205,206,207,208,210,],[3,26,-94,-95,-96,-97,-98,-99,-100,32,-102,-103,-114,26,-114,-7,-10,-11,-101,67,-108,-109,75,67,-41,-50,-51,-114,-110,-40,-114,-114,102,-114,-114,-77,-78,-114,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,154,-82,-83,67,-17,-18,169,-114,175,-114,-114,-70,-71,67,-78,-114,-114,67,-52,-78,-22,-24,-114,-114,-23,-104,-78,]),';':([3,25,26,42,55,57,58,59,60,61,62,63,64,76,85,86,87,88,99,104,106,109,110,111,112,113,114,115,116,117,118,120,123,125,129,137,144,145,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,174,176,178,179,180,181,190,193,204,],[4,33,-9,-8,79,-42,-43,-44,-45,-46,-47,-48,-49,-110,-36,-114,-114,-114,-21,-61,-63,-64,-114,-66,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-112,-111,-114,-65,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-25,-28,-62,-72,-114,-79,-37,-75,-31,]),'VOID':([4,6,7,8,20,33,39,40,41,187,],[-114,24,-3,-4,24,-114,-7,-10,-11,-12,]),'INT':([4,6,7,8,20,27,28,33,37,38,39,40,41,44,95,97,187,],[10,10,-3,-4,10,10,10,10,10,10,-7,-10,-11,10,10,10,-12,]),'FLOAT':([4,6,7,8,20,27,28,33,37,38,39,40,41,44,95,97,187,],[11,11,-3,-4,11,11,11,11,11,11,-7,-10,-11,11,11,11,-12,]),'BOOL':([4,6,7,8,20,27,28,33,37,38,39,40,41,44,95,97,187,],[12,12,-3,-4,12,12,12,12,12,12,-7,-10,-11,12,12,12,-12,]),'STRING':([4,6,7,8,20,27,28,33,37,38,39,40,41,44,95,97,187,],[13,13,-3,-4,13,13,13,13,13,13,-7,-10,-11,13,13,13,-12,]),'CHAR':([4,6,7,8,20,27,28,33,37,38,39,40,41,44,95,97,187,],[14,14,-3,-4,14,14,14,14,14,14,-7,-10,-11,14,14,14,-12,]),'SET':([4,6,7,8,20,27,28,33,37,38,39,40,41,44,95,97,187,],[17,17,-3,-4,17,17,17,17,17,17,-7,-10,-11,17,17,17,-12,]),'MAP':([4,6,7,8,20,27,28,33,37,38,39,40,41,44,45,46,47,53,56,65,66,79,95,97,132,133,134,167,184,185,186,187,200,202,207,208,],[18,18,-3,-4,18,18,18,18,18,18,-7,-10,-11,18,18,-108,-109,18,-41,-50,-51,-40,18,18,18,-17,-18,18,-114,18,-52,-12,-22,-24,-23,-104,]),'MAIN':([4,6,7,8,19,20,21,31,33,39,40,41,187,],[-114,-114,-3,-4,30,-114,-6,-5,-114,-7,-10,-11,-12,]),'>':([10,11,12,13,14,15,16,35,43,51,76,87,88,110,112,113,114,115,116,117,118,120,123,125,137,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[-94,-95,-96,-97,-98,-99,-100,43,-101,76,-110,113,-114,113,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,113,-31,]),',':([10,11,12,13,14,15,16,26,36,43,75,76,86,87,88,102,103,104,106,109,110,111,112,113,114,115,116,117,118,120,123,125,137,144,145,146,147,149,153,154,155,156,157,158,159,160,161,162,163,169,171,175,177,178,179,180,181,190,193,195,198,204,],[-94,-95,-96,-97,-98,-99,-100,34,44,-101,97,-110,-114,-114,-114,139,142,-61,-63,-64,-114,-66,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,-114,-65,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,97,-113,139,142,-62,-72,-114,-79,-37,-75,-114,205,-31,]),'<':([17,18,87,88,110,112,113,114,115,116,117,118,120,123,125,137,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[27,28,112,-114,112,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,112,-31,]),'{':([30,74,164,165,201,],[37,95,185,185,185,]),'(':([32,67,68,69,70,72,73,80,82,84,89,90,91,92,93,94,100,105,107,108,119,121,122,124,136,142,148,150,151,154,173,182,197,199,205,206,210,],[38,82,83,84,-114,93,94,-114,-114,-114,124,-77,-78,-114,-114,-114,136,-114,-59,-60,-114,-68,-69,-114,-114,-114,124,-70,-71,182,-78,-114,-78,206,-114,-114,-78,]),'READ':([33,37,39,40,41,45,46,47,53,56,65,66,79,95,132,133,134,167,184,185,186,200,202,207,208,],[-114,-114,-7,-10,-11,68,-108,-109,68,-41,-50,-51,-40,-114,68,-17,-18,68,-114,68,-52,-22,-24,-23,-104,]),'PRINT':([33,37,39,40,41,45,46,47,53,56,65,66,79,95,132,133,134,167,184,185,186,200,202,207,208,],[-114,-114,-7,-10,-11,69,-108,-109,69,-41,-50,-51,-40,-114,69,-17,-18,69,-114,69,-52,-22,-24,-23,-104,]),'RETURN':([33,37,39,40,41,45,46,47,53,56,65,66,79,95,132,133,134,167,184,185,186,200,202,207,208,],[-114,-114,-7,-10,-11,70,-108,-109,70,-41,-50,-51,-40,-114,70,-17,-18,70,-114,70,-52,-22,-24,-23,-104,]),'IF':([33,37,39,40,41,45,46,47,53,56,65,66,79,95,132,133,134,167,184,185,186,200,202,207,208,],[-114,-114,-7,-10,-11,72,-108,-109,72,-41,-50,-51,-40,-114,72,-17,-18,72,-114,72,-52,-22,-24,-23,-104,]),'WHILE':([33,37,39,40,41,45,46,47,53,56,65,66,79,95,132,133,134,167,184,185,186,200,202,207,208,],[-114,-114,-7,-10,-11,73,-108,-109,73,-41,-50,-51,-40,-114,73,-17,-18,73,-114,73,-52,-22,-24,-23,-104,]),'}':([33,37,39,40,41,45,46,47,52,53,54,56,65,66,78,79,95,132,133,134,166,167,168,184,185,186,188,200,202,203,207,208,],[-114,-114,-7,-10,-11,-114,-108,-109,77,-114,-106,-41,-50,-51,-105,-40,-114,-114,-17,-18,187,-114,-20,-114,-114,-52,-19,-22,-24,208,-23,-104,]),')':([38,48,50,75,86,87,88,96,98,101,102,103,104,106,109,110,111,112,113,114,115,116,117,118,120,123,125,130,131,136,137,138,140,141,143,144,145,146,147,149,152,153,154,155,156,157,158,159,160,161,162,163,169,170,171,172,173,175,177,178,179,180,181,182,189,190,191,192,193,194,195,196,197,204,205,206,209,210,],[-114,74,-14,-114,-114,-114,-114,-13,-16,137,-114,-114,-61,-63,-64,-114,-66,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,164,165,171,-111,174,-27,176,-30,-114,-65,-114,-74,-76,181,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-114,190,-113,-38,-39,-114,-114,-62,-72,-114,-79,-114,-15,-37,-26,-29,-75,204,137,-32,-33,-31,-114,171,-34,-35,]),'ASSIGNATOR':([67,71,137,],[80,92,-111,]),'.':([67,154,],[81,183,]),'!':([70,80,82,84,92,93,94,105,107,108,119,121,122,124,136,142,182,205,206,],[90,90,90,90,90,90,90,90,-59,-60,90,-68,-69,90,90,90,90,90,90,]),'+':([70,80,82,84,88,89,90,91,92,93,94,105,107,108,119,121,122,123,124,125,136,137,142,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,171,173,180,181,182,190,193,197,204,205,206,210,],[-114,-114,-114,-114,121,121,-77,-78,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,-114,-80,-114,-111,-114,121,-74,121,-76,-70,-71,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-78,-114,-79,-114,-37,-75,-78,-31,-114,-114,-78,]),'-':([70,80,82,84,88,89,90,91,92,93,94,105,107,108,119,121,122,123,124,125,136,137,142,146,147,148,149,150,151,153,154,155,156,157,158,159,160,161,162,163,171,173,180,181,182,190,193,197,204,205,206,210,],[-114,-114,-114,-114,122,122,-77,-78,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,-114,-80,-114,-111,-114,122,-74,122,-76,-70,-71,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-78,-114,-79,-114,-37,-75,-78,-31,-114,-114,-78,]),'CTE_INT':([70,80,82,84,89,90,91,92,93,94,105,107,108,119,121,122,124,126,127,128,136,142,148,150,151,173,182,197,205,206,210,],[-114,-114,-114,-114,-114,-77,-78,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,155,-82,-83,-114,-114,-114,-70,-71,-78,-114,-78,-114,-114,-78,]),'CTE_FLOAT':([70,80,82,84,89,90,91,92,93,94,105,107,108,119,121,122,124,126,127,128,136,142,148,150,151,173,182,197,205,206,210,],[-114,-114,-114,-114,-114,-77,-78,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,156,-82,-83,-114,-114,-114,-70,-71,-78,-114,-78,-114,-114,-78,]),'CTE_BOOL':([70,80,82,84,89,90,91,92,93,94,105,107,108,119,121,122,124,126,127,128,136,142,148,150,151,173,182,197,205,206,210,],[-114,-114,-114,-114,-114,-77,-78,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,157,-82,-83,-114,-114,-114,-70,-71,-78,-114,-78,-114,-114,-78,]),'CTE_STRING':([70,80,82,84,89,90,91,92,93,94,105,107,108,119,121,122,124,126,127,128,136,142,148,150,151,173,182,197,205,206,210,],[-114,-114,-114,-114,-114,-77,-78,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,158,-82,-83,-114,-114,-114,-70,-71,-78,-114,-78,-114,-114,-78,]),'CTE_CHAR':([70,80,82,84,89,90,91,92,93,94,105,107,108,119,121,122,124,126,127,128,136,142,148,150,151,173,182,197,205,206,210,],[-114,-114,-114,-114,-114,-77,-78,-114,-114,-114,-114,-59,-60,-114,-68,-69,-114,159,-82,-83,-114,-114,-114,-70,-71,-78,-114,-78,-114,-114,-78,]),'OPERATION':([81,183,],[100,199,]),'OR':([86,87,88,109,110,111,112,113,114,115,116,117,118,120,123,125,137,144,145,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[107,-114,-114,-64,-114,-66,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,107,-65,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,-114,-31,]),'AND':([86,87,88,109,110,111,112,113,114,115,116,117,118,120,123,125,137,144,145,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[108,-114,-114,-64,-114,-66,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,108,-65,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,-114,-31,]),'NOT_EQ':([87,88,110,112,113,114,115,116,117,118,120,123,125,137,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[114,-114,114,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,114,-31,]),'EQ':([87,88,110,112,113,114,115,116,117,118,120,123,125,137,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[115,-114,115,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,115,-31,]),'LEQ':([87,88,110,112,113,114,115,116,117,118,120,123,125,137,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[116,-114,116,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,116,-31,]),'GEQ':([87,88,110,112,113,114,115,116,117,118,120,123,125,137,146,147,149,153,154,155,156,157,158,159,160,161,162,163,171,179,180,181,190,193,195,204,],[117,-114,117,-53,-54,-55,-56,-57,-58,-67,-73,-114,-80,-111,-114,-74,-76,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,-72,-114,-79,-37,-75,117,-31,]),'*':([123,125,137,153,154,155,156,157,158,159,160,161,162,163,171,180,181,190,204,],[150,-80,-111,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,150,-79,-37,-31,]),'/':([123,125,137,153,154,155,156,157,158,159,160,161,162,163,171,180,181,190,204,],[151,-80,-111,-81,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-113,151,-79,-37,-31,]),'ELSE':([184,208,],[201,-104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program1':([4,],[5,]),'program2':([4,],[6,]),'vars':([4,33,37,95,],[7,40,46,133,]),'empty':([4,6,20,33,37,38,45,53,70,75,80,82,84,86,87,88,89,92,93,94,95,102,103,105,110,119,123,124,132,136,142,144,146,148,167,169,175,177,180,182,184,185,195,205,206,],[8,21,21,41,47,50,54,54,91,98,91,91,91,106,111,120,128,91,91,91,134,140,143,91,111,91,149,91,168,173,91,106,120,128,168,98,140,143,149,197,202,54,111,210,173,]),'datatype':([4,6,20,27,28,33,37,38,44,95,97,],[9,23,23,35,36,9,9,49,51,9,135,]),'set_definition':([4,6,20,27,28,33,37,38,44,95,97,],[15,15,15,15,15,15,15,15,15,15,15,]),'map_definition':([4,6,20,27,28,33,37,38,44,45,53,95,97,132,167,185,],[16,16,16,16,16,16,16,16,16,61,61,16,16,61,61,61,]),'program3':([6,20,],[19,31,]),'proc':([6,20,],[20,20,]),'functype':([6,20,],[22,22,]),'vars1':([9,34,],[25,42,]),'main':([19,],[29,]),'vars2':([33,],[39,]),'vars_aux':([37,],[45,]),'proc1':([38,],[48,]),'statement_aux':([45,53,185,],[52,78,203,]),'statement':([45,53,132,167,185,],[53,53,167,167,53,]),'statement1':([45,53,132,167,185,],[55,55,55,55,55,]),'statement2':([45,53,132,167,185,],[56,56,56,56,56,]),'assignment':([45,53,132,167,185,],[57,57,57,57,57,]),'input':([45,53,132,167,185,],[58,58,58,58,58,]),'output':([45,53,132,167,185,],[59,59,59,59,59,]),'set_operation':([45,53,126,132,167,185,],[60,60,163,60,60,60,]),'return':([45,53,132,167,185,],[62,62,62,62,62,]),'map_assignment':([45,53,132,167,185,],[63,63,63,63,63,]),'map_operation':([45,53,126,132,167,185,],[64,64,162,64,64,64,]),'condition':([45,53,132,167,185,],[65,65,65,65,65,]),'while':([45,53,132,167,185,],[66,66,66,66,66,]),'map_access':([45,53,126,132,167,185,],[71,71,161,71,71,71,]),'expression':([70,80,84,93,94,124,136,142,182,205,206,],[85,99,103,130,131,152,172,177,198,198,172,]),'exp0':([70,80,84,93,94,105,124,136,142,182,205,206,],[86,86,86,86,86,144,86,86,86,86,86,86,]),'exp':([70,80,82,84,92,93,94,105,124,136,142,182,205,206,],[87,87,101,87,129,87,87,87,87,87,87,195,87,87,]),'term':([70,80,82,84,92,93,94,105,119,124,136,142,182,205,206,],[88,88,88,88,88,88,88,88,146,88,88,88,88,88,88,]),'term_not':([70,80,82,84,92,93,94,105,119,124,136,142,182,205,206,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'proc2':([75,169,],[96,189,]),'expression2':([86,144,],[104,178,]),'logop':([86,144,],[105,105,]),'exp02':([87,110,195,],[109,145,109,]),'relop':([87,110,195,],[110,110,110,]),'exp2':([88,146,],[118,179,]),'addsub':([88,89,146,148,],[119,127,119,127,]),'factor':([89,148,],[123,180,]),'factor2':([89,148,],[125,125,]),'factor3':([89,148,],[126,126,]),'proc3':([95,],[132,]),'input1':([102,175,],[138,191,]),'output1':([103,177,],[141,192,]),'term2':([123,180,],[147,193,]),'muldiv':([123,180,],[148,148,]),'varcte':([126,],[153,]),'function_call':([126,],[160,]),'proc4':([132,167,],[166,188,]),'set_operation1':([136,206,],[170,170,]),'block':([164,165,201,],[184,186,207,]),'function_call1':([182,],[194,]),'function_call2':([182,205,],[196,209,]),'condition1':([184,],[200,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; program1','program',4,'p_program','lexer.py',100),
  ('program1 -> program2 program3 main','program1',3,'p_program1','lexer.py',103),
  ('program2 -> vars','program2',1,'p_program2','lexer.py',106),
  ('program2 -> empty','program2',1,'p_program2','lexer.py',107),
  ('program3 -> proc program3','program3',2,'p_program3','lexer.py',110),
  ('program3 -> empty','program3',1,'p_program3','lexer.py',111),
  ('vars -> datatype vars1 ; vars2','vars',4,'p_vars','lexer.py',114),
  ('vars1 -> ID , vars1','vars1',3,'p_vars1','lexer.py',117),
  ('vars1 -> ID','vars1',1,'p_vars1','lexer.py',118),
  ('vars2 -> vars','vars2',1,'p_vars2','lexer.py',121),
  ('vars2 -> empty','vars2',1,'p_vars2','lexer.py',122),
  ('proc -> functype ID ( proc1 ) { proc3 proc4 }','proc',9,'p_proc','lexer.py',125),
  ('proc1 -> datatype ID proc2','proc1',3,'p_proc1','lexer.py',128),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',129),
  ('proc2 -> , datatype ID proc2','proc2',4,'p_proc2','lexer.py',132),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',133),
  ('proc3 -> vars','proc3',1,'p_proc3','lexer.py',136),
  ('proc3 -> empty','proc3',1,'p_proc3','lexer.py',137),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',140),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',141),
  ('assignment -> ID ASSIGNATOR expression','assignment',3,'p_assignment','lexer.py',144),
  ('condition -> IF ( expression ) block condition1','condition',6,'p_condition','lexer.py',147),
  ('condition1 -> ELSE block','condition1',2,'p_condition1','lexer.py',150),
  ('condition1 -> empty','condition1',1,'p_condition1','lexer.py',151),
  ('input -> READ ( ID input1 )','input',5,'p_input','lexer.py',154),
  ('input1 -> , ID input1','input1',3,'p_input1','lexer.py',157),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',158),
  ('output -> PRINT ( expression output1 )','output',5,'p_output','lexer.py',161),
  ('output1 -> , expression output1','output1',3,'p_output1','lexer.py',164),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',165),
  ('function_call -> ID ( function_call1 )','function_call',4,'p_function_call','lexer.py',168),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',171),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',172),
  ('function_call2 -> expression , function_call2','function_call2',3,'p_function_call2','lexer.py',175),
  ('function_call2 -> empty','function_call2',1,'p_function_call2','lexer.py',176),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',179),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',182),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',185),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',186),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',189),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',190),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',193),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',194),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',195),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',196),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',197),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',198),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',199),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',200),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',203),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',204),
  ('while -> WHILE ( expression ) block','while',5,'p_while','lexer.py',207),
  ('relop -> <','relop',1,'p_relop','lexer.py',210),
  ('relop -> >','relop',1,'p_relop','lexer.py',211),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',212),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',213),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',214),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',215),
  ('logop -> OR','logop',1,'p_logop','lexer.py',218),
  ('logop -> AND','logop',1,'p_logop','lexer.py',219),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',224),
  ('expression2 -> logop exp0 expression2','expression2',3,'p_expression2','lexer.py',227),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',228),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',231),
  ('exp02 -> relop exp02','exp02',2,'p_exp02','lexer.py',234),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',235),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',238),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',241),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',242),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',245),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',246),
  ('exp2 -> addsub term exp2','exp2',3,'p_exp2','lexer.py',249),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',250),
  ('term -> term_not factor term2','term',3,'p_term','lexer.py',253),
  ('term2 -> muldiv factor term2','term2',3,'p_term2','lexer.py',256),
  ('term2 -> empty','term2',1,'p_term2','lexer.py',257),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',260),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',261),
  ('factor -> ( expression )','factor',3,'p_factor','lexer.py',264),
  ('factor -> factor2','factor',1,'p_factor','lexer.py',265),
  ('factor2 -> factor3 varcte','factor2',2,'p_factor2','lexer.py',268),
  ('factor3 -> addsub','factor3',1,'p_factor3','lexer.py',271),
  ('factor3 -> empty','factor3',1,'p_factor3','lexer.py',272),
  ('varcte -> ID','varcte',1,'p_varcte','lexer.py',275),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','lexer.py',276),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','lexer.py',277),
  ('varcte -> CTE_BOOL','varcte',1,'p_varcte','lexer.py',278),
  ('varcte -> CTE_STRING','varcte',1,'p_varcte','lexer.py',279),
  ('varcte -> CTE_CHAR','varcte',1,'p_varcte','lexer.py',280),
  ('varcte -> function_call','varcte',1,'p_varcte','lexer.py',281),
  ('varcte -> map_access','varcte',1,'p_varcte','lexer.py',282),
  ('varcte -> map_operation','varcte',1,'p_varcte','lexer.py',283),
  ('varcte -> set_operation','varcte',1,'p_varcte','lexer.py',284),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',287),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',288),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',289),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',290),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',291),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',292),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',293),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',296),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',299),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',300),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',303),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',306),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',307),
  ('main -> MAIN { vars_aux statement_aux }','main',5,'p_main','lexer.py',310),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',313),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',314),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',317),
  ('map_access -> ID ( exp )','map_access',4,'p_map_access','lexer.py',320),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',323),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',326),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',329),
]
