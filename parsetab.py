
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OPERATION OPERATION OPERATION OPERATION OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' program1program1 : var program1\n                | program2program2 : proc program2\n                | mainprocs : proc\n             | proc procsproc : proca1 procA\n            | VOID procA\n            | emptyproca1 :  datatype ID '(' procA : proc1 ')' '{' proc3 '}' proc1 : datatype ID proc2\n             | emptyproc2 : ',' datatype ID proc2\n             | emptyproc3 : var proc3\n             | proc4proc4 : statement proc4\n             | emptyvars : var vars\n            | varvar : datatype var1 var1 : ID ',' var1\n             | ID var2var2 : ';' assignment : assignment2 ASSIGNATOR n_quad_assign expressionassignment2 : IDn_quad_assign : condition : IF '(' expression ')' block condition1condition1 : ELSE block\n                  | emptyinput : READ '(' ID input1 ')' input1 : ',' ID input1\n              | emptyoutput : PRINT '(' expression output1 ')' output1 : ',' expression output1\n               | emptyfunction_call : ID '(' function_call1 ')' function_call1 : empty\n                      | function_call2function_call2 : expression ',' function_call2\n                      | expressionreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operation\n                  | function_callstatement2 : condition\n                  | whilewhile : WHILE '(' expression ')' blockrelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n           | ANDexpression : exp0 expression2expression2 : logop exp0 n_quad_logop expression2\n                 | emptyn_quad_logop : exp0 : exp exp02exp02 : relop exp\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term n_quad_addsub exp2\n          | emptyterm : term_not factor n_quad_muldiv term2n_quad_muldiv : n_quad_addsub : term2 : muldiv factor n_quad_muldiv term2\n           | n_quad_notn_quad_not : term_not : '!'\n              | emptyfactor : '(' n_push_false_bottom expression ')' n_pop_false_bottom\n            | varcten_push_false_bottom : n_pop_false_bottom : varcte : ID empty\n            | varcte1varcte1 : CTE_INT\n               | CTE_FLOAT\n               | CTE_BOOL\n               | CTE_STRING\n               | CTE_CHAR\n               | function_call\n               | map_access\n               | map_operation\n               | set_operationfunctype : datatype\n               | VOIDdatatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' block : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN n_clear_scope '{' vars_aux statement_aux '}'  n_clear_scope : vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '(' exp ')' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty :"
    
_lr_action_items = {'$end':([2,9,10,13,30,31,114,],[0,-1,-3,-5,-2,-4,-120,]),'RETURN':([34,42,45,46,47,53,55,56,57,58,69,72,73,81,84,90,92,108,193,194,202,213,214,217,218,],[-23,-25,-26,-128,60,-24,-122,60,-22,-123,-49,60,60,-59,-60,60,-21,-48,60,-61,-128,-32,-30,-117,-31,]),'READ':([34,42,45,46,47,53,55,56,57,58,69,72,73,81,84,90,92,108,193,194,202,213,214,217,218,],[-23,-25,-26,-128,61,-24,-122,61,-22,-123,-49,61,61,-59,-60,61,-21,-48,61,-61,-128,-32,-30,-117,-31,]),'VOID':([4,12,14,15,27,29,34,42,45,53,103,],[5,5,5,-10,-9,-8,-23,-25,-26,-24,-12,]),'OPERATION':([110,164,],[159,188,]),'CHAR':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,73,103,],[7,7,7,7,7,-10,-9,7,-8,7,-23,-25,-11,-26,7,7,7,7,-24,7,7,-12,]),'ASSIGNATOR':([70,71,80,178,],[104,105,-28,-125,]),'WHILE':([34,42,45,46,47,53,55,56,57,58,69,72,73,81,84,90,92,108,193,194,202,213,214,217,218,],[-23,-25,-26,-128,65,-24,-122,65,-22,-123,-49,65,65,-59,-60,65,-21,-48,65,-61,-128,-32,-30,-117,-31,]),'PROGRAM':([0,],[1,]),'PRINT':([34,42,45,46,47,53,55,56,57,58,69,72,73,81,84,90,92,108,193,194,202,213,214,217,218,],[-23,-25,-26,-128,66,-24,-122,66,-22,-123,-49,66,66,-59,-60,66,-21,-48,66,-61,-128,-32,-30,-117,-31,]),'!':([60,101,102,104,105,109,111,119,131,132,133,135,136,138,140,141,142,143,145,146,148,153,162,174,179,180,205,],[96,96,96,96,-29,96,96,-94,-78,-79,96,-69,96,-68,-67,96,-64,-66,-65,-62,-63,96,96,96,96,96,96,]),'GEQ':([94,97,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,156,163,165,166,177,178,183,185,189,199,203,204,206,211,215,216,219,],[-128,140,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,140,-89,-96,-86,-39,-125,-84,-88,-128,-127,-95,-85,-82,-45,-92,-89,-87,]),'SET':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,73,103,],[8,8,8,8,8,-10,-9,8,-8,8,-23,-25,-11,-26,8,8,8,8,-24,8,8,-12,]),')':([5,11,24,25,38,43,49,50,94,95,97,109,112,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,137,139,144,147,149,150,151,154,155,156,157,158,160,161,163,165,166,167,168,169,171,173,175,177,178,180,182,183,185,189,190,192,196,197,198,199,200,201,203,204,205,206,207,208,210,211,215,216,219,],[-128,-128,37,-14,-128,-11,-16,-13,-128,-128,-128,-128,-128,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,-70,-72,-74,-76,-128,172,-128,177,-41,178,-43,-40,181,-15,-89,-96,-86,-73,-75,191,-35,195,-38,-39,-125,199,203,-84,-88,-128,-128,-128,-128,-42,211,-127,-46,-47,-95,-85,199,-82,-71,-34,-37,-45,-92,-89,-87,]),'(':([35,40,60,61,65,66,80,82,93,96,99,101,102,104,105,109,111,119,124,131,132,133,135,136,138,140,141,142,143,145,146,148,153,158,159,162,174,179,180,184,186,187,188,201,205,],[43,43,-128,100,101,102,109,111,119,-90,-91,-128,-128,-128,-29,-128,-128,-94,109,-78,-79,-128,-69,-128,-68,-67,-128,-64,-66,-65,-62,-63,-128,-91,180,-128,-128,-128,-128,-80,-81,119,205,-91,-128,]),'+':([94,116,117,118,120,121,122,123,124,125,126,127,128,129,163,165,166,177,178,183,185,189,199,203,204,211,215,216,219,],[131,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-89,-96,-86,-39,-125,-84,-88,131,-127,-95,-85,-45,-92,-89,-87,]),'*':([116,117,118,120,121,122,123,124,125,126,127,128,129,163,165,177,178,199,203,204,211,215,216,],[-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,184,-96,-39,-125,-127,-95,-85,-45,-92,184,]),'-':([94,116,117,118,120,121,122,123,124,125,126,127,128,129,163,165,166,177,178,183,185,189,199,203,204,211,215,216,219,],[132,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-89,-96,-86,-39,-125,-84,-88,132,-127,-95,-85,-45,-92,-89,-87,]),',':([6,7,16,18,20,21,22,35,38,41,51,54,94,95,97,112,113,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,137,139,144,147,149,151,156,157,163,165,166,167,168,177,178,183,185,189,190,192,196,199,203,204,206,207,211,215,216,219,],[-115,-113,-112,-114,-110,-109,-111,44,48,52,-116,44,-128,-128,-128,48,-124,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,-70,-72,-74,-76,170,174,-128,179,-89,-96,-86,-73,-75,-39,-125,-84,-88,-128,-128,170,174,-127,-95,-85,-82,-71,-45,-92,-89,-87,]),'/':([116,117,118,120,121,122,123,124,125,126,127,128,129,163,165,177,178,199,203,204,211,215,216,],[-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,186,-96,-39,-125,-127,-95,-85,-45,-92,186,]),'.':([80,124,],[110,164,]),'CTE_CHAR':([60,93,96,99,101,102,104,105,109,111,119,131,132,133,135,136,138,140,141,142,143,145,146,148,153,158,162,174,179,180,184,186,187,201,205,],[-128,121,-90,-91,-128,-128,-128,-29,-128,-128,-94,-78,-79,-128,-69,-128,-68,-67,-128,-64,-66,-65,-62,-63,-128,-91,-128,-128,-128,-128,-80,-81,121,-91,-128,]),';':([3,35,54,62,63,64,74,76,77,78,79,83,85,88,94,95,97,98,113,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,137,139,144,147,152,163,165,166,167,168,176,177,178,183,185,189,190,191,195,199,203,204,206,207,211,215,216,219,],[4,45,45,-56,-54,-58,-51,108,-50,-55,-57,-53,-52,-54,-128,-128,-128,-44,-124,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,-70,-72,-74,-76,-126,-89,-96,-86,-73,-75,-27,-39,-125,-84,-88,-128,-128,-33,-36,-127,-95,-85,-82,-71,-45,-92,-89,-87,]),'<':([8,17,94,97,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,156,163,165,166,177,178,183,185,189,199,203,204,206,211,215,216,219,],[28,33,-128,146,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,146,-89,-96,-86,-39,-125,-84,-88,-128,-127,-95,-85,-82,-45,-92,-89,-87,]),'>':([6,7,16,18,20,21,22,39,51,87,94,97,113,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,156,163,165,166,177,178,183,185,189,199,203,204,206,211,215,216,219,],[-115,-113,-112,-114,-110,-109,-111,51,-116,113,-128,148,-124,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,148,-89,-96,-86,-39,-125,-84,-88,-128,-127,-95,-85,-82,-45,-92,-89,-87,]),'CTE_STRING':([60,93,96,99,101,102,104,105,109,111,119,131,132,133,135,136,138,140,141,142,143,145,146,148,153,158,162,174,179,180,184,186,187,201,205,],[-128,128,-90,-91,-128,-128,-128,-29,-128,-128,-94,-78,-79,-128,-69,-128,-68,-67,-128,-64,-66,-65,-62,-63,-128,-91,-128,-128,-128,-128,-80,-81,128,-91,-128,]),'STRING':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,73,103,],[16,16,16,16,16,-10,-9,16,-8,16,-23,-25,-11,-26,16,16,16,16,-24,16,16,-12,]),'NOT_EQ':([94,97,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,156,163,165,166,177,178,183,185,189,199,203,204,206,211,215,216,219,],[-128,142,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,142,-89,-96,-86,-39,-125,-84,-88,-128,-127,-95,-85,-82,-45,-92,-89,-87,]),'ELSE':([202,217,],[212,-117,]),'CTE_INT':([60,93,96,99,101,102,104,105,109,111,119,131,132,133,135,136,138,140,141,142,143,145,146,148,153,158,162,174,179,180,184,186,187,201,205,],[-128,123,-90,-91,-128,-128,-128,-29,-128,-128,-94,-78,-79,-128,-69,-128,-68,-67,-128,-64,-66,-65,-62,-63,-128,-91,-128,-128,-128,-128,-80,-81,123,-91,-128,]),'EQ':([94,97,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,156,163,165,166,177,178,183,185,189,199,203,204,206,211,215,216,219,],[-128,145,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,145,-89,-96,-86,-39,-125,-84,-88,-128,-127,-95,-85,-82,-45,-92,-89,-87,]),'ID':([1,6,7,16,18,19,20,21,22,26,32,34,42,44,45,46,47,51,53,55,56,57,58,59,60,63,69,72,73,81,84,86,90,92,93,96,99,100,101,102,104,105,108,109,111,113,119,131,132,133,135,136,138,140,141,142,143,145,146,148,153,158,162,170,174,179,180,184,186,187,193,194,201,202,205,213,214,217,218,],[3,-115,-113,-112,-114,35,-110,-109,-111,38,40,-23,-25,54,-26,-128,80,-116,-24,-122,80,-22,-123,54,-128,-115,-49,80,80,-59,-60,112,80,-21,124,-90,-91,149,-128,-128,-128,-29,-48,-128,-128,-124,-94,-78,-79,-128,-69,-128,-68,-67,-128,-64,-66,-65,-62,-63,-128,-91,-128,192,-128,-128,-128,-80,-81,124,80,-61,-91,-128,-128,-32,-30,-117,-31,]),'IF':([34,42,45,46,47,53,55,56,57,58,69,72,73,81,84,90,92,108,193,194,202,213,214,217,218,],[-23,-25,-26,-128,82,-24,-122,82,-22,-123,-49,82,82,-59,-60,82,-21,-48,82,-61,-128,-32,-30,-117,-31,]),'AND':([94,95,97,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,144,147,156,163,165,166,167,168,177,178,183,185,189,190,199,203,204,206,211,215,216,219,],[-128,135,-128,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,-74,-76,-128,-89,-96,-86,-73,-75,-39,-125,-84,-88,-128,135,-127,-95,-85,-82,-45,-92,-89,-87,]),'MAP':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,55,56,57,58,69,72,73,81,84,90,92,103,108,193,194,202,213,214,217,218,],[17,17,17,17,17,-10,-9,17,-8,17,-23,-25,-11,-26,17,17,17,17,-24,-122,17,17,-123,-49,17,17,-59,-60,17,-21,-12,-48,17,-61,-128,-32,-30,-117,-31,]),'INT':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,73,103,],[21,21,21,21,21,-10,-9,21,-8,21,-23,-25,-11,-26,21,21,21,21,-24,21,21,-12,]),'FLOAT':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,73,103,],[20,20,20,20,20,-10,-9,20,-8,20,-23,-25,-11,-26,20,20,20,20,-24,20,20,-12,]),'CTE_FLOAT':([60,93,96,99,101,102,104,105,109,111,119,131,132,133,135,136,138,140,141,142,143,145,146,148,153,158,162,174,179,180,184,186,187,201,205,],[-128,126,-90,-91,-128,-128,-128,-29,-128,-128,-94,-78,-79,-128,-69,-128,-68,-67,-128,-64,-66,-65,-62,-63,-128,-91,-128,-128,-128,-128,-80,-81,126,-91,-128,]),'CTE_BOOL':([60,93,96,99,101,102,104,105,109,111,119,131,132,133,135,136,138,140,141,142,143,145,146,148,153,158,162,174,179,180,184,186,187,201,205,],[-128,127,-90,-91,-128,-128,-128,-29,-128,-128,-94,-78,-79,-128,-69,-128,-68,-67,-128,-64,-66,-65,-62,-63,-128,-91,-128,-128,-128,-128,-80,-81,127,-91,-128,]),'LEQ':([94,97,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,156,163,165,166,177,178,183,185,189,199,203,204,206,211,215,216,219,],[-128,143,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,143,-89,-96,-86,-39,-125,-84,-88,-128,-127,-95,-85,-82,-45,-92,-89,-87,]),'BOOL':([4,5,11,12,14,15,27,28,29,33,34,42,43,45,46,47,48,52,53,57,73,103,],[22,22,22,22,22,-10,-9,22,-8,22,-23,-25,-11,-26,22,22,22,22,-24,22,22,-12,]),'{':([23,36,37,172,181,212,],[-121,46,47,193,193,193,]),'MAIN':([4,12,14,15,27,29,34,42,45,53,103,],[23,23,23,-10,-9,-8,-23,-25,-26,-24,-12,]),'}':([34,42,45,46,47,53,55,56,57,58,67,68,69,72,73,75,81,84,89,90,91,92,106,107,108,115,193,194,202,209,213,214,217,218,],[-23,-25,-26,-128,-128,-24,-122,-128,-22,-123,-18,103,-49,-128,-128,-20,-59,-60,114,-128,-119,-21,-19,-17,-48,-118,-128,-61,-128,217,-32,-30,-117,-31,]),'OR':([94,95,97,116,117,118,120,121,122,123,124,125,126,127,128,129,130,134,144,147,156,163,165,166,167,168,177,178,183,185,189,190,199,203,204,206,211,215,216,219,],[-128,138,-128,-103,-97,-93,-85,-102,-105,-98,-128,-106,-99,-100,-101,-104,-77,-83,-74,-76,-128,-89,-96,-86,-73,-75,-39,-125,-84,-88,-128,138,-127,-95,-85,-82,-45,-92,-89,-87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term_not':([60,101,102,104,109,111,133,136,141,153,162,174,179,180,205,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'input1':([149,192,],[169,208,]),'term2':([163,216,],[183,219,]),'vars':([46,57,],[55,92,]),'n_quad_muldiv':([120,204,],[163,216,]),'n_clear_scope':([23,],[36,]),'output1':([151,196,],[173,210,]),'map_definition':([4,5,11,12,14,28,33,46,47,48,52,56,57,72,73,90,193,],[6,6,6,6,6,6,6,6,63,6,6,88,6,88,63,88,88,]),'function_call':([47,56,72,73,90,93,187,193,],[64,64,64,64,64,116,116,64,]),'return':([47,56,72,73,90,193,],[78,78,78,78,78,78,]),'vars_aux':([46,],[56,]),'statement_aux':([56,90,193,],[89,115,209,]),'proc4':([47,72,73,],[67,106,67,]),'addsub':([94,189,],[133,133,]),'proc1':([5,11,],[24,24,]),'proc3':([47,73,],[68,107,]),'proc2':([38,112,],[50,161,]),'program1':([4,12,],[9,30,]),'program2':([4,12,14,],[10,10,31,]),'exp2':([94,189,],[130,206,]),'exp0':([60,101,102,109,111,136,153,162,174,179,180,205,],[95,95,95,95,95,167,95,95,95,95,95,95,]),'proca1':([4,12,14,],[11,11,11,]),'set_operation1':([180,205,],[198,198,]),'n_pop_false_bottom':([203,],[215,]),'assignment2':([47,56,72,73,90,193,],[71,71,71,71,71,71,]),'program':([0,],[2,]),'statement':([47,56,72,73,90,193,],[72,90,72,72,90,90,]),'factor':([93,187,],[120,204,]),'var':([4,12,46,47,57,73,],[12,12,57,73,57,73,]),'input':([47,56,72,73,90,193,],[74,74,74,74,74,74,]),'n_quad_logop':([167,],[190,]),'main':([4,12,14,],[13,13,13,]),'proc':([4,12,14,],[14,14,14,]),'empty':([4,5,11,12,14,38,46,47,56,60,72,73,90,94,95,97,101,102,104,109,111,112,124,133,136,141,149,151,153,156,162,174,179,180,189,190,192,193,196,202,205,],[15,25,25,15,15,49,58,75,91,99,75,75,91,134,139,147,99,99,99,158,99,49,165,99,99,99,171,175,99,147,99,99,99,201,134,139,171,91,175,213,201,]),'map_assignment':([47,56,72,73,90,193,],[62,62,62,62,62,62,]),'var1':([19,44,59,],[34,53,34,]),'statement2':([47,56,72,73,90,193,],[69,69,69,69,69,69,]),'statement1':([47,56,72,73,90,193,],[76,76,76,76,76,76,]),'var2':([35,54,],[42,42,]),'assignment':([47,56,72,73,90,193,],[77,77,77,77,77,77,]),'logop':([95,190,],[136,136,]),'n_quad_assign':([105,],[153,]),'n_push_false_bottom':([119,],[162,]),'condition1':([202,],[214,]),'map_operation':([47,56,72,73,90,93,187,193,],[79,79,79,79,79,122,122,79,]),'expression2':([95,190,],[137,207,]),'condition':([47,56,72,73,90,193,],[81,81,81,81,81,81,]),'varcte':([93,187,],[118,118,]),'term':([60,101,102,104,109,111,133,136,141,153,162,174,179,180,205,],[94,94,94,94,94,94,166,94,94,94,94,94,94,94,94,]),'set_definition':([4,5,11,12,14,28,33,46,47,48,52,57,73,],[18,18,18,18,18,18,18,18,18,18,18,18,18,]),'set_operation':([47,56,72,73,90,93,187,193,],[83,83,83,83,83,125,125,83,]),'datatype':([4,5,11,12,14,28,33,46,47,48,52,57,73,],[19,26,26,19,32,39,41,59,59,86,87,59,59,]),'varcte1':([93,187,],[117,117,]),'relop':([97,156,],[141,141,]),'procA':([5,11,],[27,29,]),'function_call1':([109,],[154,]),'map_access':([47,56,72,73,90,93,187,193,],[70,70,70,70,70,129,129,70,]),'while':([47,56,72,73,90,193,],[84,84,84,84,84,84,]),'function_call2':([109,179,],[155,197,]),'exp':([60,101,102,104,109,111,136,141,153,162,174,179,180,205,],[97,97,97,152,156,97,97,168,97,97,97,97,97,97,]),'n_quad_addsub':([166,],[189,]),'output':([47,56,72,73,90,193,],[85,85,85,85,85,85,]),'exp02':([97,156,],[144,144,]),'n_quad_not':([163,216,],[185,185,]),'expression':([60,101,102,109,111,153,162,174,179,180,205,],[98,150,151,157,160,176,182,196,157,200,200,]),'block':([172,181,212,],[194,202,218,]),'muldiv':([163,216,],[187,187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; program1','program',4,'p_program','lexer.py',125),
  ('program1 -> var program1','program1',2,'p_program1','lexer.py',129),
  ('program1 -> program2','program1',1,'p_program1','lexer.py',130),
  ('program2 -> proc program2','program2',2,'p_program2','lexer.py',133),
  ('program2 -> main','program2',1,'p_program2','lexer.py',134),
  ('procs -> proc','procs',1,'p_procs','lexer.py',137),
  ('procs -> proc procs','procs',2,'p_procs','lexer.py',138),
  ('proc -> proca1 procA','proc',2,'p_proc','lexer.py',141),
  ('proc -> VOID procA','proc',2,'p_proc','lexer.py',142),
  ('proc -> empty','proc',1,'p_proc','lexer.py',143),
  ('proca1 -> datatype ID (','proca1',3,'p_proca1','lexer.py',148),
  ('procA -> proc1 ) { proc3 }','procA',5,'p_procA','lexer.py',156),
  ('proc1 -> datatype ID proc2','proc1',3,'p_proc1','lexer.py',159),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',160),
  ('proc2 -> , datatype ID proc2','proc2',4,'p_proc2','lexer.py',163),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',164),
  ('proc3 -> var proc3','proc3',2,'p_proc3','lexer.py',167),
  ('proc3 -> proc4','proc3',1,'p_proc3','lexer.py',168),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',171),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',172),
  ('vars -> var vars','vars',2,'p_vars','lexer.py',175),
  ('vars -> var','vars',1,'p_vars','lexer.py',176),
  ('var -> datatype var1','var',2,'p_var','lexer.py',179),
  ('var1 -> ID , var1','var1',3,'p_var1','lexer.py',189),
  ('var1 -> ID var2','var1',2,'p_var1','lexer.py',190),
  ('var2 -> ;','var2',1,'p_var2','lexer.py',197),
  ('assignment -> assignment2 ASSIGNATOR n_quad_assign expression','assignment',4,'p_assignment','lexer.py',217),
  ('assignment2 -> ID','assignment2',1,'p_assignment2','lexer.py',222),
  ('n_quad_assign -> <empty>','n_quad_assign',0,'p_n_quad_assign','lexer.py',234),
  ('condition -> IF ( expression ) block condition1','condition',6,'p_condition','lexer.py',240),
  ('condition1 -> ELSE block','condition1',2,'p_condition1','lexer.py',243),
  ('condition1 -> empty','condition1',1,'p_condition1','lexer.py',244),
  ('input -> READ ( ID input1 )','input',5,'p_input','lexer.py',247),
  ('input1 -> , ID input1','input1',3,'p_input1','lexer.py',250),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',251),
  ('output -> PRINT ( expression output1 )','output',5,'p_output','lexer.py',254),
  ('output1 -> , expression output1','output1',3,'p_output1','lexer.py',257),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',258),
  ('function_call -> ID ( function_call1 )','function_call',4,'p_function_call','lexer.py',261),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',267),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',268),
  ('function_call2 -> expression , function_call2','function_call2',3,'p_function_call2','lexer.py',271),
  ('function_call2 -> expression','function_call2',1,'p_function_call2','lexer.py',272),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',275),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',278),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',281),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',282),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',285),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',286),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',289),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',290),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',291),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',292),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',293),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',294),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',295),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',296),
  ('statement1 -> function_call','statement1',1,'p_statement1','lexer.py',297),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',300),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',301),
  ('while -> WHILE ( expression ) block','while',5,'p_while','lexer.py',304),
  ('relop -> <','relop',1,'p_relop','lexer.py',307),
  ('relop -> >','relop',1,'p_relop','lexer.py',308),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',309),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',310),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',311),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',312),
  ('logop -> OR','logop',1,'p_logop','lexer.py',316),
  ('logop -> AND','logop',1,'p_logop','lexer.py',317),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',393),
  ('expression2 -> logop exp0 n_quad_logop expression2','expression2',4,'p_expression2','lexer.py',396),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',397),
  ('n_quad_logop -> <empty>','n_quad_logop',0,'p_n_quad_logop','lexer.py',400),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',404),
  ('exp02 -> relop exp','exp02',2,'p_exp02','lexer.py',407),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',408),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',413),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',416),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',417),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',421),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',422),
  ('exp2 -> addsub term n_quad_addsub exp2','exp2',4,'p_exp2','lexer.py',427),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',428),
  ('term -> term_not factor n_quad_muldiv term2','term',4,'p_term','lexer.py',431),
  ('n_quad_muldiv -> <empty>','n_quad_muldiv',0,'p_n_quad_muldiv','lexer.py',434),
  ('n_quad_addsub -> <empty>','n_quad_addsub',0,'p_n_quad_addsub','lexer.py',438),
  ('term2 -> muldiv factor n_quad_muldiv term2','term2',4,'p_term2','lexer.py',442),
  ('term2 -> n_quad_not','term2',1,'p_term2','lexer.py',443),
  ('n_quad_not -> <empty>','n_quad_not',0,'p_n_quad_not','lexer.py',446),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',452),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',453),
  ('factor -> ( n_push_false_bottom expression ) n_pop_false_bottom','factor',5,'p_factor','lexer.py',458),
  ('factor -> varcte','factor',1,'p_factor','lexer.py',459),
  ('n_push_false_bottom -> <empty>','n_push_false_bottom',0,'p_n_push_false_bottom','lexer.py',462),
  ('n_pop_false_bottom -> <empty>','n_pop_false_bottom',0,'p_n_pop_false_bottom','lexer.py',466),
  ('varcte -> ID empty','varcte',2,'p_varcte','lexer.py',470),
  ('varcte -> varcte1','varcte',1,'p_varcte','lexer.py',471),
  ('varcte1 -> CTE_INT','varcte1',1,'p_varcte1','lexer.py',485),
  ('varcte1 -> CTE_FLOAT','varcte1',1,'p_varcte1','lexer.py',486),
  ('varcte1 -> CTE_BOOL','varcte1',1,'p_varcte1','lexer.py',487),
  ('varcte1 -> CTE_STRING','varcte1',1,'p_varcte1','lexer.py',488),
  ('varcte1 -> CTE_CHAR','varcte1',1,'p_varcte1','lexer.py',489),
  ('varcte1 -> function_call','varcte1',1,'p_varcte1','lexer.py',490),
  ('varcte1 -> map_access','varcte1',1,'p_varcte1','lexer.py',491),
  ('varcte1 -> map_operation','varcte1',1,'p_varcte1','lexer.py',492),
  ('varcte1 -> set_operation','varcte1',1,'p_varcte1','lexer.py',493),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',501),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',502),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',505),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',506),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',507),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',508),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',509),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',510),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',511),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',515),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',519),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',522),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',523),
  ('main -> MAIN n_clear_scope { vars_aux statement_aux }','main',6,'p_main','lexer.py',526),
  ('n_clear_scope -> <empty>','n_clear_scope',0,'p_n_clear_scope','lexer.py',529),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',535),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',536),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',539),
  ('map_access -> ID ( exp )','map_access',4,'p_map_access','lexer.py',543),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',546),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',549),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',552),
]
