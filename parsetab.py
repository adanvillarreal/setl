
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OPERATION OPERATION OPERATION OPERATION OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' n_main_quad program1n_main_quad : program1 : var program1\n                | program2program2 : proc program2\n                | mainproc : proca1 procA n_check_has_return\n            | VOID proca2 procA\n            | emptyn_check_has_return : proca2 : ID '(' proca1 :  datatype ID '(' procA : proc1 ')' '{' proc3 '}' proc1 : n_push_variable proc2\n             | emptyproc2 : ',' n_push_variable proc2\n             | emptyn_push_variable :  datatype IDproc3 : var proc3\n             | n_quad_counter proc4n_quad_counter : proc4 : statement proc4\n             | emptyvars : var vars\n            | varvar : datatype var1 var1 : ID ',' var1\n             | ID var2var2 : ';' assignment : assignment2 ASSIGNATOR n_quad_assign expressionassignment2 : IDn_quad_assign : condition : IF '(' expression n_while_2 ')' block condition1condition1 : ELSE n_if_2 block n_if_3\n                  | n_if_3n_if_2 : n_if_3 : while : WHILE n_while_1 '(' expression ')' n_while_2 block n_while_3n_while_1 : n_while_2 : n_while_3 : input : READ '(' n_process_read input1 ')' input1 : ',' n_process_read input1\n              | emptyn_process_read : IDoutput : PRINT '(' n_output_quad output1 ')' output1 : ',' n_output_quad output1\n               | emptyn_output_quad : expressionfunction_call : n_era_size function_call1 ')' n_era_size : ID '(' function_call1 : empty\n                      | function_call2function_call2 : n_verify_argument ',' n_add_one_to_counter function_call2\n                      | n_verify_argumentn_add_one_to_counter : n_verify_argument : expressionreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operation\n                  | function_callstatement2 : condition\n                  | whilerelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n           | ANDexpression : exp0 expression2expression2 : logop exp0 n_quad_logop expression2\n                 | emptyn_quad_logop : exp0 : exp exp02exp02 : relop exp\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term n_quad_addsub exp2\n          | emptyterm : term_not factor n_quad_muldiv term2n_quad_muldiv : n_quad_addsub : term2 : muldiv factor n_quad_muldiv term2\n           | n_quad_notn_quad_not : term_not : '!'\n              | emptyfactor : '(' n_push_false_bottom expression ')' n_pop_false_bottom\n            | varcten_push_false_bottom : n_pop_false_bottom : varcte : ID empty\n            | varcte1varcte1 : CTE_INT\n               | CTE_FLOAT\n               | CTE_BOOL\n               | CTE_STRING\n               | CTE_CHAR\n               | function_call\n               | map_access\n               | map_operation\n               | set_operationfunctype : datatype\n               | VOIDdatatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' block : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN n_clear_scope n_main_quad2 '{' vars_aux statement_aux '}' n_main_quad2 :  n_clear_scope : vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '[' exp ']' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty :"
    
_lr_action_items = {'$end':([1,10,11,14,33,34,128,],[0,-1,-4,-6,-3,-5,-133,]),'RETURN':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,97,102,104,118,223,224,227,229,231,233,234,236,237,],[-26,-28,-29,-21,-27,-142,74,-21,-136,74,-25,-137,74,-63,-73,-74,74,-24,-62,74,-37,-41,-35,-33,-38,-130,-37,-34,]),'READ':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,97,102,104,118,223,224,227,229,231,233,234,236,237,],[-26,-28,-29,-21,-27,-142,75,-21,-136,75,-25,-137,75,-63,-73,-74,75,-24,-62,75,-37,-41,-35,-33,-38,-130,-37,-34,]),'VOID':([4,5,13,15,16,32,37,41,48,51,54,60,73,],[-2,6,6,6,-9,-10,-26,-8,-7,-28,-29,-27,-13,]),'OPERATION':([125,177,],[172,200,]),'CHAR':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,8,8,8,8,-9,8,8,-10,8,-26,-11,-8,8,-7,-28,-12,-29,8,8,-27,8,8,8,-13,]),'ASSIGNATOR':([81,82,92,192,],[115,116,-31,-139,]),'WHILE':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,97,102,104,118,223,224,227,229,231,233,234,236,237,],[-26,-28,-29,-21,-27,-142,78,-21,-136,78,-25,-137,78,-63,-73,-74,78,-24,-62,78,-37,-41,-35,-33,-38,-130,-37,-34,]),'PROGRAM':([0,],[2,]),'PRINT':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,97,102,104,118,223,224,227,229,231,233,234,236,237,],[-26,-28,-29,-21,-27,-142,79,-21,-136,79,-25,-137,79,-63,-73,-74,79,-24,-62,79,-37,-41,-35,-33,-38,-130,-37,-34,]),'!':([74,89,114,115,116,124,126,127,133,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,175,187,190,191,216,],[108,108,108,108,-32,-51,108,108,-107,-91,-92,108,-82,108,-81,-80,108,-77,-79,-78,-75,-76,108,108,-56,108,108,108,108,108,]),'GEQ':([106,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,170,176,178,179,192,195,197,201,210,214,215,217,222,225,226,232,],[-142,154,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-139,-97,-101,-142,-141,-108,-98,-95,-59,-105,-102,-100,]),'SET':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,9,9,9,9,-9,9,9,-10,9,-26,-11,-8,9,-7,-28,-12,-29,9,9,-27,9,9,9,-13,]),')':([12,26,28,29,30,40,45,46,47,52,58,67,89,106,107,109,119,120,121,122,123,124,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,151,153,158,161,163,164,166,167,170,174,176,178,179,180,181,182,184,185,186,188,191,192,193,194,195,197,201,202,204,207,208,209,210,211,212,214,215,216,217,218,219,221,222,225,226,232,],[-142,-142,43,-15,-142,-11,-17,-14,-18,-12,-142,-16,-142,-142,-142,-142,-53,170,-57,-55,-52,-51,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-83,-85,-87,-89,-142,-45,-142,-49,-50,-40,-102,-109,-99,-86,-88,203,-44,205,206,-48,210,-139,213,214,-97,-101,-142,-142,-142,-142,-54,222,-141,-60,-61,-108,-98,210,-95,-84,-43,-47,-59,-105,-102,-100,]),'(':([25,38,49,74,75,78,79,89,92,94,105,108,111,113,114,115,116,123,124,126,127,133,138,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,172,175,187,190,191,196,198,199,200,212,216,],[40,52,52,-142,112,-39,114,-142,124,127,133,-103,-104,165,-142,-142,-32,-104,-51,-142,-142,-107,124,-91,-92,-142,-82,-142,-81,-80,-142,-77,-79,-78,-75,-76,-142,-142,-56,191,-142,-142,-142,-142,-93,-94,133,216,-104,-142,]),'+':([106,130,131,132,134,135,136,137,138,139,140,141,142,143,170,176,178,179,192,195,197,201,210,214,215,222,225,226,232,],[145,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-50,-102,-109,-99,-139,-97,-101,145,-141,-108,-98,-59,-105,-102,-100,]),'*':([130,131,132,134,135,136,137,138,139,140,141,142,143,170,176,178,192,210,214,215,222,225,226,],[-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-50,196,-109,-139,-141,-108,-98,-59,-105,196,]),'-':([106,130,131,132,134,135,136,137,138,139,140,141,142,143,170,176,178,179,192,195,197,201,210,214,215,222,225,226,232,],[146,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-50,-102,-109,-99,-139,-97,-101,146,-141,-108,-98,-59,-105,-102,-100,]),',':([7,8,17,19,21,22,23,30,38,47,50,56,58,61,100,106,107,109,121,122,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,151,153,158,161,163,164,166,167,170,176,178,179,180,181,192,195,197,201,202,204,207,210,214,215,217,218,222,225,226,232,],[-128,-126,-125,-127,-123,-122,-124,44,53,-18,59,-129,44,53,-138,-142,-142,-142,-57,171,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-83,-85,-87,-89,183,-45,187,-49,-50,-102,-109,-99,-86,-88,-139,-97,-101,-142,-142,183,187,-141,-108,-98,-95,-84,-59,-105,-102,-100,]),'/':([130,131,132,134,135,136,137,138,139,140,141,142,143,170,176,178,192,210,214,215,222,225,226,],[-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-50,198,-109,-139,-141,-108,-98,-59,-105,198,]),'.':([92,138,],[125,177,]),'CTE_CHAR':([74,89,105,108,111,114,115,116,123,124,126,127,133,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,175,187,190,191,196,198,199,212,216,],[-142,-142,135,-103,-104,-142,-142,-32,-104,-51,-142,-142,-107,-91,-92,-142,-82,-142,-81,-80,-142,-77,-79,-78,-75,-76,-142,-142,-56,-142,-142,-142,-142,-93,-94,135,-104,-142,]),';':([3,38,61,76,77,84,86,88,90,91,95,96,98,100,106,107,109,110,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,151,153,158,161,168,170,176,178,179,180,181,189,192,195,197,201,202,203,206,210,214,215,217,218,222,225,226,232,],[4,54,54,-68,-72,-65,-69,118,-64,-71,-67,-70,-66,-138,-142,-142,-142,-58,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-83,-85,-87,-89,-140,-50,-102,-109,-99,-86,-88,-30,-139,-97,-101,-142,-142,-42,-46,-141,-108,-98,-95,-84,-59,-105,-102,-100,]),'<':([9,18,106,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,170,176,178,179,192,195,197,201,210,214,215,217,222,225,226,232,],[27,36,-142,160,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-139,-97,-101,-142,-141,-108,-98,-95,-59,-105,-102,-100,]),'>':([7,8,17,19,21,22,23,42,56,68,100,106,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,170,176,178,179,192,195,197,201,210,214,215,217,222,225,226,232,],[-128,-126,-125,-127,-123,-122,-124,56,-129,100,-138,-142,162,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-139,-97,-101,-142,-141,-108,-98,-95,-59,-105,-102,-100,]),'CTE_STRING':([74,89,105,108,111,114,115,116,123,124,126,127,133,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,175,187,190,191,196,198,199,212,216,],[-142,-142,142,-103,-104,-142,-142,-32,-104,-51,-142,-142,-107,-91,-92,-142,-82,-142,-81,-80,-142,-77,-79,-78,-75,-76,-142,-142,-56,-142,-142,-142,-142,-93,-94,142,-104,-142,]),'STRING':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,17,17,17,17,-9,17,17,-10,17,-26,-11,-8,17,-7,-28,-12,-29,17,17,-27,17,17,17,-13,]),'NOT_EQ':([106,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,170,176,178,179,192,195,197,201,210,214,215,217,222,225,226,232,],[-142,156,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-139,-97,-101,-142,-141,-108,-98,-95,-59,-105,-102,-100,]),'ELSE':([224,234,],[230,-130,]),'[':([92,138,],[126,126,]),'CTE_INT':([74,89,105,108,111,114,115,116,123,124,126,127,133,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,175,187,190,191,196,198,199,212,216,],[-142,-142,137,-103,-104,-142,-142,-32,-104,-51,-142,-142,-107,-91,-92,-142,-82,-142,-81,-80,-142,-77,-79,-78,-75,-76,-142,-142,-56,-142,-142,-142,-142,-93,-94,137,-104,-142,]),']':([106,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,170,173,176,178,179,192,195,197,201,210,214,215,217,222,225,226,232,],[-142,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-50,192,-102,-109,-99,-139,-97,-101,-142,-141,-108,-98,-95,-59,-105,-102,-100,]),'ID':([2,6,7,8,17,19,20,21,22,23,31,35,37,51,53,54,56,57,60,62,64,65,66,69,70,71,72,74,83,87,89,93,97,100,102,104,105,108,111,112,114,115,116,118,123,124,126,127,133,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,175,183,187,190,191,196,198,199,212,216,223,224,227,229,231,233,234,236,237,],[3,25,-128,-126,-125,-127,38,-123,-122,-124,47,49,-26,-28,61,-29,-129,-21,-27,-142,92,-21,61,-136,92,-25,-137,-142,92,-63,-142,-73,-74,-138,92,-24,138,-103,-104,164,-142,-142,-32,-62,-104,-51,-142,-142,-107,-91,-92,-142,-82,-142,-81,-80,-142,-77,-79,-78,-75,-76,-142,-142,-56,-142,164,-142,-142,-142,-93,-94,138,-104,-142,92,-37,-41,-35,-33,-38,-130,-37,-34,]),'IF':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,97,102,104,118,223,224,227,229,231,233,234,236,237,],[-26,-28,-29,-21,-27,-142,94,-21,-136,94,-25,-137,94,-63,-73,-74,94,-24,-62,94,-37,-41,-35,-33,-38,-130,-37,-34,]),'AND':([106,107,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,158,161,170,176,178,179,180,181,192,195,197,201,202,210,214,215,217,222,225,226,232,],[-142,149,-142,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-87,-89,-50,-102,-109,-99,-86,-88,-139,-97,-101,-142,149,-141,-108,-98,-95,-59,-105,-102,-100,]),'MAP':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,64,65,69,70,71,72,73,83,87,93,97,102,104,118,223,224,227,229,231,233,234,236,237,],[-2,18,18,18,18,-9,18,18,-10,18,-26,-11,-8,18,-7,-28,-12,-29,18,18,-27,18,18,18,-136,18,18,-137,-13,18,-63,-73,-74,18,-24,-62,18,-37,-41,-35,-33,-38,-130,-37,-34,]),'EQ':([106,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,170,176,178,179,192,195,197,201,210,214,215,217,222,225,226,232,],[-142,159,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-139,-97,-101,-142,-141,-108,-98,-95,-59,-105,-102,-100,]),'INT':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,22,22,22,22,-9,22,22,-10,22,-26,-11,-8,22,-7,-28,-12,-29,22,22,-27,22,22,22,-13,]),'FLOAT':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,21,21,21,21,-9,21,21,-10,21,-26,-11,-8,21,-7,-28,-12,-29,21,21,-27,21,21,21,-13,]),'CTE_FLOAT':([74,89,105,108,111,114,115,116,123,124,126,127,133,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,175,187,190,191,196,198,199,212,216,],[-142,-142,140,-103,-104,-142,-142,-32,-104,-51,-142,-142,-107,-91,-92,-142,-82,-142,-81,-80,-142,-77,-79,-78,-75,-76,-142,-142,-56,-142,-142,-142,-142,-93,-94,140,-104,-142,]),'CTE_BOOL':([74,89,105,108,111,114,115,116,123,124,126,127,133,145,146,147,149,150,152,154,155,156,157,159,160,162,165,169,171,175,187,190,191,196,198,199,212,216,],[-142,-142,141,-103,-104,-142,-142,-32,-104,-51,-142,-142,-107,-91,-92,-142,-82,-142,-81,-80,-142,-77,-79,-78,-75,-76,-142,-142,-56,-142,-142,-142,-142,-93,-94,141,-104,-142,]),'LEQ':([106,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,170,176,178,179,192,195,197,201,210,214,215,217,222,225,226,232,],[-142,157,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-50,-102,-109,-99,-139,-97,-101,-142,-141,-108,-98,-95,-59,-105,-102,-100,]),'BOOL':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,23,23,23,23,-9,23,23,-10,23,-26,-11,-8,23,-7,-28,-12,-29,23,23,-27,23,23,23,-13,]),'{':([24,39,43,55,205,213,220,230,235,],[-135,-134,57,62,-40,223,223,-36,223,]),'MAIN':([4,5,13,15,16,32,37,41,48,51,54,60,73,],[-2,24,24,24,-9,-10,-26,-8,-7,-28,-29,-27,-13,]),'}':([37,51,54,57,60,62,63,64,65,69,70,71,72,80,83,85,87,93,97,99,101,102,103,104,117,118,129,223,224,227,228,229,231,233,234,236,237,],[-26,-28,-29,-21,-27,-142,73,-142,-21,-136,-142,-25,-137,-20,-142,-23,-63,-73,-74,-19,128,-142,-132,-24,-22,-62,-131,-142,-37,-41,234,-35,-33,-38,-130,-37,-34,]),'OR':([106,107,109,130,131,132,134,135,136,137,138,139,140,141,142,143,144,148,158,161,170,176,178,179,180,181,192,195,197,201,202,210,214,215,217,222,225,226,232,],[-142,152,-142,-116,-110,-106,-98,-115,-118,-111,-142,-119,-112,-113,-114,-117,-90,-96,-87,-89,-50,-102,-109,-99,-86,-88,-139,-97,-101,-142,152,-141,-108,-98,-95,-59,-105,-102,-100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term_not':([74,89,114,115,126,127,147,150,155,165,169,175,187,190,191,216,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'input1':([163,204,],[182,219,]),'n_add_one_to_counter':([171,],[190,]),'term2':([176,226,],[195,232,]),'vars':([62,71,],[69,104,]),'n_quad_muldiv':([134,215,],[176,226,]),'n_clear_scope':([24,],[39,]),'output1':([166,207,],[186,221,]),'map_definition':([5,12,13,15,26,27,36,44,57,59,62,64,65,70,71,83,102,223,],[7,7,7,7,7,7,7,7,7,7,7,76,7,76,7,76,76,76,]),'n_process_read':([112,183,],[163,204,]),'function_call':([64,70,83,102,105,199,223,],[77,77,77,77,130,130,77,]),'n_if_2':([230,],[235,]),'n_while_1':([78,],[113,]),'vars_aux':([62,],[70,]),'n_check_has_return':([32,],[48,]),'n_while_2':([174,205,],[193,220,]),'proc4':([64,83,],[80,117,]),'return':([64,70,83,102,223,],[86,86,86,86,86,]),'addsub':([106,201,],[147,147,]),'proc1':([12,26,],[28,28,]),'proc3':([57,65,],[63,99,]),'proc2':([30,58,],[46,67,]),'n_while_3':([227,],[233,]),'program1':([5,13,],[10,33,]),'program2':([5,13,15,],[11,11,34,]),'map_access':([64,70,83,102,105,199,223,],[81,81,81,81,143,143,81,]),'muldiv':([176,226,],[199,199,]),'exp2':([106,201,],[144,217,]),'n_main_quad2':([39,],[55,]),'exp0':([74,89,114,127,150,165,169,175,187,190,191,216,],[107,107,107,107,180,107,107,107,107,107,107,107,]),'proca1':([5,13,15,],[12,12,12,]),'set_operation1':([191,216,],[209,209,]),'n_pop_false_bottom':([214,],[225,]),'proca2':([6,],[26,]),'assignment2':([64,70,83,102,223,],[82,82,82,82,82,]),'program':([0,],[1,]),'n_output_quad':([114,187,],[166,207,]),'statement':([64,70,83,102,223,],[83,102,83,102,102,]),'n_quad_counter':([57,65,],[64,64,]),'var':([5,13,57,62,65,71,],[13,13,65,71,65,71,]),'input':([64,70,83,102,223,],[84,84,84,84,84,]),'n_quad_logop':([180,],[202,]),'main':([5,13,15,],[14,14,14,]),'proc':([5,13,15,],[15,15,15,]),'n_verify_argument':([89,190,],[122,122,]),'empty':([5,12,13,15,26,30,58,62,64,70,74,83,89,102,106,107,109,114,115,126,127,138,147,150,155,163,165,166,169,175,187,190,191,201,202,204,207,216,223,],[16,29,16,16,29,45,45,72,85,103,111,85,123,103,148,153,161,111,111,111,111,178,111,111,111,184,111,188,111,111,111,111,212,148,153,184,188,212,103,]),'map_assignment':([64,70,83,102,223,],[96,96,96,96,96,]),'var1':([20,53,66,],[37,60,37,]),'statement2':([64,70,83,102,223,],[87,87,87,87,87,]),'statement1':([64,70,83,102,223,],[88,88,88,88,88,]),'var2':([38,61,],[51,51,]),'assignment':([64,70,83,102,223,],[90,90,90,90,90,]),'factor':([105,199,],[134,215,]),'logop':([107,202,],[150,150,]),'n_quad_assign':([116,],[169,]),'n_push_false_bottom':([133,],[175,]),'condition1':([224,],[231,]),'map_operation':([64,70,83,102,105,199,223,],[91,91,91,91,136,136,91,]),'n_main_quad':([4,],[5,]),'expression2':([107,202,],[151,218,]),'n_if_3':([224,236,],[229,237,]),'condition':([64,70,83,102,223,],[93,93,93,93,93,]),'varcte':([105,199,],[132,132,]),'term':([74,89,114,115,126,127,147,150,155,165,169,175,187,190,191,216,],[106,106,106,106,106,106,179,106,106,106,106,106,106,106,106,106,]),'n_push_variable':([12,26,44,],[30,30,58,]),'set_definition':([5,12,13,15,26,27,36,44,57,59,62,65,71,],[19,19,19,19,19,19,19,19,19,19,19,19,19,]),'set_operation':([64,70,83,102,105,199,223,],[95,95,95,95,139,139,95,]),'datatype':([5,12,13,15,26,27,36,44,57,59,62,65,71,],[20,31,20,35,31,42,50,31,66,68,66,66,66,]),'varcte1':([105,199,],[131,131,]),'relop':([109,],[155,]),'procA':([12,26,],[32,41,]),'function_call1':([89,],[120,]),'n_era_size':([64,70,83,102,105,199,223,],[89,89,89,89,89,89,89,]),'while':([64,70,83,102,223,],[97,97,97,97,97,]),'function_call2':([89,190,],[119,208,]),'exp':([74,89,114,115,126,127,150,155,165,169,175,187,190,191,216,],[109,109,109,168,173,109,109,181,109,109,109,109,109,109,109,]),'n_quad_addsub':([179,],[201,]),'output':([64,70,83,102,223,],[98,98,98,98,98,]),'exp02':([109,],[158,]),'n_quad_not':([176,226,],[197,197,]),'expression':([74,89,114,127,165,169,175,187,190,191,216,],[110,121,167,174,185,189,194,167,121,211,211,]),'block':([213,220,235,],[224,227,236,]),'statement_aux':([70,102,223,],[101,129,228,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; n_main_quad program1','program',5,'p_program','lexer.py',128),
  ('n_main_quad -> <empty>','n_main_quad',0,'p_n_main_quad','lexer.py',131),
  ('program1 -> var program1','program1',2,'p_program1','lexer.py',137),
  ('program1 -> program2','program1',1,'p_program1','lexer.py',138),
  ('program2 -> proc program2','program2',2,'p_program2','lexer.py',141),
  ('program2 -> main','program2',1,'p_program2','lexer.py',142),
  ('proc -> proca1 procA n_check_has_return','proc',3,'p_proc','lexer.py',145),
  ('proc -> VOID proca2 procA','proc',3,'p_proc','lexer.py',146),
  ('proc -> empty','proc',1,'p_proc','lexer.py',147),
  ('n_check_has_return -> <empty>','n_check_has_return',0,'p_n_check_has_return','lexer.py',151),
  ('proca2 -> ID (','proca2',2,'p_proca2','lexer.py',158),
  ('proca1 -> datatype ID (','proca1',3,'p_proca1','lexer.py',164),
  ('procA -> proc1 ) { proc3 }','procA',5,'p_procA','lexer.py',172),
  ('proc1 -> n_push_variable proc2','proc1',2,'p_proc1','lexer.py',177),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',178),
  ('proc2 -> , n_push_variable proc2','proc2',3,'p_proc2','lexer.py',181),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',182),
  ('n_push_variable -> datatype ID','n_push_variable',2,'p_n_push_variable','lexer.py',185),
  ('proc3 -> var proc3','proc3',2,'p_proc3','lexer.py',195),
  ('proc3 -> n_quad_counter proc4','proc3',2,'p_proc3','lexer.py',196),
  ('n_quad_counter -> <empty>','n_quad_counter',0,'p_n_quad_counter','lexer.py',199),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',203),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',204),
  ('vars -> var vars','vars',2,'p_vars','lexer.py',207),
  ('vars -> var','vars',1,'p_vars','lexer.py',208),
  ('var -> datatype var1','var',2,'p_var','lexer.py',211),
  ('var1 -> ID , var1','var1',3,'p_var1','lexer.py',221),
  ('var1 -> ID var2','var1',2,'p_var1','lexer.py',222),
  ('var2 -> ;','var2',1,'p_var2','lexer.py',229),
  ('assignment -> assignment2 ASSIGNATOR n_quad_assign expression','assignment',4,'p_assignment','lexer.py',233),
  ('assignment2 -> ID','assignment2',1,'p_assignment2','lexer.py',238),
  ('n_quad_assign -> <empty>','n_quad_assign',0,'p_n_quad_assign','lexer.py',250),
  ('condition -> IF ( expression n_while_2 ) block condition1','condition',7,'p_condition','lexer.py',267),
  ('condition1 -> ELSE n_if_2 block n_if_3','condition1',4,'p_condition1','lexer.py',270),
  ('condition1 -> n_if_3','condition1',1,'p_condition1','lexer.py',271),
  ('n_if_2 -> <empty>','n_if_2',0,'p_n_if_2','lexer.py',274),
  ('n_if_3 -> <empty>','n_if_3',0,'p_n_if_3','lexer.py',282),
  ('while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3','while',8,'p_while','lexer.py',287),
  ('n_while_1 -> <empty>','n_while_1',0,'p_n_while_1','lexer.py',290),
  ('n_while_2 -> <empty>','n_while_2',0,'p_n_while_2','lexer.py',294),
  ('n_while_3 -> <empty>','n_while_3',0,'p_n_while_3','lexer.py',298),
  ('input -> READ ( n_process_read input1 )','input',5,'p_input','lexer.py',313),
  ('input1 -> , n_process_read input1','input1',3,'p_input1','lexer.py',316),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',317),
  ('n_process_read -> ID','n_process_read',1,'p_n_process_read','lexer.py',320),
  ('output -> PRINT ( n_output_quad output1 )','output',5,'p_output','lexer.py',324),
  ('output1 -> , n_output_quad output1','output1',3,'p_output1','lexer.py',327),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',328),
  ('n_output_quad -> expression','n_output_quad',1,'p_n_output_quad','lexer.py',331),
  ('function_call -> n_era_size function_call1 )','function_call',3,'p_function_call','lexer.py',338),
  ('n_era_size -> ID (','n_era_size',2,'p_n_era_size','lexer.py',344),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',353),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',354),
  ('function_call2 -> n_verify_argument , n_add_one_to_counter function_call2','function_call2',4,'p_function_call2','lexer.py',357),
  ('function_call2 -> n_verify_argument','function_call2',1,'p_function_call2','lexer.py',358),
  ('n_add_one_to_counter -> <empty>','n_add_one_to_counter',0,'p_n_add_one_to_counter','lexer.py',364),
  ('n_verify_argument -> expression','n_verify_argument',1,'p_n_verify_argument','lexer.py',368),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',382),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',392),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',396),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',397),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',400),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',401),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',404),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',405),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',406),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',407),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',408),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',409),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',410),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',411),
  ('statement1 -> function_call','statement1',1,'p_statement1','lexer.py',412),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',415),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',416),
  ('relop -> <','relop',1,'p_relop','lexer.py',419),
  ('relop -> >','relop',1,'p_relop','lexer.py',420),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',421),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',422),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',423),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',424),
  ('logop -> OR','logop',1,'p_logop','lexer.py',428),
  ('logop -> AND','logop',1,'p_logop','lexer.py',429),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',514),
  ('expression2 -> logop exp0 n_quad_logop expression2','expression2',4,'p_expression2','lexer.py',517),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',518),
  ('n_quad_logop -> <empty>','n_quad_logop',0,'p_n_quad_logop','lexer.py',521),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',525),
  ('exp02 -> relop exp','exp02',2,'p_exp02','lexer.py',528),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',529),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',534),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',537),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',538),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',542),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',543),
  ('exp2 -> addsub term n_quad_addsub exp2','exp2',4,'p_exp2','lexer.py',547),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',548),
  ('term -> term_not factor n_quad_muldiv term2','term',4,'p_term','lexer.py',551),
  ('n_quad_muldiv -> <empty>','n_quad_muldiv',0,'p_n_quad_muldiv','lexer.py',554),
  ('n_quad_addsub -> <empty>','n_quad_addsub',0,'p_n_quad_addsub','lexer.py',558),
  ('term2 -> muldiv factor n_quad_muldiv term2','term2',4,'p_term2','lexer.py',562),
  ('term2 -> n_quad_not','term2',1,'p_term2','lexer.py',563),
  ('n_quad_not -> <empty>','n_quad_not',0,'p_n_quad_not','lexer.py',566),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',572),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',573),
  ('factor -> ( n_push_false_bottom expression ) n_pop_false_bottom','factor',5,'p_factor','lexer.py',578),
  ('factor -> varcte','factor',1,'p_factor','lexer.py',579),
  ('n_push_false_bottom -> <empty>','n_push_false_bottom',0,'p_n_push_false_bottom','lexer.py',582),
  ('n_pop_false_bottom -> <empty>','n_pop_false_bottom',0,'p_n_pop_false_bottom','lexer.py',586),
  ('varcte -> ID empty','varcte',2,'p_varcte','lexer.py',590),
  ('varcte -> varcte1','varcte',1,'p_varcte','lexer.py',591),
  ('varcte1 -> CTE_INT','varcte1',1,'p_varcte1','lexer.py',606),
  ('varcte1 -> CTE_FLOAT','varcte1',1,'p_varcte1','lexer.py',607),
  ('varcte1 -> CTE_BOOL','varcte1',1,'p_varcte1','lexer.py',608),
  ('varcte1 -> CTE_STRING','varcte1',1,'p_varcte1','lexer.py',609),
  ('varcte1 -> CTE_CHAR','varcte1',1,'p_varcte1','lexer.py',610),
  ('varcte1 -> function_call','varcte1',1,'p_varcte1','lexer.py',611),
  ('varcte1 -> map_access','varcte1',1,'p_varcte1','lexer.py',612),
  ('varcte1 -> map_operation','varcte1',1,'p_varcte1','lexer.py',613),
  ('varcte1 -> set_operation','varcte1',1,'p_varcte1','lexer.py',614),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',623),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',624),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',627),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',628),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',629),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',630),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',631),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',632),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',633),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',637),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',641),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',644),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',645),
  ('main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }','main',7,'p_main','lexer.py',648),
  ('n_main_quad2 -> <empty>','n_main_quad2',0,'p_n_main_quad2','lexer.py',651),
  ('n_clear_scope -> <empty>','n_clear_scope',0,'p_n_clear_scope','lexer.py',655),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',661),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',662),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',665),
  ('map_access -> ID [ exp ]','map_access',4,'p_map_access','lexer.py',669),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',672),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',675),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',678),
]
