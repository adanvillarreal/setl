
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OP OP OP OP OP OP_ARGS OP_ARGS OP_ARGS OP_ARGS OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' n_main_quad program1n_main_quad : program1 : var program1\n                | program2program2 : proc program2\n                | mainproc : proca1 procA n_check_has_return\n            | VOID proca2 procA\n            | emptyn_check_has_return : proca2 : ID '(' proca1 :  datatype ID '(' procA : proc1 ')' '{' proc3 '}' proc1 : n_push_variable proc2\n             | emptyproc2 : ',' n_push_variable proc2\n             | emptyn_push_variable :  datatype IDproc3 : var proc3\n             | n_quad_counter proc4n_quad_counter : proc4 : statement proc4\n             | emptyvars : var vars\n            | varvar : datatype var1 var1 : ID ',' var1\n             | ID var2var2 : ';' assignment : assignment2 ASSIGNATOR n_quad_assign expressionassignment2 : IDn_quad_assign : condition : IF '(' expression n_while_2 ')' block condition1condition1 : ELSE n_if_2 block n_if_3\n                  | n_if_3n_if_2 : n_if_3 : while : WHILE n_while_1 '(' expression ')' n_while_2 block n_while_3n_while_1 : n_while_2 : n_while_3 : input : READ '(' n_process_read input1 ')' input1 : ',' n_process_read input1\n              | emptyn_process_read : IDoutput : PRINT '(' n_output_quad output1 ')' output1 : ',' n_output_quad output1\n               | emptyn_output_quad : expressionfunction_call : n_era_size function_call1 ')' n_era_size : ID '(' function_call1 : empty\n                      | function_call2function_call2 : n_verify_argument ',' n_add_one_to_counter function_call2\n                      | n_verify_argumentn_add_one_to_counter : n_verify_argument : expressionreturn : RETURN expressioncontainer_operation : ID '.' OP_ARGS '(' expression ')' container_operation : ID '.' OP '('  ')' statement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | container_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | function_callstatement2 : condition\n                  | whilerelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n           | ANDexpression : exp0 expression2expression2 : logop exp0 n_quad_logop expression2\n                 | emptyn_quad_logop : exp0 : exp exp02exp02 : relop exp\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term n_quad_addsub exp2\n          | emptyterm : term_not factor n_quad_muldiv term2n_quad_muldiv : n_quad_addsub : term2 : muldiv factor n_quad_muldiv term2\n           | n_quad_notn_quad_not : term_not : '!'\n              | emptyfactor : '(' n_push_false_bottom expression ')' n_pop_false_bottom\n            | varcten_push_false_bottom : n_pop_false_bottom : varcte : ID empty\n            | varcte1varcte1 : CTE_INT\n               | CTE_FLOAT\n               | CTE_BOOL\n               | CTE_STRING\n               | CTE_CHAR\n               | function_call\n               | map_access\n               | container_operationfunctype : datatype\n               | VOIDdatatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' block : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN n_clear_scope n_main_quad2 '{' vars_aux statement_aux '}' n_main_quad2 :  n_clear_scope : vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '[' exp ']' map_assignment : map_access ASSIGNATOR expempty :"
    
_lr_action_items = {'$end':([1,10,11,14,33,34,127,],[0,-1,-4,-6,-3,-5,-130,]),'OP_ARGS':([124,],[170,]),'RETURN':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,96,101,103,117,218,219,222,224,226,228,229,231,232,],[-26,-28,-29,-21,-27,-138,74,-21,-133,74,-25,-134,74,-62,-71,-72,74,-24,-61,74,-37,-41,-35,-33,-38,-127,-37,-34,]),'READ':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,96,101,103,117,218,219,222,224,226,228,229,231,232,],[-26,-28,-29,-21,-27,-138,75,-21,-133,75,-25,-134,75,-62,-71,-72,75,-24,-61,75,-37,-41,-35,-33,-38,-127,-37,-34,]),'VOID':([4,5,13,15,16,32,37,41,48,51,54,60,73,],[-2,6,6,6,-9,-10,-26,-8,-7,-28,-29,-27,-13,]),'CHAR':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,8,8,8,8,-9,8,8,-10,8,-26,-11,-8,8,-7,-28,-12,-29,8,8,-27,8,8,8,-13,]),'ASSIGNATOR':([81,82,92,191,],[114,115,-31,-136,]),'WHILE':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,96,101,103,117,218,219,222,224,226,228,229,231,232,],[-26,-28,-29,-21,-27,-138,78,-21,-133,78,-25,-134,78,-62,-71,-72,78,-24,-61,78,-37,-41,-35,-33,-38,-127,-37,-34,]),'PROGRAM':([0,],[2,]),'PRINT':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,96,101,103,117,218,219,222,224,226,228,229,231,232,],[-26,-28,-29,-21,-27,-138,79,-21,-133,79,-25,-134,79,-62,-71,-72,79,-24,-61,79,-37,-41,-35,-33,-38,-127,-37,-34,]),'!':([74,89,113,114,115,123,125,126,133,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,174,185,188,189,],[107,107,107,107,-32,-51,107,107,-105,-89,-90,107,-80,107,-79,-78,107,-75,-77,-76,-73,-74,107,107,-56,107,107,107,107,]),'GEQ':([105,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,168,175,176,177,191,194,196,199,208,210,211,212,217,220,221,227,],[-138,152,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-50,-100,-107,-97,-136,-95,-99,-138,-60,-106,-96,-93,-59,-103,-100,-98,]),'SET':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,9,9,9,9,-9,9,9,-10,9,-26,-11,-8,9,-7,-28,-12,-29,9,9,-27,9,9,9,-13,]),')':([12,26,28,29,30,40,45,46,47,52,58,67,89,105,106,108,118,119,120,121,122,123,129,130,131,132,134,135,136,137,138,139,140,141,142,146,149,151,156,159,161,162,164,165,168,173,175,176,177,178,179,180,182,183,184,186,190,191,192,193,194,196,199,200,202,205,206,207,208,210,211,212,213,214,216,217,220,221,227,],[-138,-138,43,-15,-138,-11,-17,-14,-18,-12,-138,-16,-138,-138,-138,-138,-53,168,-57,-55,-52,-51,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-81,-83,-85,-87,-138,-45,-138,-49,-50,-40,-100,-107,-97,-84,-86,201,-44,203,204,-48,208,-136,209,210,-95,-99,-138,-138,-138,-138,-54,217,-60,-106,-96,-93,-82,-43,-47,-59,-103,-100,-98,]),'(':([25,38,49,74,75,78,79,89,92,94,104,107,110,112,113,114,115,122,123,125,126,133,138,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,170,171,174,185,188,189,195,197,198,],[40,52,52,-138,111,-39,113,-138,123,126,133,-101,-102,163,-138,-138,-32,-102,-51,-138,-138,-105,123,-89,-90,-138,-80,-138,-79,-78,-138,-75,-77,-76,-73,-74,-138,-138,-56,189,190,-138,-138,-138,-138,-91,-92,133,]),'+':([105,129,130,131,132,134,135,136,137,138,139,140,141,168,175,176,177,191,194,196,199,208,210,211,217,220,221,227,],[143,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-50,-100,-107,-97,-136,-95,-99,143,-60,-106,-96,-59,-103,-100,-98,]),'*':([129,130,131,132,134,135,136,137,138,139,140,141,168,175,176,191,208,210,211,217,220,221,],[-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-50,195,-107,-136,-60,-106,-96,-59,-103,195,]),'-':([105,129,130,131,132,134,135,136,137,138,139,140,141,168,175,176,177,191,194,196,199,208,210,211,217,220,221,227,],[144,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-50,-100,-107,-97,-136,-95,-99,144,-60,-106,-96,-59,-103,-100,-98,]),',':([7,8,17,19,21,22,23,30,38,47,50,56,58,61,99,105,106,108,120,121,129,130,131,132,134,135,136,137,138,139,140,141,142,146,149,151,156,159,161,162,164,165,168,175,176,177,178,179,191,194,196,199,200,202,205,208,210,211,212,213,217,220,221,227,],[-125,-123,-122,-124,-120,-119,-121,44,53,-18,59,-126,44,53,-135,-138,-138,-138,-57,169,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-81,-83,-85,-87,181,-45,185,-49,-50,-100,-107,-97,-84,-86,-136,-95,-99,-138,-138,181,185,-60,-106,-96,-93,-82,-59,-103,-100,-98,]),'/':([129,130,131,132,134,135,136,137,138,139,140,141,168,175,176,191,208,210,211,217,220,221,],[-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-50,197,-107,-136,-60,-106,-96,-59,-103,197,]),'.':([92,138,],[124,124,]),'CTE_CHAR':([74,89,104,107,110,113,114,115,122,123,125,126,133,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,174,185,188,189,195,197,198,],[-138,-138,135,-101,-102,-138,-138,-32,-102,-51,-138,-138,-105,-89,-90,-138,-80,-138,-79,-78,-138,-75,-77,-76,-73,-74,-138,-138,-56,-138,-138,-138,-138,-91,-92,135,]),';':([3,38,61,76,77,84,86,88,90,91,95,97,99,105,106,108,109,129,130,131,132,134,135,136,137,138,139,140,141,142,146,149,151,156,159,166,168,175,176,177,178,179,187,191,194,196,199,200,201,204,208,210,211,212,213,217,220,221,227,],[4,54,54,-67,-70,-64,-68,117,-66,-63,-69,-65,-135,-138,-138,-138,-58,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-81,-83,-85,-87,-137,-50,-100,-107,-97,-84,-86,-30,-136,-95,-99,-138,-138,-42,-46,-60,-106,-96,-93,-82,-59,-103,-100,-98,]),'<':([9,18,105,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,168,175,176,177,191,194,196,199,208,210,211,212,217,220,221,227,],[27,36,-138,158,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-50,-100,-107,-97,-136,-95,-99,-138,-60,-106,-96,-93,-59,-103,-100,-98,]),'>':([7,8,17,19,21,22,23,42,56,68,99,105,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,168,175,176,177,191,194,196,199,208,210,211,212,217,220,221,227,],[-125,-123,-122,-124,-120,-119,-121,56,-126,99,-135,-138,160,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-50,-100,-107,-97,-136,-95,-99,-138,-60,-106,-96,-93,-59,-103,-100,-98,]),'CTE_STRING':([74,89,104,107,110,113,114,115,122,123,125,126,133,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,174,185,188,189,195,197,198,],[-138,-138,141,-101,-102,-138,-138,-32,-102,-51,-138,-138,-105,-89,-90,-138,-80,-138,-79,-78,-138,-75,-77,-76,-73,-74,-138,-138,-56,-138,-138,-138,-138,-91,-92,141,]),'STRING':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,17,17,17,17,-9,17,17,-10,17,-26,-11,-8,17,-7,-28,-12,-29,17,17,-27,17,17,17,-13,]),'NOT_EQ':([105,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,168,175,176,177,191,194,196,199,208,210,211,212,217,220,221,227,],[-138,154,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-50,-100,-107,-97,-136,-95,-99,-138,-60,-106,-96,-93,-59,-103,-100,-98,]),'ELSE':([219,229,],[225,-127,]),'[':([92,138,],[125,125,]),'CTE_INT':([74,89,104,107,110,113,114,115,122,123,125,126,133,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,174,185,188,189,195,197,198,],[-138,-138,137,-101,-102,-138,-138,-32,-102,-51,-138,-138,-105,-89,-90,-138,-80,-138,-79,-78,-138,-75,-77,-76,-73,-74,-138,-138,-56,-138,-138,-138,-138,-91,-92,137,]),']':([105,129,130,131,132,134,135,136,137,138,139,140,141,142,146,168,172,175,176,177,191,194,196,199,208,210,211,212,217,220,221,227,],[-138,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-50,191,-100,-107,-97,-136,-95,-99,-138,-60,-106,-96,-93,-59,-103,-100,-98,]),'ID':([2,6,7,8,17,19,20,21,22,23,31,35,37,51,53,54,56,57,60,62,64,65,66,69,70,71,72,74,83,87,89,93,96,99,101,103,104,107,110,111,113,114,115,117,122,123,125,126,133,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,174,181,185,188,189,195,197,198,218,219,222,224,226,228,229,231,232,],[3,25,-125,-123,-122,-124,38,-120,-119,-121,47,49,-26,-28,61,-29,-126,-21,-27,-138,92,-21,61,-133,92,-25,-134,-138,92,-62,-138,-71,-72,-135,92,-24,138,-101,-102,162,-138,-138,-32,-61,-102,-51,-138,-138,-105,-89,-90,-138,-80,-138,-79,-78,-138,-75,-77,-76,-73,-74,-138,-138,-56,-138,162,-138,-138,-138,-91,-92,138,92,-37,-41,-35,-33,-38,-127,-37,-34,]),'IF':([37,51,54,57,60,62,64,65,69,70,71,72,83,87,93,96,101,103,117,218,219,222,224,226,228,229,231,232,],[-26,-28,-29,-21,-27,-138,94,-21,-133,94,-25,-134,94,-62,-71,-72,94,-24,-61,94,-37,-41,-35,-33,-38,-127,-37,-34,]),'AND':([105,106,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,156,159,168,175,176,177,178,179,191,194,196,199,200,208,210,211,212,217,220,221,227,],[-138,147,-138,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-85,-87,-50,-100,-107,-97,-84,-86,-136,-95,-99,-138,147,-60,-106,-96,-93,-59,-103,-100,-98,]),'MAP':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,64,65,69,70,71,72,73,83,87,93,96,101,103,117,218,219,222,224,226,228,229,231,232,],[-2,18,18,18,18,-9,18,18,-10,18,-26,-11,-8,18,-7,-28,-12,-29,18,18,-27,18,18,18,-133,18,18,-134,-13,18,-62,-71,-72,18,-24,-61,18,-37,-41,-35,-33,-38,-127,-37,-34,]),'EQ':([105,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,168,175,176,177,191,194,196,199,208,210,211,212,217,220,221,227,],[-138,157,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-50,-100,-107,-97,-136,-95,-99,-138,-60,-106,-96,-93,-59,-103,-100,-98,]),'INT':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,22,22,22,22,-9,22,22,-10,22,-26,-11,-8,22,-7,-28,-12,-29,22,22,-27,22,22,22,-13,]),'FLOAT':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,21,21,21,21,-9,21,21,-10,21,-26,-11,-8,21,-7,-28,-12,-29,21,21,-27,21,21,21,-13,]),'CTE_FLOAT':([74,89,104,107,110,113,114,115,122,123,125,126,133,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,174,185,188,189,195,197,198,],[-138,-138,139,-101,-102,-138,-138,-32,-102,-51,-138,-138,-105,-89,-90,-138,-80,-138,-79,-78,-138,-75,-77,-76,-73,-74,-138,-138,-56,-138,-138,-138,-138,-91,-92,139,]),'CTE_BOOL':([74,89,104,107,110,113,114,115,122,123,125,126,133,143,144,145,147,148,150,152,153,154,155,157,158,160,163,167,169,174,185,188,189,195,197,198,],[-138,-138,140,-101,-102,-138,-138,-32,-102,-51,-138,-138,-105,-89,-90,-138,-80,-138,-79,-78,-138,-75,-77,-76,-73,-74,-138,-138,-56,-138,-138,-138,-138,-91,-92,140,]),'LEQ':([105,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,168,175,176,177,191,194,196,199,208,210,211,212,217,220,221,227,],[-138,155,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-50,-100,-107,-97,-136,-95,-99,-138,-60,-106,-96,-93,-59,-103,-100,-98,]),'BOOL':([4,5,12,13,15,16,26,27,32,36,37,40,41,44,48,51,52,54,57,59,60,62,65,71,73,],[-2,23,23,23,23,-9,23,23,-10,23,-26,-11,-8,23,-7,-28,-12,-29,23,23,-27,23,23,23,-13,]),'{':([24,39,43,55,203,209,215,225,230,],[-132,-131,57,62,-40,218,218,-36,218,]),'MAIN':([4,5,13,15,16,32,37,41,48,51,54,60,73,],[-2,24,24,24,-9,-10,-26,-8,-7,-28,-29,-27,-13,]),'}':([37,51,54,57,60,62,63,64,65,69,70,71,72,80,83,85,87,93,96,98,100,101,102,103,116,117,128,218,219,222,223,224,226,228,229,231,232,],[-26,-28,-29,-21,-27,-138,73,-138,-21,-133,-138,-25,-134,-20,-138,-23,-62,-71,-72,-19,127,-138,-129,-24,-22,-61,-128,-138,-37,-41,229,-35,-33,-38,-127,-37,-34,]),'OR':([105,106,108,129,130,131,132,134,135,136,137,138,139,140,141,142,146,156,159,168,175,176,177,178,179,191,194,196,199,200,208,210,211,212,217,220,221,227,],[-138,150,-138,-114,-108,-104,-115,-96,-113,-116,-109,-138,-110,-111,-112,-88,-94,-85,-87,-50,-100,-107,-97,-84,-86,-136,-95,-99,-138,150,-60,-106,-96,-93,-59,-103,-100,-98,]),'OP':([124,],[171,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'n_quad_muldiv':([134,211,],[175,221,]),'input1':([161,202,],[180,214,]),'n_add_one_to_counter':([169,],[188,]),'term2':([175,221,],[194,227,]),'vars':([62,71,],[69,103,]),'n_clear_scope':([24,],[39,]),'output1':([164,205,],[184,216,]),'map_definition':([5,12,13,15,26,27,36,44,57,59,62,64,65,70,71,83,101,218,],[7,7,7,7,7,7,7,7,7,7,7,76,7,76,7,76,76,76,]),'n_process_read':([111,181,],[161,202,]),'function_call':([64,70,83,101,104,198,218,],[77,77,77,77,129,129,77,]),'n_if_2':([225,],[230,]),'n_while_1':([78,],[112,]),'vars_aux':([62,],[70,]),'n_check_has_return':([32,],[48,]),'n_while_2':([173,203,],[192,215,]),'proc4':([64,83,],[80,116,]),'return':([64,70,83,101,218,],[86,86,86,86,86,]),'addsub':([105,199,],[145,145,]),'proc1':([12,26,],[28,28,]),'proc3':([57,65,],[63,98,]),'proc2':([30,58,],[46,67,]),'n_while_3':([222,],[228,]),'program1':([5,13,],[10,33,]),'program2':([5,13,15,],[11,11,34,]),'n_era_size':([64,70,83,101,104,198,218,],[89,89,89,89,89,89,89,]),'muldiv':([175,221,],[198,198,]),'exp2':([105,199,],[142,212,]),'n_main_quad2':([39,],[55,]),'exp0':([74,89,113,126,148,163,167,174,185,188,189,],[106,106,106,106,178,106,106,106,106,106,106,]),'proca1':([5,13,15,],[12,12,12,]),'n_pop_false_bottom':([210,],[220,]),'proca2':([6,],[26,]),'assignment2':([64,70,83,101,218,],[82,82,82,82,82,]),'program':([0,],[1,]),'n_output_quad':([113,185,],[164,205,]),'statement':([64,70,83,101,218,],[83,101,83,101,101,]),'n_quad_counter':([57,65,],[64,64,]),'var':([5,13,57,62,65,71,],[13,13,65,71,65,71,]),'input':([64,70,83,101,218,],[84,84,84,84,84,]),'main':([5,13,15,],[14,14,14,]),'proc':([5,13,15,],[15,15,15,]),'n_verify_argument':([89,188,],[121,121,]),'empty':([5,12,13,15,26,30,58,62,64,70,74,83,89,101,105,106,108,113,114,125,126,138,145,148,153,161,163,164,167,174,185,188,189,199,200,202,205,218,],[16,29,16,16,29,45,45,72,85,102,110,85,122,102,146,151,159,110,110,110,110,176,110,110,110,182,110,186,110,110,110,110,110,146,151,182,186,102,]),'condition1':([219,],[226,]),'term_not':([74,89,113,114,125,126,145,148,153,163,167,174,185,188,189,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'var1':([20,53,66,],[37,60,37,]),'statement2':([64,70,83,101,218,],[87,87,87,87,87,]),'statement1':([64,70,83,101,218,],[88,88,88,88,88,]),'var2':([38,61,],[51,51,]),'container_operation':([64,70,83,101,104,198,218,],[90,90,90,90,136,136,90,]),'assignment':([64,70,83,101,218,],[91,91,91,91,91,]),'factor':([104,198,],[134,211,]),'logop':([106,200,],[148,148,]),'n_quad_assign':([115,],[167,]),'n_push_false_bottom':([133,],[174,]),'map_access':([64,70,83,101,104,198,218,],[81,81,81,81,132,132,81,]),'n_quad_logop':([178,],[200,]),'n_main_quad':([4,],[5,]),'expression2':([106,200,],[149,213,]),'n_if_3':([219,231,],[224,232,]),'condition':([64,70,83,101,218,],[93,93,93,93,93,]),'varcte':([104,198,],[131,131,]),'term':([74,89,113,114,125,126,145,148,153,163,167,174,185,188,189,],[105,105,105,105,105,105,177,105,105,105,105,105,105,105,105,]),'n_push_variable':([12,26,44,],[30,30,58,]),'set_definition':([5,12,13,15,26,27,36,44,57,59,62,65,71,],[19,19,19,19,19,19,19,19,19,19,19,19,19,]),'datatype':([5,12,13,15,26,27,36,44,57,59,62,65,71,],[20,31,20,35,31,42,50,31,66,68,66,66,66,]),'varcte1':([104,198,],[130,130,]),'relop':([108,],[153,]),'procA':([12,26,],[32,41,]),'function_call1':([89,],[119,]),'map_assignment':([64,70,83,101,218,],[95,95,95,95,95,]),'while':([64,70,83,101,218,],[96,96,96,96,96,]),'function_call2':([89,188,],[118,206,]),'exp':([74,89,113,114,125,126,148,153,163,167,174,185,188,189,],[108,108,108,166,172,108,108,179,108,108,108,108,108,108,]),'n_quad_addsub':([177,],[199,]),'output':([64,70,83,101,218,],[97,97,97,97,97,]),'exp02':([108,],[156,]),'n_quad_not':([175,221,],[196,196,]),'expression':([74,89,113,126,163,167,174,185,188,189,],[109,120,165,173,183,187,193,165,120,207,]),'block':([209,215,230,],[219,222,231,]),'statement_aux':([70,101,218,],[100,128,223,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; n_main_quad program1','program',5,'p_program','lexer.py',133),
  ('n_main_quad -> <empty>','n_main_quad',0,'p_n_main_quad','lexer.py',137),
  ('program1 -> var program1','program1',2,'p_program1','lexer.py',141),
  ('program1 -> program2','program1',1,'p_program1','lexer.py',142),
  ('program2 -> proc program2','program2',2,'p_program2','lexer.py',145),
  ('program2 -> main','program2',1,'p_program2','lexer.py',146),
  ('proc -> proca1 procA n_check_has_return','proc',3,'p_proc','lexer.py',149),
  ('proc -> VOID proca2 procA','proc',3,'p_proc','lexer.py',150),
  ('proc -> empty','proc',1,'p_proc','lexer.py',151),
  ('n_check_has_return -> <empty>','n_check_has_return',0,'p_n_check_has_return','lexer.py',155),
  ('proca2 -> ID (','proca2',2,'p_proca2','lexer.py',168),
  ('proca1 -> datatype ID (','proca1',3,'p_proca1','lexer.py',174),
  ('procA -> proc1 ) { proc3 }','procA',5,'p_procA','lexer.py',182),
  ('proc1 -> n_push_variable proc2','proc1',2,'p_proc1','lexer.py',187),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',188),
  ('proc2 -> , n_push_variable proc2','proc2',3,'p_proc2','lexer.py',191),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',192),
  ('n_push_variable -> datatype ID','n_push_variable',2,'p_n_push_variable','lexer.py',195),
  ('proc3 -> var proc3','proc3',2,'p_proc3','lexer.py',205),
  ('proc3 -> n_quad_counter proc4','proc3',2,'p_proc3','lexer.py',206),
  ('n_quad_counter -> <empty>','n_quad_counter',0,'p_n_quad_counter','lexer.py',209),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',213),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',214),
  ('vars -> var vars','vars',2,'p_vars','lexer.py',217),
  ('vars -> var','vars',1,'p_vars','lexer.py',218),
  ('var -> datatype var1','var',2,'p_var','lexer.py',221),
  ('var1 -> ID , var1','var1',3,'p_var1','lexer.py',231),
  ('var1 -> ID var2','var1',2,'p_var1','lexer.py',232),
  ('var2 -> ;','var2',1,'p_var2','lexer.py',239),
  ('assignment -> assignment2 ASSIGNATOR n_quad_assign expression','assignment',4,'p_assignment','lexer.py',242),
  ('assignment2 -> ID','assignment2',1,'p_assignment2','lexer.py',247),
  ('n_quad_assign -> <empty>','n_quad_assign',0,'p_n_quad_assign','lexer.py',259),
  ('condition -> IF ( expression n_while_2 ) block condition1','condition',7,'p_condition','lexer.py',276),
  ('condition1 -> ELSE n_if_2 block n_if_3','condition1',4,'p_condition1','lexer.py',279),
  ('condition1 -> n_if_3','condition1',1,'p_condition1','lexer.py',280),
  ('n_if_2 -> <empty>','n_if_2',0,'p_n_if_2','lexer.py',283),
  ('n_if_3 -> <empty>','n_if_3',0,'p_n_if_3','lexer.py',291),
  ('while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3','while',8,'p_while','lexer.py',296),
  ('n_while_1 -> <empty>','n_while_1',0,'p_n_while_1','lexer.py',299),
  ('n_while_2 -> <empty>','n_while_2',0,'p_n_while_2','lexer.py',303),
  ('n_while_3 -> <empty>','n_while_3',0,'p_n_while_3','lexer.py',307),
  ('input -> READ ( n_process_read input1 )','input',5,'p_input','lexer.py',322),
  ('input1 -> , n_process_read input1','input1',3,'p_input1','lexer.py',325),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',326),
  ('n_process_read -> ID','n_process_read',1,'p_n_process_read','lexer.py',329),
  ('output -> PRINT ( n_output_quad output1 )','output',5,'p_output','lexer.py',332),
  ('output1 -> , n_output_quad output1','output1',3,'p_output1','lexer.py',335),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',336),
  ('n_output_quad -> expression','n_output_quad',1,'p_n_output_quad','lexer.py',339),
  ('function_call -> n_era_size function_call1 )','function_call',3,'p_function_call','lexer.py',346),
  ('n_era_size -> ID (','n_era_size',2,'p_n_era_size','lexer.py',357),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',366),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',367),
  ('function_call2 -> n_verify_argument , n_add_one_to_counter function_call2','function_call2',4,'p_function_call2','lexer.py',370),
  ('function_call2 -> n_verify_argument','function_call2',1,'p_function_call2','lexer.py',371),
  ('n_add_one_to_counter -> <empty>','n_add_one_to_counter',0,'p_n_add_one_to_counter','lexer.py',377),
  ('n_verify_argument -> expression','n_verify_argument',1,'p_n_verify_argument','lexer.py',381),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',395),
  ('container_operation -> ID . OP_ARGS ( expression )','container_operation',6,'p_container_operation_arg','lexer.py',415),
  ('container_operation -> ID . OP ( )','container_operation',5,'p_container_operation','lexer.py',419),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',422),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',423),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',426),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',427),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',428),
  ('statement1 -> container_operation','statement1',1,'p_statement1','lexer.py',429),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',430),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',431),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',432),
  ('statement1 -> function_call','statement1',1,'p_statement1','lexer.py',433),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',436),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',437),
  ('relop -> <','relop',1,'p_relop','lexer.py',440),
  ('relop -> >','relop',1,'p_relop','lexer.py',441),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',442),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',443),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',444),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',445),
  ('logop -> OR','logop',1,'p_logop','lexer.py',449),
  ('logop -> AND','logop',1,'p_logop','lexer.py',450),
  ('expression -> exp0 expression2','expression',2,'p_expression','lexer.py',535),
  ('expression2 -> logop exp0 n_quad_logop expression2','expression2',4,'p_expression2','lexer.py',538),
  ('expression2 -> empty','expression2',1,'p_expression2','lexer.py',539),
  ('n_quad_logop -> <empty>','n_quad_logop',0,'p_n_quad_logop','lexer.py',542),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',546),
  ('exp02 -> relop exp','exp02',2,'p_exp02','lexer.py',549),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',550),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',555),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',558),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',559),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',563),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',564),
  ('exp2 -> addsub term n_quad_addsub exp2','exp2',4,'p_exp2','lexer.py',568),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',569),
  ('term -> term_not factor n_quad_muldiv term2','term',4,'p_term','lexer.py',572),
  ('n_quad_muldiv -> <empty>','n_quad_muldiv',0,'p_n_quad_muldiv','lexer.py',575),
  ('n_quad_addsub -> <empty>','n_quad_addsub',0,'p_n_quad_addsub','lexer.py',579),
  ('term2 -> muldiv factor n_quad_muldiv term2','term2',4,'p_term2','lexer.py',583),
  ('term2 -> n_quad_not','term2',1,'p_term2','lexer.py',584),
  ('n_quad_not -> <empty>','n_quad_not',0,'p_n_quad_not','lexer.py',587),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',593),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',594),
  ('factor -> ( n_push_false_bottom expression ) n_pop_false_bottom','factor',5,'p_factor','lexer.py',599),
  ('factor -> varcte','factor',1,'p_factor','lexer.py',600),
  ('n_push_false_bottom -> <empty>','n_push_false_bottom',0,'p_n_push_false_bottom','lexer.py',603),
  ('n_pop_false_bottom -> <empty>','n_pop_false_bottom',0,'p_n_pop_false_bottom','lexer.py',607),
  ('varcte -> ID empty','varcte',2,'p_varcte','lexer.py',611),
  ('varcte -> varcte1','varcte',1,'p_varcte','lexer.py',612),
  ('varcte1 -> CTE_INT','varcte1',1,'p_varcte1','lexer.py',627),
  ('varcte1 -> CTE_FLOAT','varcte1',1,'p_varcte1','lexer.py',628),
  ('varcte1 -> CTE_BOOL','varcte1',1,'p_varcte1','lexer.py',629),
  ('varcte1 -> CTE_STRING','varcte1',1,'p_varcte1','lexer.py',630),
  ('varcte1 -> CTE_CHAR','varcte1',1,'p_varcte1','lexer.py',631),
  ('varcte1 -> function_call','varcte1',1,'p_varcte1','lexer.py',632),
  ('varcte1 -> map_access','varcte1',1,'p_varcte1','lexer.py',633),
  ('varcte1 -> container_operation','varcte1',1,'p_varcte1','lexer.py',634),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',643),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',644),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',647),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',648),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',649),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',650),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',651),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',652),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',653),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',657),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',661),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',664),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',665),
  ('main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }','main',7,'p_main','lexer.py',668),
  ('n_main_quad2 -> <empty>','n_main_quad2',0,'p_n_main_quad2','lexer.py',671),
  ('n_clear_scope -> <empty>','n_clear_scope',0,'p_n_clear_scope','lexer.py',675),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',681),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',682),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',685),
  ('map_access -> ID [ exp ]','map_access',4,'p_map_access','lexer.py',689),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',692),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',695),
]
