
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAND ASSIGNATOR BOOL CHAR CTE_BOOL CTE_BOOL CTE_BOOL CTE_CHAR CTE_FLOAT CTE_INT CTE_STRING ELSE EQ FLOAT GEQ ID IF INT LEQ MAIN MAP NOT_EQ OPERATION OPERATION OPERATION OPERATION OPERATION OPERATION OR PRINT PROGRAM READ RETURN SET STRING VOID WHILEprogram : PROGRAM ID ';' program1program1 : var program1\n                | program2program2 : proc program2\n                | mainprocs : proc\n             | proc procsproc : datatype procA\n            | VOID procA\n            | emptyprocA : ID '(' proc1 ')' '{' proc3 '}' proc1 : datatype ID proc2\n             | emptyproc2 : ',' datatype ID proc2\n             | emptyproc3 : var proc3\n             | proc4proc4 : statement proc4\n             | emptyvars : var vars\n            | varvar : datatype var1 var1 : ID ',' var1\n             | ID var2var2 : ';' assignment : ID ASSIGNATOR expressioncondition : IF '(' expression ')' block condition1condition1 : ELSE block\n                  | emptyinput : READ '(' ID input1 ')' input1 : ',' ID input1\n              | emptyoutput : PRINT '(' expression output1 ')' output1 : ',' expression output1\n               | emptyfunction_call : ID '(' function_call1 ')' function_call1 : empty\n                      | function_call2function_call2 : expression ',' function_call2\n                      | expressionreturn : RETURN expressionset_operation : ID '.' OPERATION '(' set_operation1 ')' set_operation1 : expression\n                       | emptystatement : statement1 ';'\n                 | statement2 statement1 : assignment\n                  | input\n                  | output\n                  | set_operation\n                  | map_definition\n                  | return\n                  | map_assignment\n                  | map_operation\n                  | function_callstatement2 : condition\n                  | whilewhile : WHILE '(' expression ')' blockrelop : '<'\n             | '>'\n             | NOT_EQ\n             | EQ\n             | LEQ\n             | GEQlogop : OR\n          | ANDexpression : exp0 expression1expression1 : logop exp0 expression1\n                 | emptyexp0 : exp exp02exp02 : relop exp0\n           | emptyexp : term exp2addsub : '+'\n            | '-' muldiv : '*'\n            | '/' exp2 : addsub term exp2\n          | emptyterm : term_not factor term2term2 : muldiv factor term2\n           | emptyterm_not : '!'\n              | emptyfactor : '(' expression ')'\n            | factor2factor2 : factor3 varctefactor3 : addsub\n             | emptyvarcte : ID\n            | CTE_INT\n            | CTE_FLOAT\n            | CTE_BOOL\n            | CTE_STRING\n            | CTE_CHAR\n            | function_call\n            | map_access\n            | map_operation\n            | set_operation functype : datatype\n               | VOIDdatatype : INT\n               | FLOAT\n               | BOOL\n               | STRING\n               | CHAR\n               | set_definition\n               | map_definitionset_definition : SET '<' datatype '>' block : '{' statement_aux '}' statement_aux : statement statement_aux\n                   | emptymain : MAIN '{' vars_aux statement_aux '}' vars_aux : vars\n              | emptymap_definition : MAP '<' datatype ',' datatype '>' map_access : ID '(' exp ')' map_assignment : map_access ASSIGNATOR expmap_operation : ID '.' OPERATION '(' ')' empty :"
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,7,10,23,27,78,],[0,-1,-3,-5,-2,-4,-113,]),'ID':([2,8,11,12,13,14,15,16,17,18,24,28,31,34,35,37,38,39,40,41,42,46,48,51,54,64,65,69,73,74,80,81,83,84,85,90,91,92,93,94,95,97,105,111,113,114,116,118,119,120,121,122,123,125,127,128,130,132,133,134,138,140,142,144,145,146,149,151,154,160,162,163,185,196,197,198,205,207,209,210,211,],[3,26,-102,-103,-104,-105,-106,-107,-108,30,-22,30,-120,45,-24,-25,66,-114,-115,-21,45,-23,77,66,-46,-56,-57,-120,-20,-109,-45,-120,-120,108,-120,-120,-83,-84,-120,-120,-120,66,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,166,-88,-89,-116,66,66,-108,181,-120,-120,188,-120,-120,-76,-77,-84,-120,66,-58,-27,-29,-120,-28,-110,]),';':([3,26,45,53,55,56,57,58,59,60,61,62,63,86,87,88,89,101,110,112,115,117,124,126,129,131,135,138,144,147,148,156,157,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,187,189,191,192,193,194,200,203,],[4,37,37,80,-47,-48,-49,-50,-51,-52,-53,-54,-55,-41,-120,-120,-120,-26,-67,-69,-70,-72,-73,-79,-120,-86,-118,-116,-51,-36,-117,-120,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-30,-33,-68,-78,-120,-85,-42,-81,]),'INT':([4,6,9,19,24,25,29,31,32,33,35,36,37,41,46,75,97,99,140,178,],[11,11,11,-10,-22,-8,-9,11,11,11,-24,11,-25,11,-23,11,11,11,11,-11,]),'FLOAT':([4,6,9,19,24,25,29,31,32,33,35,36,37,41,46,75,97,99,140,178,],[12,12,12,-10,-22,-8,-9,12,12,12,-24,12,-25,12,-23,12,12,12,12,-11,]),'BOOL':([4,6,9,19,24,25,29,31,32,33,35,36,37,41,46,75,97,99,140,178,],[13,13,13,-10,-22,-8,-9,13,13,13,-24,13,-25,13,-23,13,13,13,13,-11,]),'STRING':([4,6,9,19,24,25,29,31,32,33,35,36,37,41,46,75,97,99,140,178,],[14,14,14,-10,-22,-8,-9,14,14,14,-24,14,-25,14,-23,14,14,14,14,-11,]),'CHAR':([4,6,9,19,24,25,29,31,32,33,35,36,37,41,46,75,97,99,140,178,],[15,15,15,-10,-22,-8,-9,15,15,15,-24,15,-25,15,-23,15,15,15,15,-11,]),'VOID':([4,6,9,19,24,25,29,35,37,46,178,],[18,18,18,-10,-22,-8,-9,-24,-25,-23,-11,]),'MAIN':([4,6,9,19,24,25,29,35,37,46,178,],[20,20,20,-10,-22,-8,-9,-24,-25,-23,-11,]),'SET':([4,6,9,19,24,25,29,31,32,33,35,36,37,41,46,75,97,99,140,178,],[21,21,21,-10,-22,-8,-9,21,21,21,-24,21,-25,21,-23,21,21,21,21,-11,]),'MAP':([4,6,9,19,24,25,29,31,32,33,35,36,37,38,39,40,41,46,51,54,64,65,73,75,80,97,99,140,142,178,196,197,198,205,207,210,211,],[22,22,22,-10,-22,-8,-9,22,22,22,-24,22,-25,22,-114,-115,22,-23,22,-46,-56,-57,-20,22,-45,22,22,22,22,-11,-120,22,-58,-27,-29,-28,-110,]),'>':([11,12,13,14,15,16,17,43,74,88,89,96,104,124,126,129,131,138,147,148,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[-102,-103,-104,-105,-106,-107,-108,74,-109,119,-120,138,119,-73,-79,-120,-86,-116,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),',':([11,12,13,14,15,16,17,26,44,45,74,77,87,88,89,104,107,108,109,110,112,115,117,124,126,129,131,138,147,148,156,157,158,159,161,165,166,167,168,169,170,171,172,173,174,175,181,183,188,190,191,192,193,194,200,203,],[-102,-103,-104,-105,-106,-107,-108,34,75,34,-109,99,-120,-120,-120,-120,149,151,154,-67,-69,-70,-72,-73,-79,-120,-86,-116,-36,-117,-120,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,99,-119,151,154,-68,-78,-120,-85,-42,-81,]),'{':([20,76,176,177,206,],[31,97,197,197,197,]),'<':([21,22,88,89,104,124,126,129,131,147,148,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[32,33,118,-120,118,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'READ':([24,31,35,37,38,39,40,41,46,51,54,64,65,73,80,97,140,142,196,197,198,205,207,210,211,],[-22,-120,-24,-25,67,-114,-115,-21,-23,67,-46,-56,-57,-20,-45,67,67,67,-120,67,-58,-27,-29,-28,-110,]),'PRINT':([24,31,35,37,38,39,40,41,46,51,54,64,65,73,80,97,140,142,196,197,198,205,207,210,211,],[-22,-120,-24,-25,68,-114,-115,-21,-23,68,-46,-56,-57,-20,-45,68,68,68,-120,68,-58,-27,-29,-28,-110,]),'RETURN':([24,31,35,37,38,39,40,41,46,51,54,64,65,73,80,97,140,142,196,197,198,205,207,210,211,],[-22,-120,-24,-25,69,-114,-115,-21,-23,69,-46,-56,-57,-20,-45,69,69,69,-120,69,-58,-27,-29,-28,-110,]),'IF':([24,31,35,37,38,39,40,41,46,51,54,64,65,73,80,97,140,142,196,197,198,205,207,210,211,],[-22,-120,-24,-25,71,-114,-115,-21,-23,71,-46,-56,-57,-20,-45,71,71,71,-120,71,-58,-27,-29,-28,-110,]),'WHILE':([24,31,35,37,38,39,40,41,46,51,54,64,65,73,80,97,140,142,196,197,198,205,207,210,211,],[-22,-120,-24,-25,72,-114,-115,-21,-23,72,-46,-56,-57,-20,-45,72,72,72,-120,72,-58,-27,-29,-28,-110,]),'}':([24,31,35,37,38,39,40,41,46,50,51,52,54,64,65,73,79,80,97,139,140,141,142,143,179,180,196,197,198,205,207,208,210,211,],[-22,-120,-24,-25,-120,-114,-115,-21,-23,78,-120,-112,-46,-56,-57,-20,-111,-45,-120,178,-120,-17,-120,-19,-16,-18,-120,-120,-58,-27,-29,211,-28,-110,]),'(':([26,30,66,67,68,69,71,72,81,83,85,90,91,92,93,94,95,102,105,111,113,114,116,118,119,120,121,122,123,125,127,128,130,146,149,154,160,162,163,166,185,204,209,],[36,36,83,84,85,-120,94,95,-120,-120,-120,130,-83,-84,-120,-120,-120,146,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,-120,-120,-120,130,-76,-77,83,-84,209,-120,]),')':([36,47,49,77,83,87,88,89,98,100,103,104,105,106,107,108,109,110,112,115,117,124,126,129,131,136,137,146,147,148,150,152,153,155,156,157,158,159,161,164,165,166,167,168,169,170,171,172,173,174,175,181,182,183,184,185,186,188,190,191,192,193,194,199,200,201,202,203,209,],[-120,76,-13,-120,-120,-120,-120,-120,-12,-15,147,148,-37,-38,-40,-120,-120,-67,-69,-70,-72,-73,-79,-120,-86,176,177,183,-36,-117,187,-32,189,-35,-120,-71,-120,-80,-82,194,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-120,200,-119,-43,-44,-39,-120,-120,-68,-78,-120,-85,-14,-42,-31,-34,-81,183,]),'ASSIGNATOR':([66,70,148,],[81,93,-117,]),'.':([66,166,],[82,195,]),'!':([69,81,83,85,93,94,95,111,113,114,116,118,119,120,121,122,123,125,127,128,130,146,149,154,209,],[91,91,91,91,91,91,91,91,-65,-66,91,-59,-60,-61,-62,-63,-64,91,-74,-75,91,91,91,91,91,]),'+':([69,81,83,85,89,90,91,92,93,94,95,105,111,113,114,116,118,119,120,121,122,123,125,127,128,129,130,131,146,147,148,149,154,158,159,160,161,162,163,165,166,167,168,169,170,171,172,173,174,175,183,185,193,194,200,203,209,],[-120,-120,-120,-120,127,127,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,-120,-86,-120,-36,-117,-120,-120,127,-80,127,-82,-76,-77,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-84,-120,-85,-42,-81,-120,]),'-':([69,81,83,85,89,90,91,92,93,94,95,105,111,113,114,116,118,119,120,121,122,123,125,127,128,129,130,131,146,147,148,149,154,158,159,160,161,162,163,165,166,167,168,169,170,171,172,173,174,175,183,185,193,194,200,203,209,],[-120,-120,-120,-120,128,128,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,-120,-86,-120,-36,-117,-120,-120,128,-80,128,-82,-76,-77,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-84,-120,-85,-42,-81,-120,]),'CTE_INT':([69,81,83,85,90,91,92,93,94,95,105,111,113,114,116,118,119,120,121,122,123,125,127,128,130,132,133,134,146,149,154,160,162,163,185,209,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,167,-88,-89,-120,-120,-120,-120,-76,-77,-84,-120,]),'CTE_FLOAT':([69,81,83,85,90,91,92,93,94,95,105,111,113,114,116,118,119,120,121,122,123,125,127,128,130,132,133,134,146,149,154,160,162,163,185,209,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,168,-88,-89,-120,-120,-120,-120,-76,-77,-84,-120,]),'CTE_BOOL':([69,81,83,85,90,91,92,93,94,95,105,111,113,114,116,118,119,120,121,122,123,125,127,128,130,132,133,134,146,149,154,160,162,163,185,209,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,169,-88,-89,-120,-120,-120,-120,-76,-77,-84,-120,]),'CTE_STRING':([69,81,83,85,90,91,92,93,94,95,105,111,113,114,116,118,119,120,121,122,123,125,127,128,130,132,133,134,146,149,154,160,162,163,185,209,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,170,-88,-89,-120,-120,-120,-120,-76,-77,-84,-120,]),'CTE_CHAR':([69,81,83,85,90,91,92,93,94,95,105,111,113,114,116,118,119,120,121,122,123,125,127,128,130,132,133,134,146,149,154,160,162,163,185,209,],[-120,-120,-120,-120,-120,-83,-84,-120,-120,-120,-84,-120,-65,-66,-120,-59,-60,-61,-62,-63,-64,-120,-74,-75,-120,171,-88,-89,-120,-120,-120,-120,-76,-77,-84,-120,]),'OPERATION':([82,195,],[102,204,]),'OR':([87,88,89,104,115,117,124,126,129,131,147,148,156,157,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[113,-120,-120,-120,-70,-72,-73,-79,-120,-86,-36,-117,113,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'AND':([87,88,89,104,115,117,124,126,129,131,147,148,156,157,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[114,-120,-120,-120,-70,-72,-73,-79,-120,-86,-36,-117,114,-71,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'NOT_EQ':([88,89,104,124,126,129,131,147,148,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[120,-120,120,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'EQ':([88,89,104,124,126,129,131,147,148,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[121,-120,121,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'LEQ':([88,89,104,124,126,129,131,147,148,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[122,-120,122,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'GEQ':([88,89,104,124,126,129,131,147,148,158,159,161,165,166,167,168,169,170,171,172,173,174,175,183,192,193,194,200,203,],[123,-120,123,-73,-79,-120,-86,-36,-117,-120,-80,-82,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,-78,-120,-85,-42,-81,]),'*':([129,131,147,148,165,166,167,168,169,170,171,172,173,174,175,183,193,194,200,],[162,-86,-36,-117,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,162,-85,-42,]),'/':([129,131,147,148,165,166,167,168,169,170,171,172,173,174,175,183,193,194,200,],[163,-86,-36,-117,-87,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-119,163,-85,-42,]),'ELSE':([196,211,],[206,-110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program1':([4,6,],[5,23,]),'var':([4,6,31,41,97,140,],[6,6,41,41,140,140,]),'program2':([4,6,9,],[7,7,27,]),'datatype':([4,6,9,31,32,33,36,41,75,97,99,140,],[8,8,28,42,43,44,48,42,96,42,145,42,]),'proc':([4,6,9,],[9,9,9,]),'main':([4,6,9,],[10,10,10,]),'set_definition':([4,6,9,31,32,33,36,41,75,97,99,140,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'map_definition':([4,6,9,31,32,33,36,38,41,51,75,97,99,140,142,197,],[17,17,17,17,17,17,17,59,17,59,17,144,17,144,59,59,]),'empty':([4,6,9,31,36,38,51,69,77,81,83,85,87,88,89,90,93,94,95,97,104,108,109,111,116,125,129,130,140,142,146,149,154,156,158,160,181,188,190,193,196,197,209,],[19,19,19,40,49,52,52,92,100,92,105,92,112,117,126,134,92,92,92,143,117,152,155,92,92,92,161,92,143,143,185,92,92,112,126,134,100,152,155,161,207,52,185,]),'var1':([8,34,42,],[24,46,24,]),'procA':([8,18,28,],[25,29,25,]),'var2':([26,45,],[35,35,]),'vars_aux':([31,],[38,]),'vars':([31,41,],[39,73,]),'proc1':([36,],[47,]),'statement_aux':([38,51,197,],[50,79,208,]),'statement':([38,51,97,140,142,197,],[51,51,142,142,142,51,]),'statement1':([38,51,97,140,142,197,],[53,53,53,53,53,53,]),'statement2':([38,51,97,140,142,197,],[54,54,54,54,54,54,]),'assignment':([38,51,97,140,142,197,],[55,55,55,55,55,55,]),'input':([38,51,97,140,142,197,],[56,56,56,56,56,56,]),'output':([38,51,97,140,142,197,],[57,57,57,57,57,57,]),'set_operation':([38,51,97,132,140,142,197,],[58,58,58,175,58,58,58,]),'return':([38,51,97,140,142,197,],[60,60,60,60,60,60,]),'map_assignment':([38,51,97,140,142,197,],[61,61,61,61,61,61,]),'map_operation':([38,51,97,132,140,142,197,],[62,62,62,174,62,62,62,]),'function_call':([38,51,97,132,140,142,197,],[63,63,63,172,63,63,63,]),'condition':([38,51,97,140,142,197,],[64,64,64,64,64,64,]),'while':([38,51,97,140,142,197,],[65,65,65,65,65,65,]),'map_access':([38,51,97,132,140,142,197,],[70,70,70,173,70,70,70,]),'expression':([69,81,83,85,94,95,130,146,149,154,209,],[86,101,107,109,136,137,164,184,107,190,184,]),'exp0':([69,81,83,85,94,95,111,116,130,146,149,154,209,],[87,87,87,87,87,87,156,157,87,87,87,87,87,]),'exp':([69,81,83,85,93,94,95,111,116,130,146,149,154,209,],[88,88,104,88,135,88,88,88,88,88,88,88,88,88,]),'term':([69,81,83,85,93,94,95,111,116,125,130,146,149,154,209,],[89,89,89,89,89,89,89,89,89,158,89,89,89,89,89,]),'term_not':([69,81,83,85,93,94,95,111,116,125,130,146,149,154,209,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'proc2':([77,181,],[98,199,]),'function_call1':([83,],[103,]),'function_call2':([83,149,],[106,186,]),'expression1':([87,156,],[110,191,]),'logop':([87,156,],[111,111,]),'exp02':([88,104,],[115,115,]),'relop':([88,104,],[116,116,]),'exp2':([89,158,],[124,192,]),'addsub':([89,90,158,160,],[125,133,125,133,]),'factor':([90,160,],[129,193,]),'factor2':([90,160,],[131,131,]),'factor3':([90,160,],[132,132,]),'proc3':([97,140,],[139,179,]),'proc4':([97,140,142,],[141,141,180,]),'input1':([108,188,],[150,201,]),'output1':([109,190,],[153,202,]),'term2':([129,193,],[159,203,]),'muldiv':([129,193,],[160,160,]),'varcte':([132,],[165,]),'set_operation1':([146,209,],[182,182,]),'block':([176,177,206,],[196,198,210,]),'condition1':([196,],[205,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID ; program1','program',4,'p_program','lexer.py',108),
  ('program1 -> var program1','program1',2,'p_program1','lexer.py',112),
  ('program1 -> program2','program1',1,'p_program1','lexer.py',113),
  ('program2 -> proc program2','program2',2,'p_program2','lexer.py',117),
  ('program2 -> main','program2',1,'p_program2','lexer.py',118),
  ('procs -> proc','procs',1,'p_procs','lexer.py',121),
  ('procs -> proc procs','procs',2,'p_procs','lexer.py',122),
  ('proc -> datatype procA','proc',2,'p_proc','lexer.py',125),
  ('proc -> VOID procA','proc',2,'p_proc','lexer.py',126),
  ('proc -> empty','proc',1,'p_proc','lexer.py',127),
  ('procA -> ID ( proc1 ) { proc3 }','procA',7,'p_procA','lexer.py',129),
  ('proc1 -> datatype ID proc2','proc1',3,'p_proc1','lexer.py',132),
  ('proc1 -> empty','proc1',1,'p_proc1','lexer.py',133),
  ('proc2 -> , datatype ID proc2','proc2',4,'p_proc2','lexer.py',136),
  ('proc2 -> empty','proc2',1,'p_proc2','lexer.py',137),
  ('proc3 -> var proc3','proc3',2,'p_proc3','lexer.py',140),
  ('proc3 -> proc4','proc3',1,'p_proc3','lexer.py',141),
  ('proc4 -> statement proc4','proc4',2,'p_proc4','lexer.py',144),
  ('proc4 -> empty','proc4',1,'p_proc4','lexer.py',145),
  ('vars -> var vars','vars',2,'p_vars','lexer.py',172),
  ('vars -> var','vars',1,'p_vars','lexer.py',173),
  ('var -> datatype var1','var',2,'p_var','lexer.py',177),
  ('var1 -> ID , var1','var1',3,'p_var1','lexer.py',181),
  ('var1 -> ID var2','var1',2,'p_var1','lexer.py',182),
  ('var2 -> ;','var2',1,'p_var2','lexer.py',190),
  ('assignment -> ID ASSIGNATOR expression','assignment',3,'p_assignment','lexer.py',210),
  ('condition -> IF ( expression ) block condition1','condition',6,'p_condition','lexer.py',213),
  ('condition1 -> ELSE block','condition1',2,'p_condition1','lexer.py',216),
  ('condition1 -> empty','condition1',1,'p_condition1','lexer.py',217),
  ('input -> READ ( ID input1 )','input',5,'p_input','lexer.py',220),
  ('input1 -> , ID input1','input1',3,'p_input1','lexer.py',223),
  ('input1 -> empty','input1',1,'p_input1','lexer.py',224),
  ('output -> PRINT ( expression output1 )','output',5,'p_output','lexer.py',227),
  ('output1 -> , expression output1','output1',3,'p_output1','lexer.py',230),
  ('output1 -> empty','output1',1,'p_output1','lexer.py',231),
  ('function_call -> ID ( function_call1 )','function_call',4,'p_function_call','lexer.py',234),
  ('function_call1 -> empty','function_call1',1,'p_function_call1','lexer.py',237),
  ('function_call1 -> function_call2','function_call1',1,'p_function_call1','lexer.py',238),
  ('function_call2 -> expression , function_call2','function_call2',3,'p_function_call2','lexer.py',241),
  ('function_call2 -> expression','function_call2',1,'p_function_call2','lexer.py',242),
  ('return -> RETURN expression','return',2,'p_return','lexer.py',245),
  ('set_operation -> ID . OPERATION ( set_operation1 )','set_operation',6,'p_set_operation','lexer.py',248),
  ('set_operation1 -> expression','set_operation1',1,'p_set_operation1','lexer.py',251),
  ('set_operation1 -> empty','set_operation1',1,'p_set_operation1','lexer.py',252),
  ('statement -> statement1 ;','statement',2,'p_statement','lexer.py',255),
  ('statement -> statement2','statement',1,'p_statement','lexer.py',256),
  ('statement1 -> assignment','statement1',1,'p_statement1','lexer.py',259),
  ('statement1 -> input','statement1',1,'p_statement1','lexer.py',260),
  ('statement1 -> output','statement1',1,'p_statement1','lexer.py',261),
  ('statement1 -> set_operation','statement1',1,'p_statement1','lexer.py',262),
  ('statement1 -> map_definition','statement1',1,'p_statement1','lexer.py',263),
  ('statement1 -> return','statement1',1,'p_statement1','lexer.py',264),
  ('statement1 -> map_assignment','statement1',1,'p_statement1','lexer.py',265),
  ('statement1 -> map_operation','statement1',1,'p_statement1','lexer.py',266),
  ('statement1 -> function_call','statement1',1,'p_statement1','lexer.py',267),
  ('statement2 -> condition','statement2',1,'p_statement2','lexer.py',270),
  ('statement2 -> while','statement2',1,'p_statement2','lexer.py',271),
  ('while -> WHILE ( expression ) block','while',5,'p_while','lexer.py',274),
  ('relop -> <','relop',1,'p_relop','lexer.py',277),
  ('relop -> >','relop',1,'p_relop','lexer.py',278),
  ('relop -> NOT_EQ','relop',1,'p_relop','lexer.py',279),
  ('relop -> EQ','relop',1,'p_relop','lexer.py',280),
  ('relop -> LEQ','relop',1,'p_relop','lexer.py',281),
  ('relop -> GEQ','relop',1,'p_relop','lexer.py',282),
  ('logop -> OR','logop',1,'p_logop','lexer.py',285),
  ('logop -> AND','logop',1,'p_logop','lexer.py',286),
  ('expression -> exp0 expression1','expression',2,'p_expression','lexer.py',291),
  ('expression1 -> logop exp0 expression1','expression1',3,'p_expression1','lexer.py',294),
  ('expression1 -> empty','expression1',1,'p_expression1','lexer.py',295),
  ('exp0 -> exp exp02','exp0',2,'p_exp0','lexer.py',298),
  ('exp02 -> relop exp0','exp02',2,'p_exp02','lexer.py',301),
  ('exp02 -> empty','exp02',1,'p_exp02','lexer.py',302),
  ('exp -> term exp2','exp',2,'p_exp','lexer.py',305),
  ('addsub -> +','addsub',1,'p_addsub','lexer.py',308),
  ('addsub -> -','addsub',1,'p_addsub','lexer.py',309),
  ('muldiv -> *','muldiv',1,'p_muldiv','lexer.py',312),
  ('muldiv -> /','muldiv',1,'p_muldiv','lexer.py',313),
  ('exp2 -> addsub term exp2','exp2',3,'p_exp2','lexer.py',316),
  ('exp2 -> empty','exp2',1,'p_exp2','lexer.py',317),
  ('term -> term_not factor term2','term',3,'p_term','lexer.py',320),
  ('term2 -> muldiv factor term2','term2',3,'p_term2','lexer.py',323),
  ('term2 -> empty','term2',1,'p_term2','lexer.py',324),
  ('term_not -> !','term_not',1,'p_term_not','lexer.py',327),
  ('term_not -> empty','term_not',1,'p_term_not','lexer.py',328),
  ('factor -> ( expression )','factor',3,'p_factor','lexer.py',331),
  ('factor -> factor2','factor',1,'p_factor','lexer.py',332),
  ('factor2 -> factor3 varcte','factor2',2,'p_factor2','lexer.py',335),
  ('factor3 -> addsub','factor3',1,'p_factor3','lexer.py',338),
  ('factor3 -> empty','factor3',1,'p_factor3','lexer.py',339),
  ('varcte -> ID','varcte',1,'p_varcte','lexer.py',342),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','lexer.py',343),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','lexer.py',344),
  ('varcte -> CTE_BOOL','varcte',1,'p_varcte','lexer.py',345),
  ('varcte -> CTE_STRING','varcte',1,'p_varcte','lexer.py',346),
  ('varcte -> CTE_CHAR','varcte',1,'p_varcte','lexer.py',347),
  ('varcte -> function_call','varcte',1,'p_varcte','lexer.py',348),
  ('varcte -> map_access','varcte',1,'p_varcte','lexer.py',349),
  ('varcte -> map_operation','varcte',1,'p_varcte','lexer.py',350),
  ('varcte -> set_operation','varcte',1,'p_varcte','lexer.py',351),
  ('functype -> datatype','functype',1,'p_functype','lexer.py',354),
  ('functype -> VOID','functype',1,'p_functype','lexer.py',355),
  ('datatype -> INT','datatype',1,'p_datatype','lexer.py',358),
  ('datatype -> FLOAT','datatype',1,'p_datatype','lexer.py',359),
  ('datatype -> BOOL','datatype',1,'p_datatype','lexer.py',360),
  ('datatype -> STRING','datatype',1,'p_datatype','lexer.py',361),
  ('datatype -> CHAR','datatype',1,'p_datatype','lexer.py',362),
  ('datatype -> set_definition','datatype',1,'p_datatype','lexer.py',363),
  ('datatype -> map_definition','datatype',1,'p_datatype','lexer.py',364),
  ('set_definition -> SET < datatype >','set_definition',4,'p_set_definition','lexer.py',368),
  ('block -> { statement_aux }','block',3,'p_block','lexer.py',372),
  ('statement_aux -> statement statement_aux','statement_aux',2,'p_statement_aux','lexer.py',375),
  ('statement_aux -> empty','statement_aux',1,'p_statement_aux','lexer.py',376),
  ('main -> MAIN { vars_aux statement_aux }','main',5,'p_main','lexer.py',379),
  ('vars_aux -> vars','vars_aux',1,'p_vars_aux','lexer.py',382),
  ('vars_aux -> empty','vars_aux',1,'p_vars_aux','lexer.py',383),
  ('map_definition -> MAP < datatype , datatype >','map_definition',6,'p_map_definition','lexer.py',386),
  ('map_access -> ID ( exp )','map_access',4,'p_map_access','lexer.py',390),
  ('map_assignment -> map_access ASSIGNATOR exp','map_assignment',3,'p_map_assignment','lexer.py',393),
  ('map_operation -> ID . OPERATION ( )','map_operation',5,'p_map_operation','lexer.py',396),
  ('empty -> <empty>','empty',0,'p_empty','lexer.py',399),
]
