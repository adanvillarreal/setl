Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; n_main_quad program1
Rule 2     n_main_quad -> <empty>
Rule 3     program1 -> var program1
Rule 4     program1 -> program2
Rule 5     program2 -> proc program2
Rule 6     program2 -> main
Rule 7     proc -> proca1 procA n_check_has_return
Rule 8     proc -> VOID proca2 procA
Rule 9     proc -> empty
Rule 10    n_check_has_return -> <empty>
Rule 11    proca2 -> ID (
Rule 12    proca1 -> datatype ID (
Rule 13    procA -> proc1 ) { proc3 }
Rule 14    proc1 -> n_push_variable proc2
Rule 15    proc1 -> empty
Rule 16    proc2 -> , n_push_variable proc2
Rule 17    proc2 -> empty
Rule 18    n_push_variable -> datatype ID
Rule 19    proc3 -> var proc3
Rule 20    proc3 -> n_quad_counter proc4
Rule 21    n_quad_counter -> <empty>
Rule 22    proc4 -> statement proc4
Rule 23    proc4 -> empty
Rule 24    vars -> var vars
Rule 25    vars -> var
Rule 26    var -> datatype var1
Rule 27    var1 -> ID , var1
Rule 28    var1 -> ID ;
Rule 29    assignment -> assignment2 ASSIGNATOR n_quad_assign expression
Rule 30    assignment2 -> ID
Rule 31    n_quad_assign -> <empty>
Rule 32    condition -> IF ( expression n_while_2 ) block condition1
Rule 33    condition1 -> ELSE n_if_2 block n_if_3
Rule 34    condition1 -> n_if_3
Rule 35    n_if_2 -> <empty>
Rule 36    n_if_3 -> <empty>
Rule 37    while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3
Rule 38    n_while_1 -> <empty>
Rule 39    n_while_2 -> <empty>
Rule 40    n_while_3 -> <empty>
Rule 41    input -> READ ( n_process_read input1 )
Rule 42    input1 -> , n_process_read input1
Rule 43    input1 -> empty
Rule 44    n_process_read -> ID
Rule 45    output -> PRINT ( n_output_quad output1 )
Rule 46    output1 -> , n_output_quad output1
Rule 47    output1 -> empty
Rule 48    n_output_quad -> expression
Rule 49    function_call -> n_era_size function_call1 )
Rule 50    n_era_size -> ID (
Rule 51    function_call1 -> empty
Rule 52    function_call1 -> function_call2
Rule 53    function_call2 -> n_verify_argument , n_add_one_to_counter function_call2
Rule 54    function_call2 -> n_verify_argument
Rule 55    n_add_one_to_counter -> <empty>
Rule 56    n_verify_argument -> expression
Rule 57    return -> RETURN expression
Rule 58    container_operation -> ID . OP_ARGS ( expression )
Rule 59    container_operation -> ID . OP ( )
Rule 60    statement -> statement1 ;
Rule 61    statement -> statement2
Rule 62    statement1 -> assignment
Rule 63    statement1 -> input
Rule 64    statement1 -> output
Rule 65    statement1 -> container_operation
Rule 66    statement1 -> map_definition
Rule 67    statement1 -> return
Rule 68    statement1 -> map_assignment
Rule 69    statement1 -> function_call
Rule 70    statement2 -> condition
Rule 71    statement2 -> while
Rule 72    relop -> <
Rule 73    relop -> >
Rule 74    relop -> NOT_EQ
Rule 75    relop -> EQ
Rule 76    relop -> LEQ
Rule 77    relop -> GEQ
Rule 78    logop -> OR
Rule 79    logop -> AND
Rule 80    expression -> exp0 expression2
Rule 81    expression2 -> logop exp0 n_quad_logop expression2
Rule 82    expression2 -> empty
Rule 83    n_quad_logop -> <empty>
Rule 84    exp0 -> exp exp02
Rule 85    exp02 -> relop exp
Rule 86    exp02 -> empty
Rule 87    exp -> term exp2
Rule 88    addsub -> +
Rule 89    addsub -> -
Rule 90    addsub -> SET_MATH_ADDSUB
Rule 91    muldiv -> *
Rule 92    muldiv -> /
Rule 93    muldiv -> SET_MATH_MULDIV
Rule 94    exp2 -> addsub term n_quad_addsub exp2
Rule 95    exp2 -> empty
Rule 96    term -> term_not factor n_quad_muldiv term2
Rule 97    n_quad_muldiv -> <empty>
Rule 98    n_quad_addsub -> <empty>
Rule 99    term2 -> muldiv factor n_quad_muldiv term2
Rule 100   term2 -> n_quad_not
Rule 101   n_quad_not -> <empty>
Rule 102   term_not -> !
Rule 103   term_not -> empty
Rule 104   factor -> ( n_push_false_bottom expression ) n_pop_false_bottom
Rule 105   factor -> varcte
Rule 106   n_push_false_bottom -> <empty>
Rule 107   n_pop_false_bottom -> <empty>
Rule 108   varcte -> ID empty
Rule 109   varcte -> varcte1
Rule 110   varcte1 -> CTE_INT
Rule 111   varcte1 -> CTE_FLOAT
Rule 112   varcte1 -> CTE_BOOL
Rule 113   varcte1 -> CTE_STRING
Rule 114   varcte1 -> CTE_CHAR
Rule 115   varcte1 -> function_call
Rule 116   varcte1 -> map_access
Rule 117   varcte1 -> container_operation
Rule 118   functype -> datatype
Rule 119   functype -> VOID
Rule 120   datatype -> INT
Rule 121   datatype -> FLOAT
Rule 122   datatype -> BOOL
Rule 123   datatype -> STRING
Rule 124   datatype -> CHAR
Rule 125   datatype -> set_definition
Rule 126   datatype -> map_definition
Rule 127   set_definition -> SET < datatype >
Rule 128   block -> { statement_aux }
Rule 129   statement_aux -> statement statement_aux
Rule 130   statement_aux -> empty
Rule 131   main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
Rule 132   n_main_quad2 -> <empty>
Rule 133   n_clear_scope -> <empty>
Rule 134   vars_aux -> vars
Rule 135   vars_aux -> empty
Rule 136   map_definition -> MAP < datatype , datatype >
Rule 137   map_access -> ID [ expression ]
Rule 138   map_assignment -> map_access ASSIGNATOR n_quad_assign exp
Rule 139   empty -> <empty>

Terminals, with rules where they appear

!                    : 102
(                    : 11 12 32 37 41 45 50 58 59 104
)                    : 13 32 37 41 45 49 58 59 104
*                    : 91
+                    : 88
,                    : 16 27 42 46 53 136
-                    : 89
.                    : 58 59
/                    : 92
;                    : 1 28 60
<                    : 72 127 136
>                    : 73 127 136
AND                  : 79
ASSIGNATOR           : 29 138
BOOL                 : 122
CHAR                 : 124
CTE_BOOL             : 112
CTE_CHAR             : 114
CTE_FLOAT            : 111
CTE_INT              : 110
CTE_STRING           : 113
ELSE                 : 33
EQ                   : 75
FLOAT                : 121
GEQ                  : 77
ID                   : 1 11 12 18 27 28 30 44 50 58 59 108 137
IF                   : 32
INT                  : 120
LEQ                  : 76
MAIN                 : 131
MAP                  : 136
NOT_EQ               : 74
OP                   : 59
OP_ARGS              : 58
OR                   : 78
PRINT                : 45
PROGRAM              : 1
READ                 : 41
RETURN               : 57
SET                  : 127
SET_MATH_ADDSUB      : 90
SET_MATH_MULDIV      : 93
STRING               : 123
VOID                 : 8 119
WHILE                : 37
[                    : 137
]                    : 137
error                : 
{                    : 13 128 131
}                    : 13 128 131

Nonterminals, with rules where they appear

addsub               : 94
assignment           : 62
assignment2          : 29
block                : 32 33 37
condition            : 70
condition1           : 32
container_operation  : 65 117
datatype             : 12 18 26 118 127 136 136
empty                : 9 15 17 23 43 47 51 82 86 95 103 108 130 135
exp                  : 84 85 138
exp0                 : 80 81
exp02                : 84
exp2                 : 87 94
expression           : 29 32 37 48 56 57 58 104 137
expression2          : 80 81
factor               : 96 99
function_call        : 69 115
function_call1       : 49
function_call2       : 52 53
functype             : 
input                : 63
input1               : 41 42
logop                : 81
main                 : 6
map_access           : 116 138
map_assignment       : 68
map_definition       : 66 126
muldiv               : 99
n_add_one_to_counter : 53
n_check_has_return   : 7
n_clear_scope        : 131
n_era_size           : 49
n_if_2               : 33
n_if_3               : 33 34
n_main_quad          : 1
n_main_quad2         : 131
n_output_quad        : 45 46
n_pop_false_bottom   : 104
n_process_read       : 41 42
n_push_false_bottom  : 104
n_push_variable      : 14 16
n_quad_addsub        : 94
n_quad_assign        : 29 138
n_quad_counter       : 20
n_quad_logop         : 81
n_quad_muldiv        : 96 99
n_quad_not           : 100
n_verify_argument    : 53 54
n_while_1            : 37
n_while_2            : 32 37
n_while_3            : 37
output               : 64
output1              : 45 46
proc                 : 5
proc1                : 13
proc2                : 14 16
proc3                : 13 19
proc4                : 20 22
procA                : 7 8
proca1               : 7
proca2               : 8
program              : 0
program1             : 1 3
program2             : 4 5
relop                : 85
return               : 67
set_definition       : 125
statement            : 22 129
statement1           : 60
statement2           : 61
statement_aux        : 128 129 131
term                 : 87 94
term2                : 96 99
term_not             : 96
var                  : 3 19 24 25
var1                 : 26 27
varcte               : 105
varcte1              : 109
vars                 : 24 134
vars_aux             : 131
while                : 71

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; n_main_quad program1

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; n_main_quad program1

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; n_main_quad program1

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . n_main_quad program1
    (2) n_main_quad -> .

    INT             reduce using rule 2 (n_main_quad -> .)
    FLOAT           reduce using rule 2 (n_main_quad -> .)
    BOOL            reduce using rule 2 (n_main_quad -> .)
    STRING          reduce using rule 2 (n_main_quad -> .)
    CHAR            reduce using rule 2 (n_main_quad -> .)
    VOID            reduce using rule 2 (n_main_quad -> .)
    MAIN            reduce using rule 2 (n_main_quad -> .)
    SET             reduce using rule 2 (n_main_quad -> .)
    MAP             reduce using rule 2 (n_main_quad -> .)

    n_main_quad                    shift and go to state 5

state 5

    (1) program -> PROGRAM ID ; n_main_quad . program1
    (3) program1 -> . var program1
    (4) program1 -> . program2
    (26) var -> . datatype var1
    (5) program2 -> . proc program2
    (6) program2 -> . main
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (7) proc -> . proca1 procA n_check_has_return
    (8) proc -> . VOID proca2 procA
    (9) proc -> . empty
    (131) main -> . MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >
    (12) proca1 -> . datatype ID (
    (139) empty -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    VOID            shift and go to state 6
    MAIN            shift and go to state 24
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! VOID            [ reduce using rule 139 (empty -> .) ]
  ! MAIN            [ reduce using rule 139 (empty -> .) ]
  ! INT             [ reduce using rule 139 (empty -> .) ]
  ! FLOAT           [ reduce using rule 139 (empty -> .) ]
  ! BOOL            [ reduce using rule 139 (empty -> .) ]
  ! STRING          [ reduce using rule 139 (empty -> .) ]
  ! CHAR            [ reduce using rule 139 (empty -> .) ]
  ! SET             [ reduce using rule 139 (empty -> .) ]
  ! MAP             [ reduce using rule 139 (empty -> .) ]

    program1                       shift and go to state 10
    program2                       shift and go to state 11
    datatype                       shift and go to state 20
    proca1                         shift and go to state 12
    map_definition                 shift and go to state 7
    var                            shift and go to state 13
    set_definition                 shift and go to state 19
    main                           shift and go to state 14
    proc                           shift and go to state 15
    empty                          shift and go to state 16

state 6

    (8) proc -> VOID . proca2 procA
    (11) proca2 -> . ID (

    ID              shift and go to state 25

    proca2                         shift and go to state 26

state 7

    (126) datatype -> map_definition .

    ID              reduce using rule 126 (datatype -> map_definition .)
    ,               reduce using rule 126 (datatype -> map_definition .)
    >               reduce using rule 126 (datatype -> map_definition .)


state 8

    (124) datatype -> CHAR .

    ID              reduce using rule 124 (datatype -> CHAR .)
    ,               reduce using rule 124 (datatype -> CHAR .)
    >               reduce using rule 124 (datatype -> CHAR .)


state 9

    (127) set_definition -> SET . < datatype >

    <               shift and go to state 27


state 10

    (1) program -> PROGRAM ID ; n_main_quad program1 .

    $end            reduce using rule 1 (program -> PROGRAM ID ; n_main_quad program1 .)


state 11

    (4) program1 -> program2 .

    $end            reduce using rule 4 (program1 -> program2 .)


state 12

    (7) proc -> proca1 . procA n_check_has_return
    (13) procA -> . proc1 ) { proc3 }
    (14) proc1 -> . n_push_variable proc2
    (15) proc1 -> . empty
    (18) n_push_variable -> . datatype ID
    (139) empty -> .
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

    )               reduce using rule 139 (empty -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    n_push_variable                shift and go to state 30
    set_definition                 shift and go to state 19
    datatype                       shift and go to state 31
    procA                          shift and go to state 32
    empty                          shift and go to state 29
    map_definition                 shift and go to state 7
    proc1                          shift and go to state 28

state 13

    (3) program1 -> var . program1
    (3) program1 -> . var program1
    (4) program1 -> . program2
    (26) var -> . datatype var1
    (5) program2 -> . proc program2
    (6) program2 -> . main
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (7) proc -> . proca1 procA n_check_has_return
    (8) proc -> . VOID proca2 procA
    (9) proc -> . empty
    (131) main -> . MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >
    (12) proca1 -> . datatype ID (
    (139) empty -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    VOID            shift and go to state 6
    MAIN            shift and go to state 24
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! VOID            [ reduce using rule 139 (empty -> .) ]
  ! MAIN            [ reduce using rule 139 (empty -> .) ]
  ! INT             [ reduce using rule 139 (empty -> .) ]
  ! FLOAT           [ reduce using rule 139 (empty -> .) ]
  ! BOOL            [ reduce using rule 139 (empty -> .) ]
  ! STRING          [ reduce using rule 139 (empty -> .) ]
  ! CHAR            [ reduce using rule 139 (empty -> .) ]
  ! SET             [ reduce using rule 139 (empty -> .) ]
  ! MAP             [ reduce using rule 139 (empty -> .) ]

    program1                       shift and go to state 33
    program2                       shift and go to state 11
    datatype                       shift and go to state 20
    proca1                         shift and go to state 12
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19
    var                            shift and go to state 13
    main                           shift and go to state 14
    proc                           shift and go to state 15
    empty                          shift and go to state 16

state 14

    (6) program2 -> main .

    $end            reduce using rule 6 (program2 -> main .)


state 15

    (5) program2 -> proc . program2
    (5) program2 -> . proc program2
    (6) program2 -> . main
    (7) proc -> . proca1 procA n_check_has_return
    (8) proc -> . VOID proca2 procA
    (9) proc -> . empty
    (131) main -> . MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (12) proca1 -> . datatype ID (
    (139) empty -> .
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
    VOID            shift and go to state 6
    MAIN            shift and go to state 24
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! VOID            [ reduce using rule 139 (empty -> .) ]
  ! MAIN            [ reduce using rule 139 (empty -> .) ]
  ! INT             [ reduce using rule 139 (empty -> .) ]
  ! FLOAT           [ reduce using rule 139 (empty -> .) ]
  ! BOOL            [ reduce using rule 139 (empty -> .) ]
  ! STRING          [ reduce using rule 139 (empty -> .) ]
  ! CHAR            [ reduce using rule 139 (empty -> .) ]
  ! SET             [ reduce using rule 139 (empty -> .) ]
  ! MAP             [ reduce using rule 139 (empty -> .) ]

    set_definition                 shift and go to state 19
    program2                       shift and go to state 34
    datatype                       shift and go to state 35
    proca1                         shift and go to state 12
    map_definition                 shift and go to state 7
    main                           shift and go to state 14
    proc                           shift and go to state 15
    empty                          shift and go to state 16

state 16

    (9) proc -> empty .

    VOID            reduce using rule 9 (proc -> empty .)
    MAIN            reduce using rule 9 (proc -> empty .)
    INT             reduce using rule 9 (proc -> empty .)
    FLOAT           reduce using rule 9 (proc -> empty .)
    BOOL            reduce using rule 9 (proc -> empty .)
    STRING          reduce using rule 9 (proc -> empty .)
    CHAR            reduce using rule 9 (proc -> empty .)
    SET             reduce using rule 9 (proc -> empty .)
    MAP             reduce using rule 9 (proc -> empty .)


state 17

    (123) datatype -> STRING .

    ID              reduce using rule 123 (datatype -> STRING .)
    ,               reduce using rule 123 (datatype -> STRING .)
    >               reduce using rule 123 (datatype -> STRING .)


state 18

    (136) map_definition -> MAP . < datatype , datatype >

    <               shift and go to state 36


state 19

    (125) datatype -> set_definition .

    ID              reduce using rule 125 (datatype -> set_definition .)
    ,               reduce using rule 125 (datatype -> set_definition .)
    >               reduce using rule 125 (datatype -> set_definition .)


state 20

    (26) var -> datatype . var1
    (12) proca1 -> datatype . ID (
    (27) var1 -> . ID , var1
    (28) var1 -> . ID ;

    ID              shift and go to state 38

    var1                           shift and go to state 37

state 21

    (121) datatype -> FLOAT .

    ID              reduce using rule 121 (datatype -> FLOAT .)
    ,               reduce using rule 121 (datatype -> FLOAT .)
    >               reduce using rule 121 (datatype -> FLOAT .)


state 22

    (120) datatype -> INT .

    ID              reduce using rule 120 (datatype -> INT .)
    ,               reduce using rule 120 (datatype -> INT .)
    >               reduce using rule 120 (datatype -> INT .)


state 23

    (122) datatype -> BOOL .

    ID              reduce using rule 122 (datatype -> BOOL .)
    ,               reduce using rule 122 (datatype -> BOOL .)
    >               reduce using rule 122 (datatype -> BOOL .)


state 24

    (131) main -> MAIN . n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (133) n_clear_scope -> .

    {               reduce using rule 133 (n_clear_scope -> .)

    n_clear_scope                  shift and go to state 39

state 25

    (11) proca2 -> ID . (

    (               shift and go to state 40


state 26

    (8) proc -> VOID proca2 . procA
    (13) procA -> . proc1 ) { proc3 }
    (14) proc1 -> . n_push_variable proc2
    (15) proc1 -> . empty
    (18) n_push_variable -> . datatype ID
    (139) empty -> .
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

    )               reduce using rule 139 (empty -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    n_push_variable                shift and go to state 30
    set_definition                 shift and go to state 19
    datatype                       shift and go to state 31
    map_definition                 shift and go to state 7
    procA                          shift and go to state 41
    empty                          shift and go to state 29
    proc1                          shift and go to state 28

state 27

    (127) set_definition -> SET < . datatype >
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 42
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 28

    (13) procA -> proc1 . ) { proc3 }

    )               shift and go to state 43


state 29

    (15) proc1 -> empty .

    )               reduce using rule 15 (proc1 -> empty .)


state 30

    (14) proc1 -> n_push_variable . proc2
    (16) proc2 -> . , n_push_variable proc2
    (17) proc2 -> . empty
    (139) empty -> .

    ,               shift and go to state 44
    )               reduce using rule 139 (empty -> .)

    empty                          shift and go to state 45
    proc2                          shift and go to state 46

state 31

    (18) n_push_variable -> datatype . ID

    ID              shift and go to state 47


state 32

    (7) proc -> proca1 procA . n_check_has_return
    (10) n_check_has_return -> .

    VOID            reduce using rule 10 (n_check_has_return -> .)
    MAIN            reduce using rule 10 (n_check_has_return -> .)
    INT             reduce using rule 10 (n_check_has_return -> .)
    FLOAT           reduce using rule 10 (n_check_has_return -> .)
    BOOL            reduce using rule 10 (n_check_has_return -> .)
    STRING          reduce using rule 10 (n_check_has_return -> .)
    CHAR            reduce using rule 10 (n_check_has_return -> .)
    SET             reduce using rule 10 (n_check_has_return -> .)
    MAP             reduce using rule 10 (n_check_has_return -> .)

    n_check_has_return             shift and go to state 48

state 33

    (3) program1 -> var program1 .

    $end            reduce using rule 3 (program1 -> var program1 .)


state 34

    (5) program2 -> proc program2 .

    $end            reduce using rule 5 (program2 -> proc program2 .)


state 35

    (12) proca1 -> datatype . ID (

    ID              shift and go to state 49


state 36

    (136) map_definition -> MAP < . datatype , datatype >
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 50
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 37

    (26) var -> datatype var1 .

    INT             reduce using rule 26 (var -> datatype var1 .)
    FLOAT           reduce using rule 26 (var -> datatype var1 .)
    BOOL            reduce using rule 26 (var -> datatype var1 .)
    STRING          reduce using rule 26 (var -> datatype var1 .)
    CHAR            reduce using rule 26 (var -> datatype var1 .)
    SET             reduce using rule 26 (var -> datatype var1 .)
    MAP             reduce using rule 26 (var -> datatype var1 .)
    READ            reduce using rule 26 (var -> datatype var1 .)
    PRINT           reduce using rule 26 (var -> datatype var1 .)
    ID              reduce using rule 26 (var -> datatype var1 .)
    RETURN          reduce using rule 26 (var -> datatype var1 .)
    IF              reduce using rule 26 (var -> datatype var1 .)
    WHILE           reduce using rule 26 (var -> datatype var1 .)
    }               reduce using rule 26 (var -> datatype var1 .)
    VOID            reduce using rule 26 (var -> datatype var1 .)
    MAIN            reduce using rule 26 (var -> datatype var1 .)


state 38

    (12) proca1 -> datatype ID . (
    (27) var1 -> ID . , var1
    (28) var1 -> ID . ;

    (               shift and go to state 51
    ,               shift and go to state 52
    ;               shift and go to state 53


state 39

    (131) main -> MAIN n_clear_scope . n_main_quad2 { vars_aux statement_aux }
    (132) n_main_quad2 -> .

    {               reduce using rule 132 (n_main_quad2 -> .)

    n_main_quad2                   shift and go to state 54

state 40

    (11) proca2 -> ID ( .

    INT             reduce using rule 11 (proca2 -> ID ( .)
    FLOAT           reduce using rule 11 (proca2 -> ID ( .)
    BOOL            reduce using rule 11 (proca2 -> ID ( .)
    STRING          reduce using rule 11 (proca2 -> ID ( .)
    CHAR            reduce using rule 11 (proca2 -> ID ( .)
    SET             reduce using rule 11 (proca2 -> ID ( .)
    MAP             reduce using rule 11 (proca2 -> ID ( .)
    )               reduce using rule 11 (proca2 -> ID ( .)


state 41

    (8) proc -> VOID proca2 procA .

    VOID            reduce using rule 8 (proc -> VOID proca2 procA .)
    MAIN            reduce using rule 8 (proc -> VOID proca2 procA .)
    INT             reduce using rule 8 (proc -> VOID proca2 procA .)
    FLOAT           reduce using rule 8 (proc -> VOID proca2 procA .)
    BOOL            reduce using rule 8 (proc -> VOID proca2 procA .)
    STRING          reduce using rule 8 (proc -> VOID proca2 procA .)
    CHAR            reduce using rule 8 (proc -> VOID proca2 procA .)
    SET             reduce using rule 8 (proc -> VOID proca2 procA .)
    MAP             reduce using rule 8 (proc -> VOID proca2 procA .)


state 42

    (127) set_definition -> SET < datatype . >

    >               shift and go to state 55


state 43

    (13) procA -> proc1 ) . { proc3 }

    {               shift and go to state 56


state 44

    (16) proc2 -> , . n_push_variable proc2
    (18) n_push_variable -> . datatype ID
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 31
    n_push_variable                shift and go to state 57
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 45

    (17) proc2 -> empty .

    )               reduce using rule 17 (proc2 -> empty .)


state 46

    (14) proc1 -> n_push_variable proc2 .

    )               reduce using rule 14 (proc1 -> n_push_variable proc2 .)


state 47

    (18) n_push_variable -> datatype ID .

    ,               reduce using rule 18 (n_push_variable -> datatype ID .)
    )               reduce using rule 18 (n_push_variable -> datatype ID .)


state 48

    (7) proc -> proca1 procA n_check_has_return .

    VOID            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    MAIN            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    INT             reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    FLOAT           reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    BOOL            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    STRING          reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    CHAR            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    SET             reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    MAP             reduce using rule 7 (proc -> proca1 procA n_check_has_return .)


state 49

    (12) proca1 -> datatype ID . (

    (               shift and go to state 51


state 50

    (136) map_definition -> MAP < datatype . , datatype >

    ,               shift and go to state 58


state 51

    (12) proca1 -> datatype ID ( .

    INT             reduce using rule 12 (proca1 -> datatype ID ( .)
    FLOAT           reduce using rule 12 (proca1 -> datatype ID ( .)
    BOOL            reduce using rule 12 (proca1 -> datatype ID ( .)
    STRING          reduce using rule 12 (proca1 -> datatype ID ( .)
    CHAR            reduce using rule 12 (proca1 -> datatype ID ( .)
    SET             reduce using rule 12 (proca1 -> datatype ID ( .)
    MAP             reduce using rule 12 (proca1 -> datatype ID ( .)
    )               reduce using rule 12 (proca1 -> datatype ID ( .)


state 52

    (27) var1 -> ID , . var1
    (27) var1 -> . ID , var1
    (28) var1 -> . ID ;

    ID              shift and go to state 60

    var1                           shift and go to state 59

state 53

    (28) var1 -> ID ; .

    INT             reduce using rule 28 (var1 -> ID ; .)
    FLOAT           reduce using rule 28 (var1 -> ID ; .)
    BOOL            reduce using rule 28 (var1 -> ID ; .)
    STRING          reduce using rule 28 (var1 -> ID ; .)
    CHAR            reduce using rule 28 (var1 -> ID ; .)
    VOID            reduce using rule 28 (var1 -> ID ; .)
    MAIN            reduce using rule 28 (var1 -> ID ; .)
    SET             reduce using rule 28 (var1 -> ID ; .)
    MAP             reduce using rule 28 (var1 -> ID ; .)
    READ            reduce using rule 28 (var1 -> ID ; .)
    PRINT           reduce using rule 28 (var1 -> ID ; .)
    ID              reduce using rule 28 (var1 -> ID ; .)
    RETURN          reduce using rule 28 (var1 -> ID ; .)
    IF              reduce using rule 28 (var1 -> ID ; .)
    WHILE           reduce using rule 28 (var1 -> ID ; .)
    }               reduce using rule 28 (var1 -> ID ; .)


state 54

    (131) main -> MAIN n_clear_scope n_main_quad2 . { vars_aux statement_aux }

    {               shift and go to state 61


state 55

    (127) set_definition -> SET < datatype > .

    ID              reduce using rule 127 (set_definition -> SET < datatype > .)
    >               reduce using rule 127 (set_definition -> SET < datatype > .)
    ,               reduce using rule 127 (set_definition -> SET < datatype > .)


state 56

    (13) procA -> proc1 ) { . proc3 }
    (19) proc3 -> . var proc3
    (20) proc3 -> . n_quad_counter proc4
    (26) var -> . datatype var1
    (21) n_quad_counter -> .
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 21 (n_quad_counter -> .)
    PRINT           reduce using rule 21 (n_quad_counter -> .)
    ID              reduce using rule 21 (n_quad_counter -> .)
    RETURN          reduce using rule 21 (n_quad_counter -> .)
    IF              reduce using rule 21 (n_quad_counter -> .)
    WHILE           reduce using rule 21 (n_quad_counter -> .)
    }               reduce using rule 21 (n_quad_counter -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 21 (n_quad_counter -> .) ]

    set_definition                 shift and go to state 19
    datatype                       shift and go to state 65
    map_definition                 shift and go to state 7
    n_quad_counter                 shift and go to state 63
    var                            shift and go to state 64
    proc3                          shift and go to state 62

state 57

    (16) proc2 -> , n_push_variable . proc2
    (16) proc2 -> . , n_push_variable proc2
    (17) proc2 -> . empty
    (139) empty -> .

    ,               shift and go to state 44
    )               reduce using rule 139 (empty -> .)

    empty                          shift and go to state 45
    proc2                          shift and go to state 66

state 58

    (136) map_definition -> MAP < datatype , . datatype >
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 67
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 59

    (27) var1 -> ID , var1 .

    INT             reduce using rule 27 (var1 -> ID , var1 .)
    FLOAT           reduce using rule 27 (var1 -> ID , var1 .)
    BOOL            reduce using rule 27 (var1 -> ID , var1 .)
    STRING          reduce using rule 27 (var1 -> ID , var1 .)
    CHAR            reduce using rule 27 (var1 -> ID , var1 .)
    VOID            reduce using rule 27 (var1 -> ID , var1 .)
    MAIN            reduce using rule 27 (var1 -> ID , var1 .)
    SET             reduce using rule 27 (var1 -> ID , var1 .)
    MAP             reduce using rule 27 (var1 -> ID , var1 .)
    READ            reduce using rule 27 (var1 -> ID , var1 .)
    PRINT           reduce using rule 27 (var1 -> ID , var1 .)
    ID              reduce using rule 27 (var1 -> ID , var1 .)
    RETURN          reduce using rule 27 (var1 -> ID , var1 .)
    IF              reduce using rule 27 (var1 -> ID , var1 .)
    WHILE           reduce using rule 27 (var1 -> ID , var1 .)
    }               reduce using rule 27 (var1 -> ID , var1 .)


state 60

    (27) var1 -> ID . , var1
    (28) var1 -> ID . ;

    ,               shift and go to state 52
    ;               shift and go to state 53


state 61

    (131) main -> MAIN n_clear_scope n_main_quad2 { . vars_aux statement_aux }
    (134) vars_aux -> . vars
    (135) vars_aux -> . empty
    (24) vars -> . var vars
    (25) vars -> . var
    (139) empty -> .
    (26) var -> . datatype var1
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 139 (empty -> .)
    PRINT           reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    }               reduce using rule 139 (empty -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 139 (empty -> .) ]

    set_definition                 shift and go to state 19
    vars                           shift and go to state 68
    datatype                       shift and go to state 65
    map_definition                 shift and go to state 7
    vars_aux                       shift and go to state 69
    var                            shift and go to state 70
    empty                          shift and go to state 71

state 62

    (13) procA -> proc1 ) { proc3 . }

    }               shift and go to state 72


state 63

    (20) proc3 -> n_quad_counter . proc4
    (22) proc4 -> . statement proc4
    (23) proc4 -> . empty
    (60) statement -> . statement1 ;
    (61) statement -> . statement2
    (139) empty -> .
    (62) statement1 -> . assignment
    (63) statement1 -> . input
    (64) statement1 -> . output
    (65) statement1 -> . container_operation
    (66) statement1 -> . map_definition
    (67) statement1 -> . return
    (68) statement1 -> . map_assignment
    (69) statement1 -> . function_call
    (70) statement2 -> . condition
    (71) statement2 -> . while
    (29) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (41) input -> . READ ( n_process_read input1 )
    (45) output -> . PRINT ( n_output_quad output1 )
    (58) container_operation -> . ID . OP_ARGS ( expression )
    (59) container_operation -> . ID . OP ( )
    (136) map_definition -> . MAP < datatype , datatype >
    (57) return -> . RETURN expression
    (138) map_assignment -> . map_access ASSIGNATOR n_quad_assign exp
    (49) function_call -> . n_era_size function_call1 )
    (32) condition -> . IF ( expression n_while_2 ) block condition1
    (37) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (30) assignment2 -> . ID
    (137) map_access -> . ID [ expression ]
    (50) n_era_size -> . ID (

    }               reduce using rule 139 (empty -> .)
    READ            shift and go to state 74
    PRINT           shift and go to state 78
    ID              shift and go to state 91
    MAP             shift and go to state 18
    RETURN          shift and go to state 73
    IF              shift and go to state 93
    WHILE           shift and go to state 77

    map_definition                 shift and go to state 75
    function_call                  shift and go to state 76
    proc4                          shift and go to state 79
    map_access                     shift and go to state 80
    assignment2                    shift and go to state 81
    statement                      shift and go to state 82
    input                          shift and go to state 83
    empty                          shift and go to state 84
    return                         shift and go to state 85
    statement2                     shift and go to state 86
    statement1                     shift and go to state 87
    n_era_size                     shift and go to state 88
    container_operation            shift and go to state 89
    assignment                     shift and go to state 90
    condition                      shift and go to state 92
    map_assignment                 shift and go to state 94
    while                          shift and go to state 95
    output                         shift and go to state 96

state 64

    (19) proc3 -> var . proc3
    (19) proc3 -> . var proc3
    (20) proc3 -> . n_quad_counter proc4
    (26) var -> . datatype var1
    (21) n_quad_counter -> .
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 21 (n_quad_counter -> .)
    PRINT           reduce using rule 21 (n_quad_counter -> .)
    ID              reduce using rule 21 (n_quad_counter -> .)
    RETURN          reduce using rule 21 (n_quad_counter -> .)
    IF              reduce using rule 21 (n_quad_counter -> .)
    WHILE           reduce using rule 21 (n_quad_counter -> .)
    }               reduce using rule 21 (n_quad_counter -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 21 (n_quad_counter -> .) ]

    set_definition                 shift and go to state 19
    datatype                       shift and go to state 65
    map_definition                 shift and go to state 7
    n_quad_counter                 shift and go to state 63
    var                            shift and go to state 64
    proc3                          shift and go to state 97

state 65

    (26) var -> datatype . var1
    (27) var1 -> . ID , var1
    (28) var1 -> . ID ;

    ID              shift and go to state 60

    var1                           shift and go to state 37

state 66

    (16) proc2 -> , n_push_variable proc2 .

    )               reduce using rule 16 (proc2 -> , n_push_variable proc2 .)


state 67

    (136) map_definition -> MAP < datatype , datatype . >

    >               shift and go to state 98


state 68

    (134) vars_aux -> vars .

    READ            reduce using rule 134 (vars_aux -> vars .)
    PRINT           reduce using rule 134 (vars_aux -> vars .)
    ID              reduce using rule 134 (vars_aux -> vars .)
    MAP             reduce using rule 134 (vars_aux -> vars .)
    RETURN          reduce using rule 134 (vars_aux -> vars .)
    IF              reduce using rule 134 (vars_aux -> vars .)
    WHILE           reduce using rule 134 (vars_aux -> vars .)
    }               reduce using rule 134 (vars_aux -> vars .)


state 69

    (131) main -> MAIN n_clear_scope n_main_quad2 { vars_aux . statement_aux }
    (129) statement_aux -> . statement statement_aux
    (130) statement_aux -> . empty
    (60) statement -> . statement1 ;
    (61) statement -> . statement2
    (139) empty -> .
    (62) statement1 -> . assignment
    (63) statement1 -> . input
    (64) statement1 -> . output
    (65) statement1 -> . container_operation
    (66) statement1 -> . map_definition
    (67) statement1 -> . return
    (68) statement1 -> . map_assignment
    (69) statement1 -> . function_call
    (70) statement2 -> . condition
    (71) statement2 -> . while
    (29) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (41) input -> . READ ( n_process_read input1 )
    (45) output -> . PRINT ( n_output_quad output1 )
    (58) container_operation -> . ID . OP_ARGS ( expression )
    (59) container_operation -> . ID . OP ( )
    (136) map_definition -> . MAP < datatype , datatype >
    (57) return -> . RETURN expression
    (138) map_assignment -> . map_access ASSIGNATOR n_quad_assign exp
    (49) function_call -> . n_era_size function_call1 )
    (32) condition -> . IF ( expression n_while_2 ) block condition1
    (37) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (30) assignment2 -> . ID
    (137) map_access -> . ID [ expression ]
    (50) n_era_size -> . ID (

    }               reduce using rule 139 (empty -> .)
    READ            shift and go to state 74
    PRINT           shift and go to state 78
    ID              shift and go to state 91
    MAP             shift and go to state 18
    RETURN          shift and go to state 73
    IF              shift and go to state 93
    WHILE           shift and go to state 77

    map_definition                 shift and go to state 75
    function_call                  shift and go to state 76
    statement_aux                  shift and go to state 99
    map_access                     shift and go to state 80
    assignment2                    shift and go to state 81
    statement                      shift and go to state 100
    input                          shift and go to state 83
    empty                          shift and go to state 101
    return                         shift and go to state 85
    statement2                     shift and go to state 86
    statement1                     shift and go to state 87
    n_era_size                     shift and go to state 88
    container_operation            shift and go to state 89
    assignment                     shift and go to state 90
    condition                      shift and go to state 92
    map_assignment                 shift and go to state 94
    while                          shift and go to state 95
    output                         shift and go to state 96

state 70

    (24) vars -> var . vars
    (25) vars -> var .
    (24) vars -> . var vars
    (25) vars -> . var
    (26) var -> . datatype var1
    (120) datatype -> . INT
    (121) datatype -> . FLOAT
    (122) datatype -> . BOOL
    (123) datatype -> . STRING
    (124) datatype -> . CHAR
    (125) datatype -> . set_definition
    (126) datatype -> . map_definition
    (127) set_definition -> . SET < datatype >
    (136) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 25 (vars -> var .)
    PRINT           reduce using rule 25 (vars -> var .)
    ID              reduce using rule 25 (vars -> var .)
    RETURN          reduce using rule 25 (vars -> var .)
    IF              reduce using rule 25 (vars -> var .)
    WHILE           reduce using rule 25 (vars -> var .)
    }               reduce using rule 25 (vars -> var .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 25 (vars -> var .) ]

    vars                           shift and go to state 102
    set_definition                 shift and go to state 19
    datatype                       shift and go to state 65
    map_definition                 shift and go to state 7
    var                            shift and go to state 70

state 71

    (135) vars_aux -> empty .

    READ            reduce using rule 135 (vars_aux -> empty .)
    PRINT           reduce using rule 135 (vars_aux -> empty .)
    ID              reduce using rule 135 (vars_aux -> empty .)
    MAP             reduce using rule 135 (vars_aux -> empty .)
    RETURN          reduce using rule 135 (vars_aux -> empty .)
    IF              reduce using rule 135 (vars_aux -> empty .)
    WHILE           reduce using rule 135 (vars_aux -> empty .)
    }               reduce using rule 135 (vars_aux -> empty .)


state 72

    (13) procA -> proc1 ) { proc3 } .

    VOID            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    MAIN            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    INT             reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    FLOAT           reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    BOOL            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    STRING          reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    CHAR            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    SET             reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    MAP             reduce using rule 13 (procA -> proc1 ) { proc3 } .)


state 73

    (57) return -> RETURN . expression
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    exp                            shift and go to state 107
    expression                     shift and go to state 108
    empty                          shift and go to state 109

state 74

    (41) input -> READ . ( n_process_read input1 )

    (               shift and go to state 110


state 75

    (66) statement1 -> map_definition .

    ;               reduce using rule 66 (statement1 -> map_definition .)


state 76

    (69) statement1 -> function_call .

    ;               reduce using rule 69 (statement1 -> function_call .)


state 77

    (37) while -> WHILE . n_while_1 ( expression ) n_while_2 block n_while_3
    (38) n_while_1 -> .

    (               reduce using rule 38 (n_while_1 -> .)

    n_while_1                      shift and go to state 111

state 78

    (45) output -> PRINT . ( n_output_quad output1 )

    (               shift and go to state 112


state 79

    (20) proc3 -> n_quad_counter proc4 .

    }               reduce using rule 20 (proc3 -> n_quad_counter proc4 .)


state 80

    (138) map_assignment -> map_access . ASSIGNATOR n_quad_assign exp

    ASSIGNATOR      shift and go to state 113


state 81

    (29) assignment -> assignment2 . ASSIGNATOR n_quad_assign expression

    ASSIGNATOR      shift and go to state 114


state 82

    (22) proc4 -> statement . proc4
    (22) proc4 -> . statement proc4
    (23) proc4 -> . empty
    (60) statement -> . statement1 ;
    (61) statement -> . statement2
    (139) empty -> .
    (62) statement1 -> . assignment
    (63) statement1 -> . input
    (64) statement1 -> . output
    (65) statement1 -> . container_operation
    (66) statement1 -> . map_definition
    (67) statement1 -> . return
    (68) statement1 -> . map_assignment
    (69) statement1 -> . function_call
    (70) statement2 -> . condition
    (71) statement2 -> . while
    (29) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (41) input -> . READ ( n_process_read input1 )
    (45) output -> . PRINT ( n_output_quad output1 )
    (58) container_operation -> . ID . OP_ARGS ( expression )
    (59) container_operation -> . ID . OP ( )
    (136) map_definition -> . MAP < datatype , datatype >
    (57) return -> . RETURN expression
    (138) map_assignment -> . map_access ASSIGNATOR n_quad_assign exp
    (49) function_call -> . n_era_size function_call1 )
    (32) condition -> . IF ( expression n_while_2 ) block condition1
    (37) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (30) assignment2 -> . ID
    (137) map_access -> . ID [ expression ]
    (50) n_era_size -> . ID (

    }               reduce using rule 139 (empty -> .)
    READ            shift and go to state 74
    PRINT           shift and go to state 78
    ID              shift and go to state 91
    MAP             shift and go to state 18
    RETURN          shift and go to state 73
    IF              shift and go to state 93
    WHILE           shift and go to state 77

    map_definition                 shift and go to state 75
    function_call                  shift and go to state 76
    proc4                          shift and go to state 115
    map_access                     shift and go to state 80
    assignment2                    shift and go to state 81
    statement                      shift and go to state 82
    input                          shift and go to state 83
    empty                          shift and go to state 84
    return                         shift and go to state 85
    statement2                     shift and go to state 86
    statement1                     shift and go to state 87
    n_era_size                     shift and go to state 88
    container_operation            shift and go to state 89
    assignment                     shift and go to state 90
    condition                      shift and go to state 92
    map_assignment                 shift and go to state 94
    while                          shift and go to state 95
    output                         shift and go to state 96

state 83

    (63) statement1 -> input .

    ;               reduce using rule 63 (statement1 -> input .)


state 84

    (23) proc4 -> empty .

    }               reduce using rule 23 (proc4 -> empty .)


state 85

    (67) statement1 -> return .

    ;               reduce using rule 67 (statement1 -> return .)


state 86

    (61) statement -> statement2 .

    READ            reduce using rule 61 (statement -> statement2 .)
    PRINT           reduce using rule 61 (statement -> statement2 .)
    ID              reduce using rule 61 (statement -> statement2 .)
    MAP             reduce using rule 61 (statement -> statement2 .)
    RETURN          reduce using rule 61 (statement -> statement2 .)
    IF              reduce using rule 61 (statement -> statement2 .)
    WHILE           reduce using rule 61 (statement -> statement2 .)
    }               reduce using rule 61 (statement -> statement2 .)


state 87

    (60) statement -> statement1 . ;

    ;               shift and go to state 116


state 88

    (49) function_call -> n_era_size . function_call1 )
    (51) function_call1 -> . empty
    (52) function_call1 -> . function_call2
    (139) empty -> .
    (53) function_call2 -> . n_verify_argument , n_add_one_to_counter function_call2
    (54) function_call2 -> . n_verify_argument
    (56) n_verify_argument -> . expression
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty

    )               reduce using rule 139 (empty -> .)
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)
    !               shift and go to state 106

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp                            shift and go to state 107
    exp0                           shift and go to state 105
    function_call2                 shift and go to state 117
    function_call1                 shift and go to state 118
    expression                     shift and go to state 119
    n_verify_argument              shift and go to state 120
    empty                          shift and go to state 121

state 89

    (65) statement1 -> container_operation .

    ;               reduce using rule 65 (statement1 -> container_operation .)


state 90

    (62) statement1 -> assignment .

    ;               reduce using rule 62 (statement1 -> assignment .)


state 91

    (58) container_operation -> ID . . OP_ARGS ( expression )
    (59) container_operation -> ID . . OP ( )
    (30) assignment2 -> ID .
    (137) map_access -> ID . [ expression ]
    (50) n_era_size -> ID . (

    .               shift and go to state 123
    ASSIGNATOR      reduce using rule 30 (assignment2 -> ID .)
    [               shift and go to state 124
    (               shift and go to state 122


state 92

    (70) statement2 -> condition .

    READ            reduce using rule 70 (statement2 -> condition .)
    PRINT           reduce using rule 70 (statement2 -> condition .)
    ID              reduce using rule 70 (statement2 -> condition .)
    MAP             reduce using rule 70 (statement2 -> condition .)
    RETURN          reduce using rule 70 (statement2 -> condition .)
    IF              reduce using rule 70 (statement2 -> condition .)
    WHILE           reduce using rule 70 (statement2 -> condition .)
    }               reduce using rule 70 (statement2 -> condition .)


state 93

    (32) condition -> IF . ( expression n_while_2 ) block condition1

    (               shift and go to state 125


state 94

    (68) statement1 -> map_assignment .

    ;               reduce using rule 68 (statement1 -> map_assignment .)


state 95

    (71) statement2 -> while .

    READ            reduce using rule 71 (statement2 -> while .)
    PRINT           reduce using rule 71 (statement2 -> while .)
    ID              reduce using rule 71 (statement2 -> while .)
    MAP             reduce using rule 71 (statement2 -> while .)
    RETURN          reduce using rule 71 (statement2 -> while .)
    IF              reduce using rule 71 (statement2 -> while .)
    WHILE           reduce using rule 71 (statement2 -> while .)
    }               reduce using rule 71 (statement2 -> while .)


state 96

    (64) statement1 -> output .

    ;               reduce using rule 64 (statement1 -> output .)


state 97

    (19) proc3 -> var proc3 .

    }               reduce using rule 19 (proc3 -> var proc3 .)


state 98

    (136) map_definition -> MAP < datatype , datatype > .

    ID              reduce using rule 136 (map_definition -> MAP < datatype , datatype > .)
    >               reduce using rule 136 (map_definition -> MAP < datatype , datatype > .)
    ;               reduce using rule 136 (map_definition -> MAP < datatype , datatype > .)
    ,               reduce using rule 136 (map_definition -> MAP < datatype , datatype > .)


state 99

    (131) main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux . }

    }               shift and go to state 126


state 100

    (129) statement_aux -> statement . statement_aux
    (129) statement_aux -> . statement statement_aux
    (130) statement_aux -> . empty
    (60) statement -> . statement1 ;
    (61) statement -> . statement2
    (139) empty -> .
    (62) statement1 -> . assignment
    (63) statement1 -> . input
    (64) statement1 -> . output
    (65) statement1 -> . container_operation
    (66) statement1 -> . map_definition
    (67) statement1 -> . return
    (68) statement1 -> . map_assignment
    (69) statement1 -> . function_call
    (70) statement2 -> . condition
    (71) statement2 -> . while
    (29) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (41) input -> . READ ( n_process_read input1 )
    (45) output -> . PRINT ( n_output_quad output1 )
    (58) container_operation -> . ID . OP_ARGS ( expression )
    (59) container_operation -> . ID . OP ( )
    (136) map_definition -> . MAP < datatype , datatype >
    (57) return -> . RETURN expression
    (138) map_assignment -> . map_access ASSIGNATOR n_quad_assign exp
    (49) function_call -> . n_era_size function_call1 )
    (32) condition -> . IF ( expression n_while_2 ) block condition1
    (37) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (30) assignment2 -> . ID
    (137) map_access -> . ID [ expression ]
    (50) n_era_size -> . ID (

    }               reduce using rule 139 (empty -> .)
    READ            shift and go to state 74
    PRINT           shift and go to state 78
    ID              shift and go to state 91
    MAP             shift and go to state 18
    RETURN          shift and go to state 73
    IF              shift and go to state 93
    WHILE           shift and go to state 77

    map_definition                 shift and go to state 75
    function_call                  shift and go to state 76
    statement_aux                  shift and go to state 127
    map_access                     shift and go to state 80
    assignment2                    shift and go to state 81
    statement                      shift and go to state 100
    input                          shift and go to state 83
    empty                          shift and go to state 101
    return                         shift and go to state 85
    statement2                     shift and go to state 86
    statement1                     shift and go to state 87
    n_era_size                     shift and go to state 88
    container_operation            shift and go to state 89
    assignment                     shift and go to state 90
    condition                      shift and go to state 92
    map_assignment                 shift and go to state 94
    while                          shift and go to state 95
    output                         shift and go to state 96

state 101

    (130) statement_aux -> empty .

    }               reduce using rule 130 (statement_aux -> empty .)


state 102

    (24) vars -> var vars .

    READ            reduce using rule 24 (vars -> var vars .)
    PRINT           reduce using rule 24 (vars -> var vars .)
    ID              reduce using rule 24 (vars -> var vars .)
    MAP             reduce using rule 24 (vars -> var vars .)
    RETURN          reduce using rule 24 (vars -> var vars .)
    IF              reduce using rule 24 (vars -> var vars .)
    WHILE           reduce using rule 24 (vars -> var vars .)
    }               reduce using rule 24 (vars -> var vars .)


state 103

    (96) term -> term_not . factor n_quad_muldiv term2
    (104) factor -> . ( n_push_false_bottom expression ) n_pop_false_bottom
    (105) factor -> . varcte
    (108) varcte -> . ID empty
    (109) varcte -> . varcte1
    (110) varcte1 -> . CTE_INT
    (111) varcte1 -> . CTE_FLOAT
    (112) varcte1 -> . CTE_BOOL
    (113) varcte1 -> . CTE_STRING
    (114) varcte1 -> . CTE_CHAR
    (115) varcte1 -> . function_call
    (116) varcte1 -> . map_access
    (117) varcte1 -> . container_operation
    (49) function_call -> . n_era_size function_call1 )
    (137) map_access -> . ID [ expression ]
    (58) container_operation -> . ID . OP_ARGS ( expression )
    (59) container_operation -> . ID . OP ( )
    (50) n_era_size -> . ID (

    (               shift and go to state 132
    ID              shift and go to state 137
    CTE_INT         shift and go to state 136
    CTE_FLOAT       shift and go to state 138
    CTE_BOOL        shift and go to state 139
    CTE_STRING      shift and go to state 140
    CTE_CHAR        shift and go to state 134

    n_era_size                     shift and go to state 88
    container_operation            shift and go to state 135
    map_access                     shift and go to state 131
    function_call                  shift and go to state 128
    factor                         shift and go to state 133
    varcte1                        shift and go to state 129
    varcte                         shift and go to state 130

state 104

    (87) exp -> term . exp2
    (94) exp2 -> . addsub term n_quad_addsub exp2
    (95) exp2 -> . empty
    (88) addsub -> . +
    (89) addsub -> . -
    (90) addsub -> . SET_MATH_ADDSUB
    (139) empty -> .

    +               shift and go to state 142
    -               shift and go to state 143
    SET_MATH_ADDSUB shift and go to state 145
    <               reduce using rule 139 (empty -> .)
    >               reduce using rule 139 (empty -> .)
    NOT_EQ          reduce using rule 139 (empty -> .)
    EQ              reduce using rule 139 (empty -> .)
    LEQ             reduce using rule 139 (empty -> .)
    GEQ             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    ;               reduce using rule 139 (empty -> .)
    ,               reduce using rule 139 (empty -> .)
    )               reduce using rule 139 (empty -> .)
    ]               reduce using rule 139 (empty -> .)

    exp2                           shift and go to state 141
    addsub                         shift and go to state 144
    empty                          shift and go to state 146

state 105

    (80) expression -> exp0 . expression2
    (81) expression2 -> . logop exp0 n_quad_logop expression2
    (82) expression2 -> . empty
    (78) logop -> . OR
    (79) logop -> . AND
    (139) empty -> .

    OR              shift and go to state 150
    AND             shift and go to state 147
    ;               reduce using rule 139 (empty -> .)
    ,               reduce using rule 139 (empty -> .)
    )               reduce using rule 139 (empty -> .)
    ]               reduce using rule 139 (empty -> .)

    empty                          shift and go to state 151
    expression2                    shift and go to state 149
    logop                          shift and go to state 148

state 106

    (102) term_not -> ! .

    (               reduce using rule 102 (term_not -> ! .)
    ID              reduce using rule 102 (term_not -> ! .)
    CTE_INT         reduce using rule 102 (term_not -> ! .)
    CTE_FLOAT       reduce using rule 102 (term_not -> ! .)
    CTE_BOOL        reduce using rule 102 (term_not -> ! .)
    CTE_STRING      reduce using rule 102 (term_not -> ! .)
    CTE_CHAR        reduce using rule 102 (term_not -> ! .)


state 107

    (84) exp0 -> exp . exp02
    (85) exp02 -> . relop exp
    (86) exp02 -> . empty
    (72) relop -> . <
    (73) relop -> . >
    (74) relop -> . NOT_EQ
    (75) relop -> . EQ
    (76) relop -> . LEQ
    (77) relop -> . GEQ
    (139) empty -> .

    <               shift and go to state 158
    >               shift and go to state 160
    NOT_EQ          shift and go to state 154
    EQ              shift and go to state 157
    LEQ             shift and go to state 155
    GEQ             shift and go to state 152
    OR              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    ;               reduce using rule 139 (empty -> .)
    ,               reduce using rule 139 (empty -> .)
    )               reduce using rule 139 (empty -> .)
    ]               reduce using rule 139 (empty -> .)

    exp02                          shift and go to state 156
    empty                          shift and go to state 159
    relop                          shift and go to state 153

state 108

    (57) return -> RETURN expression .

    ;               reduce using rule 57 (return -> RETURN expression .)


state 109

    (103) term_not -> empty .

    (               reduce using rule 103 (term_not -> empty .)
    ID              reduce using rule 103 (term_not -> empty .)
    CTE_INT         reduce using rule 103 (term_not -> empty .)
    CTE_FLOAT       reduce using rule 103 (term_not -> empty .)
    CTE_BOOL        reduce using rule 103 (term_not -> empty .)
    CTE_STRING      reduce using rule 103 (term_not -> empty .)
    CTE_CHAR        reduce using rule 103 (term_not -> empty .)


state 110

    (41) input -> READ ( . n_process_read input1 )
    (44) n_process_read -> . ID

    ID              shift and go to state 162

    n_process_read                 shift and go to state 161

state 111

    (37) while -> WHILE n_while_1 . ( expression ) n_while_2 block n_while_3

    (               shift and go to state 163


state 112

    (45) output -> PRINT ( . n_output_quad output1 )
    (48) n_output_quad -> . expression
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    n_output_quad                  shift and go to state 164
    exp                            shift and go to state 107
    expression                     shift and go to state 165
    empty                          shift and go to state 109

state 113

    (138) map_assignment -> map_access ASSIGNATOR . n_quad_assign exp
    (31) n_quad_assign -> .

    !               reduce using rule 31 (n_quad_assign -> .)
    (               reduce using rule 31 (n_quad_assign -> .)
    ID              reduce using rule 31 (n_quad_assign -> .)
    CTE_INT         reduce using rule 31 (n_quad_assign -> .)
    CTE_FLOAT       reduce using rule 31 (n_quad_assign -> .)
    CTE_BOOL        reduce using rule 31 (n_quad_assign -> .)
    CTE_STRING      reduce using rule 31 (n_quad_assign -> .)
    CTE_CHAR        reduce using rule 31 (n_quad_assign -> .)

    n_quad_assign                  shift and go to state 166

state 114

    (29) assignment -> assignment2 ASSIGNATOR . n_quad_assign expression
    (31) n_quad_assign -> .

    !               reduce using rule 31 (n_quad_assign -> .)
    (               reduce using rule 31 (n_quad_assign -> .)
    ID              reduce using rule 31 (n_quad_assign -> .)
    CTE_INT         reduce using rule 31 (n_quad_assign -> .)
    CTE_FLOAT       reduce using rule 31 (n_quad_assign -> .)
    CTE_BOOL        reduce using rule 31 (n_quad_assign -> .)
    CTE_STRING      reduce using rule 31 (n_quad_assign -> .)
    CTE_CHAR        reduce using rule 31 (n_quad_assign -> .)

    n_quad_assign                  shift and go to state 167

state 115

    (22) proc4 -> statement proc4 .

    }               reduce using rule 22 (proc4 -> statement proc4 .)


state 116

    (60) statement -> statement1 ; .

    READ            reduce using rule 60 (statement -> statement1 ; .)
    PRINT           reduce using rule 60 (statement -> statement1 ; .)
    ID              reduce using rule 60 (statement -> statement1 ; .)
    MAP             reduce using rule 60 (statement -> statement1 ; .)
    RETURN          reduce using rule 60 (statement -> statement1 ; .)
    IF              reduce using rule 60 (statement -> statement1 ; .)
    WHILE           reduce using rule 60 (statement -> statement1 ; .)
    }               reduce using rule 60 (statement -> statement1 ; .)


state 117

    (52) function_call1 -> function_call2 .

    )               reduce using rule 52 (function_call1 -> function_call2 .)


state 118

    (49) function_call -> n_era_size function_call1 . )

    )               shift and go to state 168


state 119

    (56) n_verify_argument -> expression .

    ,               reduce using rule 56 (n_verify_argument -> expression .)
    )               reduce using rule 56 (n_verify_argument -> expression .)


state 120

    (53) function_call2 -> n_verify_argument . , n_add_one_to_counter function_call2
    (54) function_call2 -> n_verify_argument .

    ,               shift and go to state 169
    )               reduce using rule 54 (function_call2 -> n_verify_argument .)


state 121

    (51) function_call1 -> empty .
    (103) term_not -> empty .

    )               reduce using rule 51 (function_call1 -> empty .)
    (               reduce using rule 103 (term_not -> empty .)
    ID              reduce using rule 103 (term_not -> empty .)
    CTE_INT         reduce using rule 103 (term_not -> empty .)
    CTE_FLOAT       reduce using rule 103 (term_not -> empty .)
    CTE_BOOL        reduce using rule 103 (term_not -> empty .)
    CTE_STRING      reduce using rule 103 (term_not -> empty .)
    CTE_CHAR        reduce using rule 103 (term_not -> empty .)


state 122

    (50) n_era_size -> ID ( .

    !               reduce using rule 50 (n_era_size -> ID ( .)
    )               reduce using rule 50 (n_era_size -> ID ( .)
    (               reduce using rule 50 (n_era_size -> ID ( .)
    ID              reduce using rule 50 (n_era_size -> ID ( .)
    CTE_INT         reduce using rule 50 (n_era_size -> ID ( .)
    CTE_FLOAT       reduce using rule 50 (n_era_size -> ID ( .)
    CTE_BOOL        reduce using rule 50 (n_era_size -> ID ( .)
    CTE_STRING      reduce using rule 50 (n_era_size -> ID ( .)
    CTE_CHAR        reduce using rule 50 (n_era_size -> ID ( .)


state 123

    (58) container_operation -> ID . . OP_ARGS ( expression )
    (59) container_operation -> ID . . OP ( )

    OP_ARGS         shift and go to state 170
    OP              shift and go to state 171


state 124

    (137) map_access -> ID [ . expression ]
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    exp                            shift and go to state 107
    expression                     shift and go to state 172
    empty                          shift and go to state 109

state 125

    (32) condition -> IF ( . expression n_while_2 ) block condition1
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp                            shift and go to state 107
    exp0                           shift and go to state 105
    empty                          shift and go to state 109
    expression                     shift and go to state 173

state 126

    (131) main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux } .

    $end            reduce using rule 131 (main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux } .)


state 127

    (129) statement_aux -> statement statement_aux .

    }               reduce using rule 129 (statement_aux -> statement statement_aux .)


state 128

    (115) varcte1 -> function_call .

    *               reduce using rule 115 (varcte1 -> function_call .)
    /               reduce using rule 115 (varcte1 -> function_call .)
    SET_MATH_MULDIV reduce using rule 115 (varcte1 -> function_call .)
    +               reduce using rule 115 (varcte1 -> function_call .)
    -               reduce using rule 115 (varcte1 -> function_call .)
    SET_MATH_ADDSUB reduce using rule 115 (varcte1 -> function_call .)
    <               reduce using rule 115 (varcte1 -> function_call .)
    >               reduce using rule 115 (varcte1 -> function_call .)
    NOT_EQ          reduce using rule 115 (varcte1 -> function_call .)
    EQ              reduce using rule 115 (varcte1 -> function_call .)
    LEQ             reduce using rule 115 (varcte1 -> function_call .)
    GEQ             reduce using rule 115 (varcte1 -> function_call .)
    OR              reduce using rule 115 (varcte1 -> function_call .)
    AND             reduce using rule 115 (varcte1 -> function_call .)
    ;               reduce using rule 115 (varcte1 -> function_call .)
    ,               reduce using rule 115 (varcte1 -> function_call .)
    )               reduce using rule 115 (varcte1 -> function_call .)
    ]               reduce using rule 115 (varcte1 -> function_call .)


state 129

    (109) varcte -> varcte1 .

    *               reduce using rule 109 (varcte -> varcte1 .)
    /               reduce using rule 109 (varcte -> varcte1 .)
    SET_MATH_MULDIV reduce using rule 109 (varcte -> varcte1 .)
    +               reduce using rule 109 (varcte -> varcte1 .)
    -               reduce using rule 109 (varcte -> varcte1 .)
    SET_MATH_ADDSUB reduce using rule 109 (varcte -> varcte1 .)
    <               reduce using rule 109 (varcte -> varcte1 .)
    >               reduce using rule 109 (varcte -> varcte1 .)
    NOT_EQ          reduce using rule 109 (varcte -> varcte1 .)
    EQ              reduce using rule 109 (varcte -> varcte1 .)
    LEQ             reduce using rule 109 (varcte -> varcte1 .)
    GEQ             reduce using rule 109 (varcte -> varcte1 .)
    OR              reduce using rule 109 (varcte -> varcte1 .)
    AND             reduce using rule 109 (varcte -> varcte1 .)
    ;               reduce using rule 109 (varcte -> varcte1 .)
    ,               reduce using rule 109 (varcte -> varcte1 .)
    )               reduce using rule 109 (varcte -> varcte1 .)
    ]               reduce using rule 109 (varcte -> varcte1 .)


state 130

    (105) factor -> varcte .

    *               reduce using rule 105 (factor -> varcte .)
    /               reduce using rule 105 (factor -> varcte .)
    SET_MATH_MULDIV reduce using rule 105 (factor -> varcte .)
    +               reduce using rule 105 (factor -> varcte .)
    -               reduce using rule 105 (factor -> varcte .)
    SET_MATH_ADDSUB reduce using rule 105 (factor -> varcte .)
    <               reduce using rule 105 (factor -> varcte .)
    >               reduce using rule 105 (factor -> varcte .)
    NOT_EQ          reduce using rule 105 (factor -> varcte .)
    EQ              reduce using rule 105 (factor -> varcte .)
    LEQ             reduce using rule 105 (factor -> varcte .)
    GEQ             reduce using rule 105 (factor -> varcte .)
    OR              reduce using rule 105 (factor -> varcte .)
    AND             reduce using rule 105 (factor -> varcte .)
    ;               reduce using rule 105 (factor -> varcte .)
    ,               reduce using rule 105 (factor -> varcte .)
    )               reduce using rule 105 (factor -> varcte .)
    ]               reduce using rule 105 (factor -> varcte .)


state 131

    (116) varcte1 -> map_access .

    *               reduce using rule 116 (varcte1 -> map_access .)
    /               reduce using rule 116 (varcte1 -> map_access .)
    SET_MATH_MULDIV reduce using rule 116 (varcte1 -> map_access .)
    +               reduce using rule 116 (varcte1 -> map_access .)
    -               reduce using rule 116 (varcte1 -> map_access .)
    SET_MATH_ADDSUB reduce using rule 116 (varcte1 -> map_access .)
    <               reduce using rule 116 (varcte1 -> map_access .)
    >               reduce using rule 116 (varcte1 -> map_access .)
    NOT_EQ          reduce using rule 116 (varcte1 -> map_access .)
    EQ              reduce using rule 116 (varcte1 -> map_access .)
    LEQ             reduce using rule 116 (varcte1 -> map_access .)
    GEQ             reduce using rule 116 (varcte1 -> map_access .)
    OR              reduce using rule 116 (varcte1 -> map_access .)
    AND             reduce using rule 116 (varcte1 -> map_access .)
    ;               reduce using rule 116 (varcte1 -> map_access .)
    ,               reduce using rule 116 (varcte1 -> map_access .)
    )               reduce using rule 116 (varcte1 -> map_access .)
    ]               reduce using rule 116 (varcte1 -> map_access .)


state 132

    (104) factor -> ( . n_push_false_bottom expression ) n_pop_false_bottom
    (106) n_push_false_bottom -> .

    !               reduce using rule 106 (n_push_false_bottom -> .)
    (               reduce using rule 106 (n_push_false_bottom -> .)
    ID              reduce using rule 106 (n_push_false_bottom -> .)
    CTE_INT         reduce using rule 106 (n_push_false_bottom -> .)
    CTE_FLOAT       reduce using rule 106 (n_push_false_bottom -> .)
    CTE_BOOL        reduce using rule 106 (n_push_false_bottom -> .)
    CTE_STRING      reduce using rule 106 (n_push_false_bottom -> .)
    CTE_CHAR        reduce using rule 106 (n_push_false_bottom -> .)

    n_push_false_bottom            shift and go to state 174

state 133

    (96) term -> term_not factor . n_quad_muldiv term2
    (97) n_quad_muldiv -> .

    *               reduce using rule 97 (n_quad_muldiv -> .)
    /               reduce using rule 97 (n_quad_muldiv -> .)
    SET_MATH_MULDIV reduce using rule 97 (n_quad_muldiv -> .)
    +               reduce using rule 97 (n_quad_muldiv -> .)
    -               reduce using rule 97 (n_quad_muldiv -> .)
    SET_MATH_ADDSUB reduce using rule 97 (n_quad_muldiv -> .)
    <               reduce using rule 97 (n_quad_muldiv -> .)
    >               reduce using rule 97 (n_quad_muldiv -> .)
    NOT_EQ          reduce using rule 97 (n_quad_muldiv -> .)
    EQ              reduce using rule 97 (n_quad_muldiv -> .)
    LEQ             reduce using rule 97 (n_quad_muldiv -> .)
    GEQ             reduce using rule 97 (n_quad_muldiv -> .)
    OR              reduce using rule 97 (n_quad_muldiv -> .)
    AND             reduce using rule 97 (n_quad_muldiv -> .)
    ;               reduce using rule 97 (n_quad_muldiv -> .)
    ,               reduce using rule 97 (n_quad_muldiv -> .)
    )               reduce using rule 97 (n_quad_muldiv -> .)
    ]               reduce using rule 97 (n_quad_muldiv -> .)

    n_quad_muldiv                  shift and go to state 175

state 134

    (114) varcte1 -> CTE_CHAR .

    *               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    /               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    SET_MATH_MULDIV reduce using rule 114 (varcte1 -> CTE_CHAR .)
    +               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    -               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    SET_MATH_ADDSUB reduce using rule 114 (varcte1 -> CTE_CHAR .)
    <               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    >               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    NOT_EQ          reduce using rule 114 (varcte1 -> CTE_CHAR .)
    EQ              reduce using rule 114 (varcte1 -> CTE_CHAR .)
    LEQ             reduce using rule 114 (varcte1 -> CTE_CHAR .)
    GEQ             reduce using rule 114 (varcte1 -> CTE_CHAR .)
    OR              reduce using rule 114 (varcte1 -> CTE_CHAR .)
    AND             reduce using rule 114 (varcte1 -> CTE_CHAR .)
    ;               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    ,               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    )               reduce using rule 114 (varcte1 -> CTE_CHAR .)
    ]               reduce using rule 114 (varcte1 -> CTE_CHAR .)


state 135

    (117) varcte1 -> container_operation .

    *               reduce using rule 117 (varcte1 -> container_operation .)
    /               reduce using rule 117 (varcte1 -> container_operation .)
    SET_MATH_MULDIV reduce using rule 117 (varcte1 -> container_operation .)
    +               reduce using rule 117 (varcte1 -> container_operation .)
    -               reduce using rule 117 (varcte1 -> container_operation .)
    SET_MATH_ADDSUB reduce using rule 117 (varcte1 -> container_operation .)
    <               reduce using rule 117 (varcte1 -> container_operation .)
    >               reduce using rule 117 (varcte1 -> container_operation .)
    NOT_EQ          reduce using rule 117 (varcte1 -> container_operation .)
    EQ              reduce using rule 117 (varcte1 -> container_operation .)
    LEQ             reduce using rule 117 (varcte1 -> container_operation .)
    GEQ             reduce using rule 117 (varcte1 -> container_operation .)
    OR              reduce using rule 117 (varcte1 -> container_operation .)
    AND             reduce using rule 117 (varcte1 -> container_operation .)
    ;               reduce using rule 117 (varcte1 -> container_operation .)
    ,               reduce using rule 117 (varcte1 -> container_operation .)
    )               reduce using rule 117 (varcte1 -> container_operation .)
    ]               reduce using rule 117 (varcte1 -> container_operation .)


state 136

    (110) varcte1 -> CTE_INT .

    *               reduce using rule 110 (varcte1 -> CTE_INT .)
    /               reduce using rule 110 (varcte1 -> CTE_INT .)
    SET_MATH_MULDIV reduce using rule 110 (varcte1 -> CTE_INT .)
    +               reduce using rule 110 (varcte1 -> CTE_INT .)
    -               reduce using rule 110 (varcte1 -> CTE_INT .)
    SET_MATH_ADDSUB reduce using rule 110 (varcte1 -> CTE_INT .)
    <               reduce using rule 110 (varcte1 -> CTE_INT .)
    >               reduce using rule 110 (varcte1 -> CTE_INT .)
    NOT_EQ          reduce using rule 110 (varcte1 -> CTE_INT .)
    EQ              reduce using rule 110 (varcte1 -> CTE_INT .)
    LEQ             reduce using rule 110 (varcte1 -> CTE_INT .)
    GEQ             reduce using rule 110 (varcte1 -> CTE_INT .)
    OR              reduce using rule 110 (varcte1 -> CTE_INT .)
    AND             reduce using rule 110 (varcte1 -> CTE_INT .)
    ;               reduce using rule 110 (varcte1 -> CTE_INT .)
    ,               reduce using rule 110 (varcte1 -> CTE_INT .)
    )               reduce using rule 110 (varcte1 -> CTE_INT .)
    ]               reduce using rule 110 (varcte1 -> CTE_INT .)


state 137

    (108) varcte -> ID . empty
    (137) map_access -> ID . [ expression ]
    (58) container_operation -> ID . . OP_ARGS ( expression )
    (59) container_operation -> ID . . OP ( )
    (50) n_era_size -> ID . (
    (139) empty -> .

    [               shift and go to state 124
    .               shift and go to state 123
    (               shift and go to state 122
    *               reduce using rule 139 (empty -> .)
    /               reduce using rule 139 (empty -> .)
    SET_MATH_MULDIV reduce using rule 139 (empty -> .)
    +               reduce using rule 139 (empty -> .)
    -               reduce using rule 139 (empty -> .)
    SET_MATH_ADDSUB reduce using rule 139 (empty -> .)
    <               reduce using rule 139 (empty -> .)
    >               reduce using rule 139 (empty -> .)
    NOT_EQ          reduce using rule 139 (empty -> .)
    EQ              reduce using rule 139 (empty -> .)
    LEQ             reduce using rule 139 (empty -> .)
    GEQ             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    ;               reduce using rule 139 (empty -> .)
    ,               reduce using rule 139 (empty -> .)
    )               reduce using rule 139 (empty -> .)
    ]               reduce using rule 139 (empty -> .)

    empty                          shift and go to state 176

state 138

    (111) varcte1 -> CTE_FLOAT .

    *               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    /               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    SET_MATH_MULDIV reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    +               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    -               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    SET_MATH_ADDSUB reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    <               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    >               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    NOT_EQ          reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    EQ              reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    LEQ             reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    GEQ             reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    OR              reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    AND             reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    ;               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    ,               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    )               reduce using rule 111 (varcte1 -> CTE_FLOAT .)
    ]               reduce using rule 111 (varcte1 -> CTE_FLOAT .)


state 139

    (112) varcte1 -> CTE_BOOL .

    *               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    /               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    SET_MATH_MULDIV reduce using rule 112 (varcte1 -> CTE_BOOL .)
    +               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    -               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    SET_MATH_ADDSUB reduce using rule 112 (varcte1 -> CTE_BOOL .)
    <               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    >               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    NOT_EQ          reduce using rule 112 (varcte1 -> CTE_BOOL .)
    EQ              reduce using rule 112 (varcte1 -> CTE_BOOL .)
    LEQ             reduce using rule 112 (varcte1 -> CTE_BOOL .)
    GEQ             reduce using rule 112 (varcte1 -> CTE_BOOL .)
    OR              reduce using rule 112 (varcte1 -> CTE_BOOL .)
    AND             reduce using rule 112 (varcte1 -> CTE_BOOL .)
    ;               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    ,               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    )               reduce using rule 112 (varcte1 -> CTE_BOOL .)
    ]               reduce using rule 112 (varcte1 -> CTE_BOOL .)


state 140

    (113) varcte1 -> CTE_STRING .

    *               reduce using rule 113 (varcte1 -> CTE_STRING .)
    /               reduce using rule 113 (varcte1 -> CTE_STRING .)
    SET_MATH_MULDIV reduce using rule 113 (varcte1 -> CTE_STRING .)
    +               reduce using rule 113 (varcte1 -> CTE_STRING .)
    -               reduce using rule 113 (varcte1 -> CTE_STRING .)
    SET_MATH_ADDSUB reduce using rule 113 (varcte1 -> CTE_STRING .)
    <               reduce using rule 113 (varcte1 -> CTE_STRING .)
    >               reduce using rule 113 (varcte1 -> CTE_STRING .)
    NOT_EQ          reduce using rule 113 (varcte1 -> CTE_STRING .)
    EQ              reduce using rule 113 (varcte1 -> CTE_STRING .)
    LEQ             reduce using rule 113 (varcte1 -> CTE_STRING .)
    GEQ             reduce using rule 113 (varcte1 -> CTE_STRING .)
    OR              reduce using rule 113 (varcte1 -> CTE_STRING .)
    AND             reduce using rule 113 (varcte1 -> CTE_STRING .)
    ;               reduce using rule 113 (varcte1 -> CTE_STRING .)
    ,               reduce using rule 113 (varcte1 -> CTE_STRING .)
    )               reduce using rule 113 (varcte1 -> CTE_STRING .)
    ]               reduce using rule 113 (varcte1 -> CTE_STRING .)


state 141

    (87) exp -> term exp2 .

    <               reduce using rule 87 (exp -> term exp2 .)
    >               reduce using rule 87 (exp -> term exp2 .)
    NOT_EQ          reduce using rule 87 (exp -> term exp2 .)
    EQ              reduce using rule 87 (exp -> term exp2 .)
    LEQ             reduce using rule 87 (exp -> term exp2 .)
    GEQ             reduce using rule 87 (exp -> term exp2 .)
    OR              reduce using rule 87 (exp -> term exp2 .)
    AND             reduce using rule 87 (exp -> term exp2 .)
    ]               reduce using rule 87 (exp -> term exp2 .)
    )               reduce using rule 87 (exp -> term exp2 .)
    ;               reduce using rule 87 (exp -> term exp2 .)
    ,               reduce using rule 87 (exp -> term exp2 .)


state 142

    (88) addsub -> + .

    !               reduce using rule 88 (addsub -> + .)
    (               reduce using rule 88 (addsub -> + .)
    ID              reduce using rule 88 (addsub -> + .)
    CTE_INT         reduce using rule 88 (addsub -> + .)
    CTE_FLOAT       reduce using rule 88 (addsub -> + .)
    CTE_BOOL        reduce using rule 88 (addsub -> + .)
    CTE_STRING      reduce using rule 88 (addsub -> + .)
    CTE_CHAR        reduce using rule 88 (addsub -> + .)


state 143

    (89) addsub -> - .

    !               reduce using rule 89 (addsub -> - .)
    (               reduce using rule 89 (addsub -> - .)
    ID              reduce using rule 89 (addsub -> - .)
    CTE_INT         reduce using rule 89 (addsub -> - .)
    CTE_FLOAT       reduce using rule 89 (addsub -> - .)
    CTE_BOOL        reduce using rule 89 (addsub -> - .)
    CTE_STRING      reduce using rule 89 (addsub -> - .)
    CTE_CHAR        reduce using rule 89 (addsub -> - .)


state 144

    (94) exp2 -> addsub . term n_quad_addsub exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 177
    empty                          shift and go to state 109

state 145

    (90) addsub -> SET_MATH_ADDSUB .

    !               reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)
    (               reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)
    ID              reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)
    CTE_INT         reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)
    CTE_FLOAT       reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)
    CTE_BOOL        reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)
    CTE_STRING      reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)
    CTE_CHAR        reduce using rule 90 (addsub -> SET_MATH_ADDSUB .)


state 146

    (95) exp2 -> empty .

    <               reduce using rule 95 (exp2 -> empty .)
    >               reduce using rule 95 (exp2 -> empty .)
    NOT_EQ          reduce using rule 95 (exp2 -> empty .)
    EQ              reduce using rule 95 (exp2 -> empty .)
    LEQ             reduce using rule 95 (exp2 -> empty .)
    GEQ             reduce using rule 95 (exp2 -> empty .)
    OR              reduce using rule 95 (exp2 -> empty .)
    AND             reduce using rule 95 (exp2 -> empty .)
    ;               reduce using rule 95 (exp2 -> empty .)
    ,               reduce using rule 95 (exp2 -> empty .)
    )               reduce using rule 95 (exp2 -> empty .)
    ]               reduce using rule 95 (exp2 -> empty .)


state 147

    (79) logop -> AND .

    !               reduce using rule 79 (logop -> AND .)
    (               reduce using rule 79 (logop -> AND .)
    ID              reduce using rule 79 (logop -> AND .)
    CTE_INT         reduce using rule 79 (logop -> AND .)
    CTE_FLOAT       reduce using rule 79 (logop -> AND .)
    CTE_BOOL        reduce using rule 79 (logop -> AND .)
    CTE_STRING      reduce using rule 79 (logop -> AND .)
    CTE_CHAR        reduce using rule 79 (logop -> AND .)


state 148

    (81) expression2 -> logop . exp0 n_quad_logop expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    exp0                           shift and go to state 178
    term                           shift and go to state 104
    exp                            shift and go to state 107
    empty                          shift and go to state 109

state 149

    (80) expression -> exp0 expression2 .

    )               reduce using rule 80 (expression -> exp0 expression2 .)
    ,               reduce using rule 80 (expression -> exp0 expression2 .)
    ]               reduce using rule 80 (expression -> exp0 expression2 .)
    ;               reduce using rule 80 (expression -> exp0 expression2 .)


state 150

    (78) logop -> OR .

    !               reduce using rule 78 (logop -> OR .)
    (               reduce using rule 78 (logop -> OR .)
    ID              reduce using rule 78 (logop -> OR .)
    CTE_INT         reduce using rule 78 (logop -> OR .)
    CTE_FLOAT       reduce using rule 78 (logop -> OR .)
    CTE_BOOL        reduce using rule 78 (logop -> OR .)
    CTE_STRING      reduce using rule 78 (logop -> OR .)
    CTE_CHAR        reduce using rule 78 (logop -> OR .)


state 151

    (82) expression2 -> empty .

    ;               reduce using rule 82 (expression2 -> empty .)
    ,               reduce using rule 82 (expression2 -> empty .)
    )               reduce using rule 82 (expression2 -> empty .)
    ]               reduce using rule 82 (expression2 -> empty .)


state 152

    (77) relop -> GEQ .

    !               reduce using rule 77 (relop -> GEQ .)
    (               reduce using rule 77 (relop -> GEQ .)
    ID              reduce using rule 77 (relop -> GEQ .)
    CTE_INT         reduce using rule 77 (relop -> GEQ .)
    CTE_FLOAT       reduce using rule 77 (relop -> GEQ .)
    CTE_BOOL        reduce using rule 77 (relop -> GEQ .)
    CTE_STRING      reduce using rule 77 (relop -> GEQ .)
    CTE_CHAR        reduce using rule 77 (relop -> GEQ .)


state 153

    (85) exp02 -> relop . exp
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp                            shift and go to state 179
    empty                          shift and go to state 109

state 154

    (74) relop -> NOT_EQ .

    !               reduce using rule 74 (relop -> NOT_EQ .)
    (               reduce using rule 74 (relop -> NOT_EQ .)
    ID              reduce using rule 74 (relop -> NOT_EQ .)
    CTE_INT         reduce using rule 74 (relop -> NOT_EQ .)
    CTE_FLOAT       reduce using rule 74 (relop -> NOT_EQ .)
    CTE_BOOL        reduce using rule 74 (relop -> NOT_EQ .)
    CTE_STRING      reduce using rule 74 (relop -> NOT_EQ .)
    CTE_CHAR        reduce using rule 74 (relop -> NOT_EQ .)


state 155

    (76) relop -> LEQ .

    !               reduce using rule 76 (relop -> LEQ .)
    (               reduce using rule 76 (relop -> LEQ .)
    ID              reduce using rule 76 (relop -> LEQ .)
    CTE_INT         reduce using rule 76 (relop -> LEQ .)
    CTE_FLOAT       reduce using rule 76 (relop -> LEQ .)
    CTE_BOOL        reduce using rule 76 (relop -> LEQ .)
    CTE_STRING      reduce using rule 76 (relop -> LEQ .)
    CTE_CHAR        reduce using rule 76 (relop -> LEQ .)


state 156

    (84) exp0 -> exp exp02 .

    OR              reduce using rule 84 (exp0 -> exp exp02 .)
    AND             reduce using rule 84 (exp0 -> exp exp02 .)
    )               reduce using rule 84 (exp0 -> exp exp02 .)
    ;               reduce using rule 84 (exp0 -> exp exp02 .)
    ,               reduce using rule 84 (exp0 -> exp exp02 .)
    ]               reduce using rule 84 (exp0 -> exp exp02 .)


state 157

    (75) relop -> EQ .

    !               reduce using rule 75 (relop -> EQ .)
    (               reduce using rule 75 (relop -> EQ .)
    ID              reduce using rule 75 (relop -> EQ .)
    CTE_INT         reduce using rule 75 (relop -> EQ .)
    CTE_FLOAT       reduce using rule 75 (relop -> EQ .)
    CTE_BOOL        reduce using rule 75 (relop -> EQ .)
    CTE_STRING      reduce using rule 75 (relop -> EQ .)
    CTE_CHAR        reduce using rule 75 (relop -> EQ .)


state 158

    (72) relop -> < .

    !               reduce using rule 72 (relop -> < .)
    (               reduce using rule 72 (relop -> < .)
    ID              reduce using rule 72 (relop -> < .)
    CTE_INT         reduce using rule 72 (relop -> < .)
    CTE_FLOAT       reduce using rule 72 (relop -> < .)
    CTE_BOOL        reduce using rule 72 (relop -> < .)
    CTE_STRING      reduce using rule 72 (relop -> < .)
    CTE_CHAR        reduce using rule 72 (relop -> < .)


state 159

    (86) exp02 -> empty .

    OR              reduce using rule 86 (exp02 -> empty .)
    AND             reduce using rule 86 (exp02 -> empty .)
    ;               reduce using rule 86 (exp02 -> empty .)
    ,               reduce using rule 86 (exp02 -> empty .)
    )               reduce using rule 86 (exp02 -> empty .)
    ]               reduce using rule 86 (exp02 -> empty .)


state 160

    (73) relop -> > .

    !               reduce using rule 73 (relop -> > .)
    (               reduce using rule 73 (relop -> > .)
    ID              reduce using rule 73 (relop -> > .)
    CTE_INT         reduce using rule 73 (relop -> > .)
    CTE_FLOAT       reduce using rule 73 (relop -> > .)
    CTE_BOOL        reduce using rule 73 (relop -> > .)
    CTE_STRING      reduce using rule 73 (relop -> > .)
    CTE_CHAR        reduce using rule 73 (relop -> > .)


state 161

    (41) input -> READ ( n_process_read . input1 )
    (42) input1 -> . , n_process_read input1
    (43) input1 -> . empty
    (139) empty -> .

    ,               shift and go to state 181
    )               reduce using rule 139 (empty -> .)

    input1                         shift and go to state 180
    empty                          shift and go to state 182

state 162

    (44) n_process_read -> ID .

    ,               reduce using rule 44 (n_process_read -> ID .)
    )               reduce using rule 44 (n_process_read -> ID .)


state 163

    (37) while -> WHILE n_while_1 ( . expression ) n_while_2 block n_while_3
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp                            shift and go to state 107
    exp0                           shift and go to state 105
    empty                          shift and go to state 109
    expression                     shift and go to state 183

state 164

    (45) output -> PRINT ( n_output_quad . output1 )
    (46) output1 -> . , n_output_quad output1
    (47) output1 -> . empty
    (139) empty -> .

    ,               shift and go to state 185
    )               reduce using rule 139 (empty -> .)

    output1                        shift and go to state 184
    empty                          shift and go to state 186

state 165

    (48) n_output_quad -> expression .

    ,               reduce using rule 48 (n_output_quad -> expression .)
    )               reduce using rule 48 (n_output_quad -> expression .)


state 166

    (138) map_assignment -> map_access ASSIGNATOR n_quad_assign . exp
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp                            shift and go to state 187
    empty                          shift and go to state 109

state 167

    (29) assignment -> assignment2 ASSIGNATOR n_quad_assign . expression
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    exp                            shift and go to state 107
    expression                     shift and go to state 188
    empty                          shift and go to state 109

state 168

    (49) function_call -> n_era_size function_call1 ) .

    ;               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    *               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    /               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    SET_MATH_MULDIV reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    +               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    -               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    SET_MATH_ADDSUB reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    <               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    >               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    NOT_EQ          reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    EQ              reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    LEQ             reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    GEQ             reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    OR              reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    AND             reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    ,               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    )               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)
    ]               reduce using rule 49 (function_call -> n_era_size function_call1 ) .)


state 169

    (53) function_call2 -> n_verify_argument , . n_add_one_to_counter function_call2
    (55) n_add_one_to_counter -> .

    !               reduce using rule 55 (n_add_one_to_counter -> .)
    (               reduce using rule 55 (n_add_one_to_counter -> .)
    ID              reduce using rule 55 (n_add_one_to_counter -> .)
    CTE_INT         reduce using rule 55 (n_add_one_to_counter -> .)
    CTE_FLOAT       reduce using rule 55 (n_add_one_to_counter -> .)
    CTE_BOOL        reduce using rule 55 (n_add_one_to_counter -> .)
    CTE_STRING      reduce using rule 55 (n_add_one_to_counter -> .)
    CTE_CHAR        reduce using rule 55 (n_add_one_to_counter -> .)

    n_add_one_to_counter           shift and go to state 189

state 170

    (58) container_operation -> ID . OP_ARGS . ( expression )

    (               shift and go to state 190


state 171

    (59) container_operation -> ID . OP . ( )

    (               shift and go to state 191


state 172

    (137) map_access -> ID [ expression . ]

    ]               shift and go to state 192


state 173

    (32) condition -> IF ( expression . n_while_2 ) block condition1
    (39) n_while_2 -> .

    )               reduce using rule 39 (n_while_2 -> .)

    n_while_2                      shift and go to state 193

state 174

    (104) factor -> ( n_push_false_bottom . expression ) n_pop_false_bottom
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    exp                            shift and go to state 107
    expression                     shift and go to state 194
    empty                          shift and go to state 109

state 175

    (96) term -> term_not factor n_quad_muldiv . term2
    (99) term2 -> . muldiv factor n_quad_muldiv term2
    (100) term2 -> . n_quad_not
    (91) muldiv -> . *
    (92) muldiv -> . /
    (93) muldiv -> . SET_MATH_MULDIV
    (101) n_quad_not -> .

    *               shift and go to state 197
    /               shift and go to state 199
    SET_MATH_MULDIV shift and go to state 195
    +               reduce using rule 101 (n_quad_not -> .)
    -               reduce using rule 101 (n_quad_not -> .)
    SET_MATH_ADDSUB reduce using rule 101 (n_quad_not -> .)
    <               reduce using rule 101 (n_quad_not -> .)
    >               reduce using rule 101 (n_quad_not -> .)
    NOT_EQ          reduce using rule 101 (n_quad_not -> .)
    EQ              reduce using rule 101 (n_quad_not -> .)
    LEQ             reduce using rule 101 (n_quad_not -> .)
    GEQ             reduce using rule 101 (n_quad_not -> .)
    OR              reduce using rule 101 (n_quad_not -> .)
    AND             reduce using rule 101 (n_quad_not -> .)
    ;               reduce using rule 101 (n_quad_not -> .)
    ,               reduce using rule 101 (n_quad_not -> .)
    )               reduce using rule 101 (n_quad_not -> .)
    ]               reduce using rule 101 (n_quad_not -> .)

    term2                          shift and go to state 196
    n_quad_not                     shift and go to state 198
    muldiv                         shift and go to state 200

state 176

    (108) varcte -> ID empty .

    *               reduce using rule 108 (varcte -> ID empty .)
    /               reduce using rule 108 (varcte -> ID empty .)
    SET_MATH_MULDIV reduce using rule 108 (varcte -> ID empty .)
    +               reduce using rule 108 (varcte -> ID empty .)
    -               reduce using rule 108 (varcte -> ID empty .)
    SET_MATH_ADDSUB reduce using rule 108 (varcte -> ID empty .)
    <               reduce using rule 108 (varcte -> ID empty .)
    >               reduce using rule 108 (varcte -> ID empty .)
    NOT_EQ          reduce using rule 108 (varcte -> ID empty .)
    EQ              reduce using rule 108 (varcte -> ID empty .)
    LEQ             reduce using rule 108 (varcte -> ID empty .)
    GEQ             reduce using rule 108 (varcte -> ID empty .)
    OR              reduce using rule 108 (varcte -> ID empty .)
    AND             reduce using rule 108 (varcte -> ID empty .)
    ;               reduce using rule 108 (varcte -> ID empty .)
    ,               reduce using rule 108 (varcte -> ID empty .)
    )               reduce using rule 108 (varcte -> ID empty .)
    ]               reduce using rule 108 (varcte -> ID empty .)


state 177

    (94) exp2 -> addsub term . n_quad_addsub exp2
    (98) n_quad_addsub -> .

    +               reduce using rule 98 (n_quad_addsub -> .)
    -               reduce using rule 98 (n_quad_addsub -> .)
    SET_MATH_ADDSUB reduce using rule 98 (n_quad_addsub -> .)
    <               reduce using rule 98 (n_quad_addsub -> .)
    >               reduce using rule 98 (n_quad_addsub -> .)
    NOT_EQ          reduce using rule 98 (n_quad_addsub -> .)
    EQ              reduce using rule 98 (n_quad_addsub -> .)
    LEQ             reduce using rule 98 (n_quad_addsub -> .)
    GEQ             reduce using rule 98 (n_quad_addsub -> .)
    OR              reduce using rule 98 (n_quad_addsub -> .)
    AND             reduce using rule 98 (n_quad_addsub -> .)
    ;               reduce using rule 98 (n_quad_addsub -> .)
    ,               reduce using rule 98 (n_quad_addsub -> .)
    )               reduce using rule 98 (n_quad_addsub -> .)
    ]               reduce using rule 98 (n_quad_addsub -> .)

    n_quad_addsub                  shift and go to state 201

state 178

    (81) expression2 -> logop exp0 . n_quad_logop expression2
    (83) n_quad_logop -> .

    OR              reduce using rule 83 (n_quad_logop -> .)
    AND             reduce using rule 83 (n_quad_logop -> .)
    ;               reduce using rule 83 (n_quad_logop -> .)
    ,               reduce using rule 83 (n_quad_logop -> .)
    )               reduce using rule 83 (n_quad_logop -> .)
    ]               reduce using rule 83 (n_quad_logop -> .)

    n_quad_logop                   shift and go to state 202

state 179

    (85) exp02 -> relop exp .

    OR              reduce using rule 85 (exp02 -> relop exp .)
    AND             reduce using rule 85 (exp02 -> relop exp .)
    ;               reduce using rule 85 (exp02 -> relop exp .)
    ,               reduce using rule 85 (exp02 -> relop exp .)
    )               reduce using rule 85 (exp02 -> relop exp .)
    ]               reduce using rule 85 (exp02 -> relop exp .)


state 180

    (41) input -> READ ( n_process_read input1 . )

    )               shift and go to state 203


state 181

    (42) input1 -> , . n_process_read input1
    (44) n_process_read -> . ID

    ID              shift and go to state 162

    n_process_read                 shift and go to state 204

state 182

    (43) input1 -> empty .

    )               reduce using rule 43 (input1 -> empty .)


state 183

    (37) while -> WHILE n_while_1 ( expression . ) n_while_2 block n_while_3

    )               shift and go to state 205


state 184

    (45) output -> PRINT ( n_output_quad output1 . )

    )               shift and go to state 206


state 185

    (46) output1 -> , . n_output_quad output1
    (48) n_output_quad -> . expression
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    n_output_quad                  shift and go to state 207
    exp                            shift and go to state 107
    expression                     shift and go to state 165
    empty                          shift and go to state 109

state 186

    (47) output1 -> empty .

    )               reduce using rule 47 (output1 -> empty .)


state 187

    (138) map_assignment -> map_access ASSIGNATOR n_quad_assign exp .

    ;               reduce using rule 138 (map_assignment -> map_access ASSIGNATOR n_quad_assign exp .)


state 188

    (29) assignment -> assignment2 ASSIGNATOR n_quad_assign expression .

    ;               reduce using rule 29 (assignment -> assignment2 ASSIGNATOR n_quad_assign expression .)


state 189

    (53) function_call2 -> n_verify_argument , n_add_one_to_counter . function_call2
    (53) function_call2 -> . n_verify_argument , n_add_one_to_counter function_call2
    (54) function_call2 -> . n_verify_argument
    (56) n_verify_argument -> . expression
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    function_call2                 shift and go to state 208
    exp                            shift and go to state 107
    expression                     shift and go to state 119
    n_verify_argument              shift and go to state 120
    empty                          shift and go to state 109

state 190

    (58) container_operation -> ID . OP_ARGS ( . expression )
    (80) expression -> . exp0 expression2
    (84) exp0 -> . exp exp02
    (87) exp -> . term exp2
    (96) term -> . term_not factor n_quad_muldiv term2
    (102) term_not -> . !
    (103) term_not -> . empty
    (139) empty -> .

    !               shift and go to state 106
    (               reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    CTE_INT         reduce using rule 139 (empty -> .)
    CTE_FLOAT       reduce using rule 139 (empty -> .)
    CTE_BOOL        reduce using rule 139 (empty -> .)
    CTE_STRING      reduce using rule 139 (empty -> .)
    CTE_CHAR        reduce using rule 139 (empty -> .)

    term_not                       shift and go to state 103
    term                           shift and go to state 104
    exp0                           shift and go to state 105
    exp                            shift and go to state 107
    expression                     shift and go to state 209
    empty                          shift and go to state 109

state 191

    (59) container_operation -> ID . OP ( . )

    )               shift and go to state 210


state 192

    (137) map_access -> ID [ expression ] .

    ASSIGNATOR      reduce using rule 137 (map_access -> ID [ expression ] .)
    *               reduce using rule 137 (map_access -> ID [ expression ] .)
    /               reduce using rule 137 (map_access -> ID [ expression ] .)
    SET_MATH_MULDIV reduce using rule 137 (map_access -> ID [ expression ] .)
    +               reduce using rule 137 (map_access -> ID [ expression ] .)
    -               reduce using rule 137 (map_access -> ID [ expression ] .)
    SET_MATH_ADDSUB reduce using rule 137 (map_access -> ID [ expression ] .)
    <               reduce using rule 137 (map_access -> ID [ expression ] .)
    >               reduce using rule 137 (map_access -> ID [ expression ] .)
    NOT_EQ          reduce using rule 137 (map_access -> ID [ expression ] .)
    EQ              reduce using rule 137 (map_access -> ID [ expression ] .)
    LEQ             reduce using rule 137 (map_access -> ID [ expression ] .)
    GEQ             reduce using rule 137 (map_access -> ID [ expression ] .)
    OR              reduce using rule 137 (map_access -> ID [ expression ] .)
    AND             reduce using rule 137 (map_access -> ID [ expression ] .)
    ;               reduce using rule 137 (map_access -> ID [ expression ] .)
    ,               reduce using rule 137 (map_access -> ID [ expression ] .)
    )               reduce using rule 137 (map_access -> ID [ expression ] .)
    ]               reduce using rule 137 (map_access -> ID [ expression ] .)


state 193

    (32) condition -> IF ( expression n_while_2 . ) block condition1

    )               shift and go to state 211


state 194

    (104) factor -> ( n_push_false_bottom expression . ) n_pop_false_bottom

    )               shift and go to state 212


state 195

    (93) muldiv -> SET_MATH_MULDIV .

    (               reduce using rule 93 (muldiv -> SET_MATH_MULDIV .)
    ID              reduce using rule 93 (muldiv -> SET_MATH_MULDIV .)
    CTE_INT         reduce using rule 93 (muldiv -> SET_MATH_MULDIV .)
    CTE_FLOAT       reduce using rule 93 (muldiv -> SET_MATH_MULDIV .)
    CTE_BOOL        reduce using rule 93 (muldiv -> SET_MATH_MULDIV .)
    CTE_STRING      reduce using rule 93 (muldiv -> SET_MATH_MULDIV .)
    CTE_CHAR        reduce using rule 93 (muldiv -> SET_MATH_MULDIV .)


state 196

    (96) term -> term_not factor n_quad_muldiv term2 .

    +               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    -               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    SET_MATH_ADDSUB reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    <               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    >               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    NOT_EQ          reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    EQ              reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    LEQ             reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    GEQ             reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    OR              reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    AND             reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    ;               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    ,               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    )               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)
    ]               reduce using rule 96 (term -> term_not factor n_quad_muldiv term2 .)


state 197

    (91) muldiv -> * .

    (               reduce using rule 91 (muldiv -> * .)
    ID              reduce using rule 91 (muldiv -> * .)
    CTE_INT         reduce using rule 91 (muldiv -> * .)
    CTE_FLOAT       reduce using rule 91 (muldiv -> * .)
    CTE_BOOL        reduce using rule 91 (muldiv -> * .)
    CTE_STRING      reduce using rule 91 (muldiv -> * .)
    CTE_CHAR        reduce using rule 91 (muldiv -> * .)


state 198

    (100) term2 -> n_quad_not .

    +               reduce using rule 100 (term2 -> n_quad_not .)
    -               reduce using rule 100 (term2 -> n_quad_not .)
    SET_MATH_ADDSUB reduce using rule 100 (term2 -> n_quad_not .)
    <               reduce using rule 100 (term2 -> n_quad_not .)
    >               reduce using rule 100 (term2 -> n_quad_not .)
    NOT_EQ          reduce using rule 100 (term2 -> n_quad_not .)
    EQ              reduce using rule 100 (term2 -> n_quad_not .)
    LEQ             reduce using rule 100 (term2 -> n_quad_not .)
    GEQ             reduce using rule 100 (term2 -> n_quad_not .)
    OR              reduce using rule 100 (term2 -> n_quad_not .)
    AND             reduce using rule 100 (term2 -> n_quad_not .)
    ;               reduce using rule 100 (term2 -> n_quad_not .)
    ,               reduce using rule 100 (term2 -> n_quad_not .)
    )               reduce using rule 100 (term2 -> n_quad_not .)
    ]               reduce using rule 100 (term2 -> n_quad_not .)


state 199

    (92) muldiv -> / .

    (               reduce using rule 92 (muldiv -> / .)
    ID              reduce using rule 92 (muldiv -> / .)
    CTE_INT         reduce using rule 92 (muldiv -> / .)
    CTE_FLOAT       reduce using rule 92 (muldiv -> / .)
    CTE_BOOL        reduce using rule 92 (muldiv -> / .)
    CTE_STRING      reduce using rule 92 (muldiv -> / .)
    CTE_CHAR        reduce using rule 92 (muldiv -> / .)


state 200

    (99) term2 -> muldiv . factor n_quad_muldiv term2
    (104) factor -> . ( n_push_false_bottom expression ) n_pop_false_bottom
    (105) factor -> . varcte
    (108) varcte -> . ID empty
    (109) varcte -> . varcte1
    (110) varcte1 -> . CTE_INT
    (111) varcte1 -> . CTE_FLOAT
    (112) varcte1 -> . CTE_BOOL
    (113) varcte1 -> . CTE_STRING
    (114) varcte1 -> . CTE_CHAR
    (115) varcte1 -> . function_call
    (116) varcte1 -> . map_access
    (117) varcte1 -> . container_operation
    (49) function_call -> . n_era_size function_call1 )
    (137) map_access -> . ID [ expression ]
    (58) container_operation -> . ID . OP_ARGS ( expression )
    (59) container_operation -> . ID . OP ( )
    (50) n_era_size -> . ID (

    (               shift and go to state 132
    ID              shift and go to state 137
    CTE_INT         shift and go to state 136
    CTE_FLOAT       shift and go to state 138
    CTE_BOOL        shift and go to state 139
    CTE_STRING      shift and go to state 140
    CTE_CHAR        shift and go to state 134

    n_era_size                     shift and go to state 88
    container_operation            shift and go to state 135
    map_access                     shift and go to state 131
    function_call                  shift and go to state 128
    factor                         shift and go to state 213
    varcte1                        shift and go to state 129
    varcte                         shift and go to state 130

state 201

    (94) exp2 -> addsub term n_quad_addsub . exp2
    (94) exp2 -> . addsub term n_quad_addsub exp2
    (95) exp2 -> . empty
    (88) addsub -> . +
    (89) addsub -> . -
    (90) addsub -> . SET_MATH_ADDSUB
    (139) empty -> .

    +               shift and go to state 142
    -               shift and go to state 143
    SET_MATH_ADDSUB shift and go to state 145
    <               reduce using rule 139 (empty -> .)
    >               reduce using rule 139 (empty -> .)
    NOT_EQ          reduce using rule 139 (empty -> .)
    EQ              reduce using rule 139 (empty -> .)
    LEQ             reduce using rule 139 (empty -> .)
    GEQ             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    ;               reduce using rule 139 (empty -> .)
    ,               reduce using rule 139 (empty -> .)
    )               reduce using rule 139 (empty -> .)
    ]               reduce using rule 139 (empty -> .)

    exp2                           shift and go to state 214
    addsub                         shift and go to state 144
    empty                          shift and go to state 146

state 202

    (81) expression2 -> logop exp0 n_quad_logop . expression2
    (81) expression2 -> . logop exp0 n_quad_logop expression2
    (82) expression2 -> . empty
    (78) logop -> . OR
    (79) logop -> . AND
    (139) empty -> .

    OR              shift and go to state 150
    AND             shift and go to state 147
    ;               reduce using rule 139 (empty -> .)
    ,               reduce using rule 139 (empty -> .)
    )               reduce using rule 139 (empty -> .)
    ]               reduce using rule 139 (empty -> .)

    logop                          shift and go to state 148
    empty                          shift and go to state 151
    expression2                    shift and go to state 215

state 203

    (41) input -> READ ( n_process_read input1 ) .

    ;               reduce using rule 41 (input -> READ ( n_process_read input1 ) .)


state 204

    (42) input1 -> , n_process_read . input1
    (42) input1 -> . , n_process_read input1
    (43) input1 -> . empty
    (139) empty -> .

    ,               shift and go to state 181
    )               reduce using rule 139 (empty -> .)

    input1                         shift and go to state 216
    empty                          shift and go to state 182

state 205

    (37) while -> WHILE n_while_1 ( expression ) . n_while_2 block n_while_3
    (39) n_while_2 -> .

    {               reduce using rule 39 (n_while_2 -> .)

    n_while_2                      shift and go to state 217

state 206

    (45) output -> PRINT ( n_output_quad output1 ) .

    ;               reduce using rule 45 (output -> PRINT ( n_output_quad output1 ) .)


state 207

    (46) output1 -> , n_output_quad . output1
    (46) output1 -> . , n_output_quad output1
    (47) output1 -> . empty
    (139) empty -> .

    ,               shift and go to state 185
    )               reduce using rule 139 (empty -> .)

    output1                        shift and go to state 218
    empty                          shift and go to state 186

state 208

    (53) function_call2 -> n_verify_argument , n_add_one_to_counter function_call2 .

    )               reduce using rule 53 (function_call2 -> n_verify_argument , n_add_one_to_counter function_call2 .)


state 209

    (58) container_operation -> ID . OP_ARGS ( expression . )

    )               shift and go to state 219


state 210

    (59) container_operation -> ID . OP ( ) .

    *               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    /               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    SET_MATH_MULDIV reduce using rule 59 (container_operation -> ID . OP ( ) .)
    +               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    -               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    SET_MATH_ADDSUB reduce using rule 59 (container_operation -> ID . OP ( ) .)
    <               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    >               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    NOT_EQ          reduce using rule 59 (container_operation -> ID . OP ( ) .)
    EQ              reduce using rule 59 (container_operation -> ID . OP ( ) .)
    LEQ             reduce using rule 59 (container_operation -> ID . OP ( ) .)
    GEQ             reduce using rule 59 (container_operation -> ID . OP ( ) .)
    OR              reduce using rule 59 (container_operation -> ID . OP ( ) .)
    AND             reduce using rule 59 (container_operation -> ID . OP ( ) .)
    ;               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    ,               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    )               reduce using rule 59 (container_operation -> ID . OP ( ) .)
    ]               reduce using rule 59 (container_operation -> ID . OP ( ) .)


state 211

    (32) condition -> IF ( expression n_while_2 ) . block condition1
    (128) block -> . { statement_aux }

    {               shift and go to state 220

    block                          shift and go to state 221

state 212

    (104) factor -> ( n_push_false_bottom expression ) . n_pop_false_bottom
    (107) n_pop_false_bottom -> .

    *               reduce using rule 107 (n_pop_false_bottom -> .)
    /               reduce using rule 107 (n_pop_false_bottom -> .)
    SET_MATH_MULDIV reduce using rule 107 (n_pop_false_bottom -> .)
    +               reduce using rule 107 (n_pop_false_bottom -> .)
    -               reduce using rule 107 (n_pop_false_bottom -> .)
    SET_MATH_ADDSUB reduce using rule 107 (n_pop_false_bottom -> .)
    <               reduce using rule 107 (n_pop_false_bottom -> .)
    >               reduce using rule 107 (n_pop_false_bottom -> .)
    NOT_EQ          reduce using rule 107 (n_pop_false_bottom -> .)
    EQ              reduce using rule 107 (n_pop_false_bottom -> .)
    LEQ             reduce using rule 107 (n_pop_false_bottom -> .)
    GEQ             reduce using rule 107 (n_pop_false_bottom -> .)
    OR              reduce using rule 107 (n_pop_false_bottom -> .)
    AND             reduce using rule 107 (n_pop_false_bottom -> .)
    ;               reduce using rule 107 (n_pop_false_bottom -> .)
    ,               reduce using rule 107 (n_pop_false_bottom -> .)
    )               reduce using rule 107 (n_pop_false_bottom -> .)
    ]               reduce using rule 107 (n_pop_false_bottom -> .)

    n_pop_false_bottom             shift and go to state 222

state 213

    (99) term2 -> muldiv factor . n_quad_muldiv term2
    (97) n_quad_muldiv -> .

    *               reduce using rule 97 (n_quad_muldiv -> .)
    /               reduce using rule 97 (n_quad_muldiv -> .)
    SET_MATH_MULDIV reduce using rule 97 (n_quad_muldiv -> .)
    +               reduce using rule 97 (n_quad_muldiv -> .)
    -               reduce using rule 97 (n_quad_muldiv -> .)
    SET_MATH_ADDSUB reduce using rule 97 (n_quad_muldiv -> .)
    <               reduce using rule 97 (n_quad_muldiv -> .)
    >               reduce using rule 97 (n_quad_muldiv -> .)
    NOT_EQ          reduce using rule 97 (n_quad_muldiv -> .)
    EQ              reduce using rule 97 (n_quad_muldiv -> .)
    LEQ             reduce using rule 97 (n_quad_muldiv -> .)
    GEQ             reduce using rule 97 (n_quad_muldiv -> .)
    OR              reduce using rule 97 (n_quad_muldiv -> .)
    AND             reduce using rule 97 (n_quad_muldiv -> .)
    ;               reduce using rule 97 (n_quad_muldiv -> .)
    ,               reduce using rule 97 (n_quad_muldiv -> .)
    )               reduce using rule 97 (n_quad_muldiv -> .)
    ]               reduce using rule 97 (n_quad_muldiv -> .)

    n_quad_muldiv                  shift and go to state 223

state 214

    (94) exp2 -> addsub term n_quad_addsub exp2 .

    <               reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    >               reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    NOT_EQ          reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    EQ              reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    LEQ             reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    GEQ             reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    OR              reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    AND             reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    ;               reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    ,               reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    )               reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)
    ]               reduce using rule 94 (exp2 -> addsub term n_quad_addsub exp2 .)


state 215

    (81) expression2 -> logop exp0 n_quad_logop expression2 .

    ;               reduce using rule 81 (expression2 -> logop exp0 n_quad_logop expression2 .)
    ,               reduce using rule 81 (expression2 -> logop exp0 n_quad_logop expression2 .)
    )               reduce using rule 81 (expression2 -> logop exp0 n_quad_logop expression2 .)
    ]               reduce using rule 81 (expression2 -> logop exp0 n_quad_logop expression2 .)


state 216

    (42) input1 -> , n_process_read input1 .

    )               reduce using rule 42 (input1 -> , n_process_read input1 .)


state 217

    (37) while -> WHILE n_while_1 ( expression ) n_while_2 . block n_while_3
    (128) block -> . { statement_aux }

    {               shift and go to state 220

    block                          shift and go to state 224

state 218

    (46) output1 -> , n_output_quad output1 .

    )               reduce using rule 46 (output1 -> , n_output_quad output1 .)


state 219

    (58) container_operation -> ID . OP_ARGS ( expression ) .

    *               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    /               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    SET_MATH_MULDIV reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    +               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    -               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    SET_MATH_ADDSUB reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    <               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    >               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    NOT_EQ          reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    EQ              reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    LEQ             reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    GEQ             reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    OR              reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    AND             reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    ;               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    ,               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    )               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)
    ]               reduce using rule 58 (container_operation -> ID . OP_ARGS ( expression ) .)


state 220

    (128) block -> { . statement_aux }
    (129) statement_aux -> . statement statement_aux
    (130) statement_aux -> . empty
    (60) statement -> . statement1 ;
    (61) statement -> . statement2
    (139) empty -> .
    (62) statement1 -> . assignment
    (63) statement1 -> . input
    (64) statement1 -> . output
    (65) statement1 -> . container_operation
    (66) statement1 -> . map_definition
    (67) statement1 -> . return
    (68) statement1 -> . map_assignment
    (69) statement1 -> . function_call
    (70) statement2 -> . condition
    (71) statement2 -> . while
    (29) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (41) input -> . READ ( n_process_read input1 )
    (45) output -> . PRINT ( n_output_quad output1 )
    (58) container_operation -> . ID . OP_ARGS ( expression )
    (59) container_operation -> . ID . OP ( )
    (136) map_definition -> . MAP < datatype , datatype >
    (57) return -> . RETURN expression
    (138) map_assignment -> . map_access ASSIGNATOR n_quad_assign exp
    (49) function_call -> . n_era_size function_call1 )
    (32) condition -> . IF ( expression n_while_2 ) block condition1
    (37) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (30) assignment2 -> . ID
    (137) map_access -> . ID [ expression ]
    (50) n_era_size -> . ID (

    }               reduce using rule 139 (empty -> .)
    READ            shift and go to state 74
    PRINT           shift and go to state 78
    ID              shift and go to state 91
    MAP             shift and go to state 18
    RETURN          shift and go to state 73
    IF              shift and go to state 93
    WHILE           shift and go to state 77

    map_definition                 shift and go to state 75
    function_call                  shift and go to state 76
    statement_aux                  shift and go to state 225
    map_access                     shift and go to state 80
    assignment2                    shift and go to state 81
    statement                      shift and go to state 100
    input                          shift and go to state 83
    empty                          shift and go to state 101
    return                         shift and go to state 85
    statement2                     shift and go to state 86
    statement1                     shift and go to state 87
    n_era_size                     shift and go to state 88
    container_operation            shift and go to state 89
    assignment                     shift and go to state 90
    condition                      shift and go to state 92
    map_assignment                 shift and go to state 94
    while                          shift and go to state 95
    output                         shift and go to state 96

state 221

    (32) condition -> IF ( expression n_while_2 ) block . condition1
    (33) condition1 -> . ELSE n_if_2 block n_if_3
    (34) condition1 -> . n_if_3
    (36) n_if_3 -> .

    ELSE            shift and go to state 227
    READ            reduce using rule 36 (n_if_3 -> .)
    PRINT           reduce using rule 36 (n_if_3 -> .)
    ID              reduce using rule 36 (n_if_3 -> .)
    MAP             reduce using rule 36 (n_if_3 -> .)
    RETURN          reduce using rule 36 (n_if_3 -> .)
    IF              reduce using rule 36 (n_if_3 -> .)
    WHILE           reduce using rule 36 (n_if_3 -> .)
    }               reduce using rule 36 (n_if_3 -> .)

    n_if_3                         shift and go to state 226
    condition1                     shift and go to state 228

state 222

    (104) factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .

    *               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    /               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    SET_MATH_MULDIV reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    +               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    -               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    SET_MATH_ADDSUB reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    <               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    >               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    NOT_EQ          reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    EQ              reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    LEQ             reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    GEQ             reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    OR              reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    AND             reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    ;               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    ,               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    )               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    ]               reduce using rule 104 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)


state 223

    (99) term2 -> muldiv factor n_quad_muldiv . term2
    (99) term2 -> . muldiv factor n_quad_muldiv term2
    (100) term2 -> . n_quad_not
    (91) muldiv -> . *
    (92) muldiv -> . /
    (93) muldiv -> . SET_MATH_MULDIV
    (101) n_quad_not -> .

    *               shift and go to state 197
    /               shift and go to state 199
    SET_MATH_MULDIV shift and go to state 195
    +               reduce using rule 101 (n_quad_not -> .)
    -               reduce using rule 101 (n_quad_not -> .)
    SET_MATH_ADDSUB reduce using rule 101 (n_quad_not -> .)
    <               reduce using rule 101 (n_quad_not -> .)
    >               reduce using rule 101 (n_quad_not -> .)
    NOT_EQ          reduce using rule 101 (n_quad_not -> .)
    EQ              reduce using rule 101 (n_quad_not -> .)
    LEQ             reduce using rule 101 (n_quad_not -> .)
    GEQ             reduce using rule 101 (n_quad_not -> .)
    OR              reduce using rule 101 (n_quad_not -> .)
    AND             reduce using rule 101 (n_quad_not -> .)
    ;               reduce using rule 101 (n_quad_not -> .)
    ,               reduce using rule 101 (n_quad_not -> .)
    )               reduce using rule 101 (n_quad_not -> .)
    ]               reduce using rule 101 (n_quad_not -> .)

    term2                          shift and go to state 229
    n_quad_not                     shift and go to state 198
    muldiv                         shift and go to state 200

state 224

    (37) while -> WHILE n_while_1 ( expression ) n_while_2 block . n_while_3
    (40) n_while_3 -> .

    READ            reduce using rule 40 (n_while_3 -> .)
    PRINT           reduce using rule 40 (n_while_3 -> .)
    ID              reduce using rule 40 (n_while_3 -> .)
    MAP             reduce using rule 40 (n_while_3 -> .)
    RETURN          reduce using rule 40 (n_while_3 -> .)
    IF              reduce using rule 40 (n_while_3 -> .)
    WHILE           reduce using rule 40 (n_while_3 -> .)
    }               reduce using rule 40 (n_while_3 -> .)

    n_while_3                      shift and go to state 230

state 225

    (128) block -> { statement_aux . }

    }               shift and go to state 231


state 226

    (34) condition1 -> n_if_3 .

    READ            reduce using rule 34 (condition1 -> n_if_3 .)
    PRINT           reduce using rule 34 (condition1 -> n_if_3 .)
    ID              reduce using rule 34 (condition1 -> n_if_3 .)
    MAP             reduce using rule 34 (condition1 -> n_if_3 .)
    RETURN          reduce using rule 34 (condition1 -> n_if_3 .)
    IF              reduce using rule 34 (condition1 -> n_if_3 .)
    WHILE           reduce using rule 34 (condition1 -> n_if_3 .)
    }               reduce using rule 34 (condition1 -> n_if_3 .)


state 227

    (33) condition1 -> ELSE . n_if_2 block n_if_3
    (35) n_if_2 -> .

    {               reduce using rule 35 (n_if_2 -> .)

    n_if_2                         shift and go to state 232

state 228

    (32) condition -> IF ( expression n_while_2 ) block condition1 .

    READ            reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)
    PRINT           reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)
    ID              reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)
    MAP             reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)
    RETURN          reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)
    IF              reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)
    WHILE           reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)
    }               reduce using rule 32 (condition -> IF ( expression n_while_2 ) block condition1 .)


state 229

    (99) term2 -> muldiv factor n_quad_muldiv term2 .

    +               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    -               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    SET_MATH_ADDSUB reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    <               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    >               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    NOT_EQ          reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    EQ              reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    LEQ             reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    GEQ             reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    OR              reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    AND             reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    ;               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    ,               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    )               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)
    ]               reduce using rule 99 (term2 -> muldiv factor n_quad_muldiv term2 .)


state 230

    (37) while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .

    READ            reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    PRINT           reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    ID              reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    MAP             reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    RETURN          reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    IF              reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    WHILE           reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    }               reduce using rule 37 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)


state 231

    (128) block -> { statement_aux } .

    READ            reduce using rule 128 (block -> { statement_aux } .)
    PRINT           reduce using rule 128 (block -> { statement_aux } .)
    ID              reduce using rule 128 (block -> { statement_aux } .)
    MAP             reduce using rule 128 (block -> { statement_aux } .)
    RETURN          reduce using rule 128 (block -> { statement_aux } .)
    IF              reduce using rule 128 (block -> { statement_aux } .)
    WHILE           reduce using rule 128 (block -> { statement_aux } .)
    }               reduce using rule 128 (block -> { statement_aux } .)
    ELSE            reduce using rule 128 (block -> { statement_aux } .)


state 232

    (33) condition1 -> ELSE n_if_2 . block n_if_3
    (128) block -> . { statement_aux }

    {               shift and go to state 220

    block                          shift and go to state 233

state 233

    (33) condition1 -> ELSE n_if_2 block . n_if_3
    (36) n_if_3 -> .

    READ            reduce using rule 36 (n_if_3 -> .)
    PRINT           reduce using rule 36 (n_if_3 -> .)
    ID              reduce using rule 36 (n_if_3 -> .)
    MAP             reduce using rule 36 (n_if_3 -> .)
    RETURN          reduce using rule 36 (n_if_3 -> .)
    IF              reduce using rule 36 (n_if_3 -> .)
    WHILE           reduce using rule 36 (n_if_3 -> .)
    }               reduce using rule 36 (n_if_3 -> .)

    n_if_3                         shift and go to state 234

state 234

    (33) condition1 -> ELSE n_if_2 block n_if_3 .

    READ            reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)
    PRINT           reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)
    ID              reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)
    MAP             reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)
    RETURN          reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)
    IF              reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)
    WHILE           reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)
    }               reduce using rule 33 (condition1 -> ELSE n_if_2 block n_if_3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for SET in state 5 resolved as shift
WARNING: shift/reduce conflict for MAP in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 13 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 13 resolved as shift
WARNING: shift/reduce conflict for INT in state 13 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 13 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 13 resolved as shift
WARNING: shift/reduce conflict for STRING in state 13 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 13 resolved as shift
WARNING: shift/reduce conflict for SET in state 13 resolved as shift
WARNING: shift/reduce conflict for MAP in state 13 resolved as shift
WARNING: shift/reduce conflict for VOID in state 15 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 15 resolved as shift
WARNING: shift/reduce conflict for INT in state 15 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 15 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 15 resolved as shift
WARNING: shift/reduce conflict for STRING in state 15 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 15 resolved as shift
WARNING: shift/reduce conflict for SET in state 15 resolved as shift
WARNING: shift/reduce conflict for MAP in state 15 resolved as shift
WARNING: shift/reduce conflict for MAP in state 56 resolved as shift
WARNING: shift/reduce conflict for MAP in state 61 resolved as shift
WARNING: shift/reduce conflict for MAP in state 64 resolved as shift
WARNING: shift/reduce conflict for MAP in state 70 resolved as shift
