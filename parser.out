Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; n_main_quad program1
Rule 2     n_main_quad -> <empty>
Rule 3     program1 -> var program1
Rule 4     program1 -> program2
Rule 5     program2 -> proc program2
Rule 6     program2 -> main
Rule 7     proc -> proca1 procA n_check_has_return
Rule 8     proc -> VOID proca2 procA
Rule 9     proc -> empty
Rule 10    n_check_has_return -> <empty>
Rule 11    proca2 -> ID (
Rule 12    proca1 -> datatype ID (
Rule 13    procA -> proc1 ) { proc3 }
Rule 14    proc1 -> n_push_variable proc2
Rule 15    proc1 -> empty
Rule 16    proc2 -> , n_push_variable proc2
Rule 17    proc2 -> empty
Rule 18    n_push_variable -> datatype ID
Rule 19    proc3 -> var proc3
Rule 20    proc3 -> n_quad_counter proc4
Rule 21    n_quad_counter -> <empty>
Rule 22    proc4 -> statement proc4
Rule 23    proc4 -> empty
Rule 24    vars -> var vars
Rule 25    vars -> var
Rule 26    var -> datatype var1
Rule 27    var1 -> ID , var1
Rule 28    var1 -> ID var2
Rule 29    var2 -> ;
Rule 30    assignment -> assignment2 ASSIGNATOR n_quad_assign expression
Rule 31    assignment2 -> ID
Rule 32    n_quad_assign -> <empty>
Rule 33    condition -> IF ( expression n_while_2 ) block condition1
Rule 34    condition1 -> ELSE n_if_2 block n_if_3
Rule 35    condition1 -> n_if_3
Rule 36    n_if_2 -> <empty>
Rule 37    n_if_3 -> <empty>
Rule 38    while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3
Rule 39    n_while_1 -> <empty>
Rule 40    n_while_2 -> <empty>
Rule 41    n_while_3 -> <empty>
Rule 42    input -> READ ( n_process_read input1 )
Rule 43    input1 -> , n_process_read input1
Rule 44    input1 -> empty
Rule 45    n_process_read -> ID
Rule 46    output -> PRINT ( n_output_quad output1 )
Rule 47    output1 -> , n_output_quad output1
Rule 48    output1 -> empty
Rule 49    n_output_quad -> expression
Rule 50    function_call -> n_era_size function_call1 )
Rule 51    n_era_size -> ID (
Rule 52    function_call1 -> empty
Rule 53    function_call1 -> function_call2
Rule 54    function_call2 -> n_verify_argument , n_add_one_to_counter function_call2
Rule 55    function_call2 -> n_verify_argument
Rule 56    n_add_one_to_counter -> <empty>
Rule 57    n_verify_argument -> expression
Rule 58    return -> RETURN expression
Rule 59    set_operation -> ID . OPERATION ( set_operation1 )
Rule 60    set_operation1 -> expression
Rule 61    set_operation1 -> empty
Rule 62    statement -> statement1 ;
Rule 63    statement -> statement2
Rule 64    statement1 -> assignment
Rule 65    statement1 -> input
Rule 66    statement1 -> output
Rule 67    statement1 -> set_operation
Rule 68    statement1 -> map_definition
Rule 69    statement1 -> return
Rule 70    statement1 -> map_assignment
Rule 71    statement1 -> map_operation
Rule 72    statement1 -> function_call
Rule 73    statement2 -> condition
Rule 74    statement2 -> while
Rule 75    relop -> <
Rule 76    relop -> >
Rule 77    relop -> NOT_EQ
Rule 78    relop -> EQ
Rule 79    relop -> LEQ
Rule 80    relop -> GEQ
Rule 81    logop -> OR
Rule 82    logop -> AND
Rule 83    expression -> exp0 expression2
Rule 84    expression2 -> logop exp0 n_quad_logop expression2
Rule 85    expression2 -> empty
Rule 86    n_quad_logop -> <empty>
Rule 87    exp0 -> exp exp02
Rule 88    exp02 -> relop exp
Rule 89    exp02 -> empty
Rule 90    exp -> term exp2
Rule 91    addsub -> +
Rule 92    addsub -> -
Rule 93    muldiv -> *
Rule 94    muldiv -> /
Rule 95    exp2 -> addsub term n_quad_addsub exp2
Rule 96    exp2 -> empty
Rule 97    term -> term_not factor n_quad_muldiv term2
Rule 98    n_quad_muldiv -> <empty>
Rule 99    n_quad_addsub -> <empty>
Rule 100   term2 -> muldiv factor n_quad_muldiv term2
Rule 101   term2 -> n_quad_not
Rule 102   n_quad_not -> <empty>
Rule 103   term_not -> !
Rule 104   term_not -> empty
Rule 105   factor -> ( n_push_false_bottom expression ) n_pop_false_bottom
Rule 106   factor -> varcte
Rule 107   n_push_false_bottom -> <empty>
Rule 108   n_pop_false_bottom -> <empty>
Rule 109   varcte -> ID empty
Rule 110   varcte -> varcte1
Rule 111   varcte1 -> CTE_INT
Rule 112   varcte1 -> CTE_FLOAT
Rule 113   varcte1 -> CTE_BOOL
Rule 114   varcte1 -> CTE_STRING
Rule 115   varcte1 -> CTE_CHAR
Rule 116   varcte1 -> function_call
Rule 117   varcte1 -> map_access
Rule 118   varcte1 -> map_operation
Rule 119   varcte1 -> set_operation
Rule 120   functype -> datatype
Rule 121   functype -> VOID
Rule 122   datatype -> INT
Rule 123   datatype -> FLOAT
Rule 124   datatype -> BOOL
Rule 125   datatype -> STRING
Rule 126   datatype -> CHAR
Rule 127   datatype -> set_definition
Rule 128   datatype -> map_definition
Rule 129   set_definition -> SET < datatype >
Rule 130   block -> { statement_aux }
Rule 131   statement_aux -> statement statement_aux
Rule 132   statement_aux -> empty
Rule 133   main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
Rule 134   n_main_quad2 -> <empty>
Rule 135   n_clear_scope -> <empty>
Rule 136   vars_aux -> vars
Rule 137   vars_aux -> empty
Rule 138   map_definition -> MAP < datatype , datatype >
Rule 139   map_access -> ID [ exp ]
Rule 140   map_assignment -> map_access ASSIGNATOR exp
Rule 141   map_operation -> ID . OPERATION ( )
Rule 142   empty -> <empty>

Terminals, with rules where they appear

!                    : 103
(                    : 11 12 33 38 42 46 51 59 105 141
)                    : 13 33 38 42 46 50 59 105 141
*                    : 93
+                    : 91
,                    : 16 27 43 47 54 138
-                    : 92
.                    : 59 141
/                    : 94
;                    : 1 29 62
<                    : 75 129 138
>                    : 76 129 138
AND                  : 82
ASSIGNATOR           : 30 140
BOOL                 : 124
CHAR                 : 126
CTE_BOOL             : 113
CTE_CHAR             : 115
CTE_FLOAT            : 112
CTE_INT              : 111
CTE_STRING           : 114
ELSE                 : 34
EQ                   : 78
FLOAT                : 123
GEQ                  : 80
ID                   : 1 11 12 18 27 28 31 45 51 59 109 139 141
IF                   : 33
INT                  : 122
LEQ                  : 79
MAIN                 : 133
MAP                  : 138
NOT_EQ               : 77
OPERATION            : 59 141
OR                   : 81
PRINT                : 46
PROGRAM              : 1
READ                 : 42
RETURN               : 58
SET                  : 129
STRING               : 125
VOID                 : 8 121
WHILE                : 38
[                    : 139
]                    : 139
error                : 
{                    : 13 130 133
}                    : 13 130 133

Nonterminals, with rules where they appear

addsub               : 95
assignment           : 64
assignment2          : 30
block                : 33 34 38
condition            : 73
condition1           : 33
datatype             : 12 18 26 120 129 138 138
empty                : 9 15 17 23 44 48 52 61 85 89 96 104 109 132 137
exp                  : 87 88 139 140
exp0                 : 83 84
exp02                : 87
exp2                 : 90 95
expression           : 30 33 38 49 57 58 60 105
expression2          : 83 84
factor               : 97 100
function_call        : 72 116
function_call1       : 50
function_call2       : 53 54
functype             : 
input                : 65
input1               : 42 43
logop                : 84
main                 : 6
map_access           : 117 140
map_assignment       : 70
map_definition       : 68 128
map_operation        : 71 118
muldiv               : 100
n_add_one_to_counter : 54
n_check_has_return   : 7
n_clear_scope        : 133
n_era_size           : 50
n_if_2               : 34
n_if_3               : 34 35
n_main_quad          : 1
n_main_quad2         : 133
n_output_quad        : 46 47
n_pop_false_bottom   : 105
n_process_read       : 42 43
n_push_false_bottom  : 105
n_push_variable      : 14 16
n_quad_addsub        : 95
n_quad_assign        : 30
n_quad_counter       : 20
n_quad_logop         : 84
n_quad_muldiv        : 97 100
n_quad_not           : 101
n_verify_argument    : 54 55
n_while_1            : 38
n_while_2            : 33 38
n_while_3            : 38
output               : 66
output1              : 46 47
proc                 : 5
proc1                : 13
proc2                : 14 16
proc3                : 13 19
proc4                : 20 22
procA                : 7 8
proca1               : 7
proca2               : 8
program              : 0
program1             : 1 3
program2             : 4 5
relop                : 88
return               : 69
set_definition       : 127
set_operation        : 67 119
set_operation1       : 59
statement            : 22 131
statement1           : 62
statement2           : 63
statement_aux        : 130 131 133
term                 : 90 95
term2                : 97 100
term_not             : 97
var                  : 3 19 24 25
var1                 : 26 27
var2                 : 28
varcte               : 106
varcte1              : 110
vars                 : 24 136
vars_aux             : 133
while                : 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; n_main_quad program1

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; n_main_quad program1

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; n_main_quad program1

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . n_main_quad program1
    (2) n_main_quad -> .

    INT             reduce using rule 2 (n_main_quad -> .)
    FLOAT           reduce using rule 2 (n_main_quad -> .)
    BOOL            reduce using rule 2 (n_main_quad -> .)
    STRING          reduce using rule 2 (n_main_quad -> .)
    CHAR            reduce using rule 2 (n_main_quad -> .)
    VOID            reduce using rule 2 (n_main_quad -> .)
    MAIN            reduce using rule 2 (n_main_quad -> .)
    SET             reduce using rule 2 (n_main_quad -> .)
    MAP             reduce using rule 2 (n_main_quad -> .)

    n_main_quad                    shift and go to state 5

state 5

    (1) program -> PROGRAM ID ; n_main_quad . program1
    (3) program1 -> . var program1
    (4) program1 -> . program2
    (26) var -> . datatype var1
    (5) program2 -> . proc program2
    (6) program2 -> . main
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (7) proc -> . proca1 procA n_check_has_return
    (8) proc -> . VOID proca2 procA
    (9) proc -> . empty
    (133) main -> . MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >
    (12) proca1 -> . datatype ID (
    (142) empty -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    VOID            shift and go to state 6
    MAIN            shift and go to state 24
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! VOID            [ reduce using rule 142 (empty -> .) ]
  ! MAIN            [ reduce using rule 142 (empty -> .) ]
  ! INT             [ reduce using rule 142 (empty -> .) ]
  ! FLOAT           [ reduce using rule 142 (empty -> .) ]
  ! BOOL            [ reduce using rule 142 (empty -> .) ]
  ! STRING          [ reduce using rule 142 (empty -> .) ]
  ! CHAR            [ reduce using rule 142 (empty -> .) ]
  ! SET             [ reduce using rule 142 (empty -> .) ]
  ! MAP             [ reduce using rule 142 (empty -> .) ]

    program1                       shift and go to state 10
    program2                       shift and go to state 11
    datatype                       shift and go to state 20
    proca1                         shift and go to state 12
    map_definition                 shift and go to state 7
    var                            shift and go to state 13
    set_definition                 shift and go to state 19
    main                           shift and go to state 14
    proc                           shift and go to state 15
    empty                          shift and go to state 16

state 6

    (8) proc -> VOID . proca2 procA
    (11) proca2 -> . ID (

    ID              shift and go to state 25

    proca2                         shift and go to state 26

state 7

    (128) datatype -> map_definition .

    ID              reduce using rule 128 (datatype -> map_definition .)
    >               reduce using rule 128 (datatype -> map_definition .)
    ,               reduce using rule 128 (datatype -> map_definition .)


state 8

    (126) datatype -> CHAR .

    ID              reduce using rule 126 (datatype -> CHAR .)
    >               reduce using rule 126 (datatype -> CHAR .)
    ,               reduce using rule 126 (datatype -> CHAR .)


state 9

    (129) set_definition -> SET . < datatype >

    <               shift and go to state 27


state 10

    (1) program -> PROGRAM ID ; n_main_quad program1 .

    $end            reduce using rule 1 (program -> PROGRAM ID ; n_main_quad program1 .)


state 11

    (4) program1 -> program2 .

    $end            reduce using rule 4 (program1 -> program2 .)


state 12

    (7) proc -> proca1 . procA n_check_has_return
    (13) procA -> . proc1 ) { proc3 }
    (14) proc1 -> . n_push_variable proc2
    (15) proc1 -> . empty
    (18) n_push_variable -> . datatype ID
    (142) empty -> .
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

    )               reduce using rule 142 (empty -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    n_push_variable                shift and go to state 30
    set_definition                 shift and go to state 19
    datatype                       shift and go to state 31
    procA                          shift and go to state 32
    empty                          shift and go to state 29
    map_definition                 shift and go to state 7
    proc1                          shift and go to state 28

state 13

    (3) program1 -> var . program1
    (3) program1 -> . var program1
    (4) program1 -> . program2
    (26) var -> . datatype var1
    (5) program2 -> . proc program2
    (6) program2 -> . main
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (7) proc -> . proca1 procA n_check_has_return
    (8) proc -> . VOID proca2 procA
    (9) proc -> . empty
    (133) main -> . MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >
    (12) proca1 -> . datatype ID (
    (142) empty -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    VOID            shift and go to state 6
    MAIN            shift and go to state 24
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! VOID            [ reduce using rule 142 (empty -> .) ]
  ! MAIN            [ reduce using rule 142 (empty -> .) ]
  ! INT             [ reduce using rule 142 (empty -> .) ]
  ! FLOAT           [ reduce using rule 142 (empty -> .) ]
  ! BOOL            [ reduce using rule 142 (empty -> .) ]
  ! STRING          [ reduce using rule 142 (empty -> .) ]
  ! CHAR            [ reduce using rule 142 (empty -> .) ]
  ! SET             [ reduce using rule 142 (empty -> .) ]
  ! MAP             [ reduce using rule 142 (empty -> .) ]

    program1                       shift and go to state 33
    program2                       shift and go to state 11
    datatype                       shift and go to state 20
    proca1                         shift and go to state 12
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19
    var                            shift and go to state 13
    main                           shift and go to state 14
    proc                           shift and go to state 15
    empty                          shift and go to state 16

state 14

    (6) program2 -> main .

    $end            reduce using rule 6 (program2 -> main .)


state 15

    (5) program2 -> proc . program2
    (5) program2 -> . proc program2
    (6) program2 -> . main
    (7) proc -> . proca1 procA n_check_has_return
    (8) proc -> . VOID proca2 procA
    (9) proc -> . empty
    (133) main -> . MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (12) proca1 -> . datatype ID (
    (142) empty -> .
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SET resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
    VOID            shift and go to state 6
    MAIN            shift and go to state 24
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! VOID            [ reduce using rule 142 (empty -> .) ]
  ! MAIN            [ reduce using rule 142 (empty -> .) ]
  ! INT             [ reduce using rule 142 (empty -> .) ]
  ! FLOAT           [ reduce using rule 142 (empty -> .) ]
  ! BOOL            [ reduce using rule 142 (empty -> .) ]
  ! STRING          [ reduce using rule 142 (empty -> .) ]
  ! CHAR            [ reduce using rule 142 (empty -> .) ]
  ! SET             [ reduce using rule 142 (empty -> .) ]
  ! MAP             [ reduce using rule 142 (empty -> .) ]

    set_definition                 shift and go to state 19
    program2                       shift and go to state 34
    datatype                       shift and go to state 35
    proca1                         shift and go to state 12
    map_definition                 shift and go to state 7
    main                           shift and go to state 14
    proc                           shift and go to state 15
    empty                          shift and go to state 16

state 16

    (9) proc -> empty .

    VOID            reduce using rule 9 (proc -> empty .)
    MAIN            reduce using rule 9 (proc -> empty .)
    INT             reduce using rule 9 (proc -> empty .)
    FLOAT           reduce using rule 9 (proc -> empty .)
    BOOL            reduce using rule 9 (proc -> empty .)
    STRING          reduce using rule 9 (proc -> empty .)
    CHAR            reduce using rule 9 (proc -> empty .)
    SET             reduce using rule 9 (proc -> empty .)
    MAP             reduce using rule 9 (proc -> empty .)


state 17

    (125) datatype -> STRING .

    ID              reduce using rule 125 (datatype -> STRING .)
    >               reduce using rule 125 (datatype -> STRING .)
    ,               reduce using rule 125 (datatype -> STRING .)


state 18

    (138) map_definition -> MAP . < datatype , datatype >

    <               shift and go to state 36


state 19

    (127) datatype -> set_definition .

    ID              reduce using rule 127 (datatype -> set_definition .)
    >               reduce using rule 127 (datatype -> set_definition .)
    ,               reduce using rule 127 (datatype -> set_definition .)


state 20

    (26) var -> datatype . var1
    (12) proca1 -> datatype . ID (
    (27) var1 -> . ID , var1
    (28) var1 -> . ID var2

    ID              shift and go to state 38

    var1                           shift and go to state 37

state 21

    (123) datatype -> FLOAT .

    ID              reduce using rule 123 (datatype -> FLOAT .)
    >               reduce using rule 123 (datatype -> FLOAT .)
    ,               reduce using rule 123 (datatype -> FLOAT .)


state 22

    (122) datatype -> INT .

    ID              reduce using rule 122 (datatype -> INT .)
    >               reduce using rule 122 (datatype -> INT .)
    ,               reduce using rule 122 (datatype -> INT .)


state 23

    (124) datatype -> BOOL .

    ID              reduce using rule 124 (datatype -> BOOL .)
    >               reduce using rule 124 (datatype -> BOOL .)
    ,               reduce using rule 124 (datatype -> BOOL .)


state 24

    (133) main -> MAIN . n_clear_scope n_main_quad2 { vars_aux statement_aux }
    (135) n_clear_scope -> .

    {               reduce using rule 135 (n_clear_scope -> .)

    n_clear_scope                  shift and go to state 39

state 25

    (11) proca2 -> ID . (

    (               shift and go to state 40


state 26

    (8) proc -> VOID proca2 . procA
    (13) procA -> . proc1 ) { proc3 }
    (14) proc1 -> . n_push_variable proc2
    (15) proc1 -> . empty
    (18) n_push_variable -> . datatype ID
    (142) empty -> .
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

    )               reduce using rule 142 (empty -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    n_push_variable                shift and go to state 30
    set_definition                 shift and go to state 19
    datatype                       shift and go to state 31
    map_definition                 shift and go to state 7
    procA                          shift and go to state 41
    empty                          shift and go to state 29
    proc1                          shift and go to state 28

state 27

    (129) set_definition -> SET < . datatype >
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 42
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 28

    (13) procA -> proc1 . ) { proc3 }

    )               shift and go to state 43


state 29

    (15) proc1 -> empty .

    )               reduce using rule 15 (proc1 -> empty .)


state 30

    (14) proc1 -> n_push_variable . proc2
    (16) proc2 -> . , n_push_variable proc2
    (17) proc2 -> . empty
    (142) empty -> .

    ,               shift and go to state 44
    )               reduce using rule 142 (empty -> .)

    empty                          shift and go to state 45
    proc2                          shift and go to state 46

state 31

    (18) n_push_variable -> datatype . ID

    ID              shift and go to state 47


state 32

    (7) proc -> proca1 procA . n_check_has_return
    (10) n_check_has_return -> .

    VOID            reduce using rule 10 (n_check_has_return -> .)
    MAIN            reduce using rule 10 (n_check_has_return -> .)
    INT             reduce using rule 10 (n_check_has_return -> .)
    FLOAT           reduce using rule 10 (n_check_has_return -> .)
    BOOL            reduce using rule 10 (n_check_has_return -> .)
    STRING          reduce using rule 10 (n_check_has_return -> .)
    CHAR            reduce using rule 10 (n_check_has_return -> .)
    SET             reduce using rule 10 (n_check_has_return -> .)
    MAP             reduce using rule 10 (n_check_has_return -> .)

    n_check_has_return             shift and go to state 48

state 33

    (3) program1 -> var program1 .

    $end            reduce using rule 3 (program1 -> var program1 .)


state 34

    (5) program2 -> proc program2 .

    $end            reduce using rule 5 (program2 -> proc program2 .)


state 35

    (12) proca1 -> datatype . ID (

    ID              shift and go to state 49


state 36

    (138) map_definition -> MAP < . datatype , datatype >
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 50
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 37

    (26) var -> datatype var1 .

    INT             reduce using rule 26 (var -> datatype var1 .)
    FLOAT           reduce using rule 26 (var -> datatype var1 .)
    BOOL            reduce using rule 26 (var -> datatype var1 .)
    STRING          reduce using rule 26 (var -> datatype var1 .)
    CHAR            reduce using rule 26 (var -> datatype var1 .)
    VOID            reduce using rule 26 (var -> datatype var1 .)
    MAIN            reduce using rule 26 (var -> datatype var1 .)
    SET             reduce using rule 26 (var -> datatype var1 .)
    MAP             reduce using rule 26 (var -> datatype var1 .)
    READ            reduce using rule 26 (var -> datatype var1 .)
    PRINT           reduce using rule 26 (var -> datatype var1 .)
    ID              reduce using rule 26 (var -> datatype var1 .)
    RETURN          reduce using rule 26 (var -> datatype var1 .)
    IF              reduce using rule 26 (var -> datatype var1 .)
    WHILE           reduce using rule 26 (var -> datatype var1 .)
    }               reduce using rule 26 (var -> datatype var1 .)


state 38

    (12) proca1 -> datatype ID . (
    (27) var1 -> ID . , var1
    (28) var1 -> ID . var2
    (29) var2 -> . ;

    (               shift and go to state 52
    ,               shift and go to state 53
    ;               shift and go to state 54

    var2                           shift and go to state 51

state 39

    (133) main -> MAIN n_clear_scope . n_main_quad2 { vars_aux statement_aux }
    (134) n_main_quad2 -> .

    {               reduce using rule 134 (n_main_quad2 -> .)

    n_main_quad2                   shift and go to state 55

state 40

    (11) proca2 -> ID ( .

    INT             reduce using rule 11 (proca2 -> ID ( .)
    FLOAT           reduce using rule 11 (proca2 -> ID ( .)
    BOOL            reduce using rule 11 (proca2 -> ID ( .)
    STRING          reduce using rule 11 (proca2 -> ID ( .)
    CHAR            reduce using rule 11 (proca2 -> ID ( .)
    SET             reduce using rule 11 (proca2 -> ID ( .)
    MAP             reduce using rule 11 (proca2 -> ID ( .)
    )               reduce using rule 11 (proca2 -> ID ( .)


state 41

    (8) proc -> VOID proca2 procA .

    VOID            reduce using rule 8 (proc -> VOID proca2 procA .)
    MAIN            reduce using rule 8 (proc -> VOID proca2 procA .)
    INT             reduce using rule 8 (proc -> VOID proca2 procA .)
    FLOAT           reduce using rule 8 (proc -> VOID proca2 procA .)
    BOOL            reduce using rule 8 (proc -> VOID proca2 procA .)
    STRING          reduce using rule 8 (proc -> VOID proca2 procA .)
    CHAR            reduce using rule 8 (proc -> VOID proca2 procA .)
    SET             reduce using rule 8 (proc -> VOID proca2 procA .)
    MAP             reduce using rule 8 (proc -> VOID proca2 procA .)


state 42

    (129) set_definition -> SET < datatype . >

    >               shift and go to state 56


state 43

    (13) procA -> proc1 ) . { proc3 }

    {               shift and go to state 57


state 44

    (16) proc2 -> , . n_push_variable proc2
    (18) n_push_variable -> . datatype ID
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 31
    n_push_variable                shift and go to state 58
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 45

    (17) proc2 -> empty .

    )               reduce using rule 17 (proc2 -> empty .)


state 46

    (14) proc1 -> n_push_variable proc2 .

    )               reduce using rule 14 (proc1 -> n_push_variable proc2 .)


state 47

    (18) n_push_variable -> datatype ID .

    ,               reduce using rule 18 (n_push_variable -> datatype ID .)
    )               reduce using rule 18 (n_push_variable -> datatype ID .)


state 48

    (7) proc -> proca1 procA n_check_has_return .

    VOID            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    MAIN            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    INT             reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    FLOAT           reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    BOOL            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    STRING          reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    CHAR            reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    SET             reduce using rule 7 (proc -> proca1 procA n_check_has_return .)
    MAP             reduce using rule 7 (proc -> proca1 procA n_check_has_return .)


state 49

    (12) proca1 -> datatype ID . (

    (               shift and go to state 52


state 50

    (138) map_definition -> MAP < datatype . , datatype >

    ,               shift and go to state 59


state 51

    (28) var1 -> ID var2 .

    INT             reduce using rule 28 (var1 -> ID var2 .)
    FLOAT           reduce using rule 28 (var1 -> ID var2 .)
    BOOL            reduce using rule 28 (var1 -> ID var2 .)
    STRING          reduce using rule 28 (var1 -> ID var2 .)
    CHAR            reduce using rule 28 (var1 -> ID var2 .)
    VOID            reduce using rule 28 (var1 -> ID var2 .)
    MAIN            reduce using rule 28 (var1 -> ID var2 .)
    SET             reduce using rule 28 (var1 -> ID var2 .)
    MAP             reduce using rule 28 (var1 -> ID var2 .)
    READ            reduce using rule 28 (var1 -> ID var2 .)
    PRINT           reduce using rule 28 (var1 -> ID var2 .)
    ID              reduce using rule 28 (var1 -> ID var2 .)
    RETURN          reduce using rule 28 (var1 -> ID var2 .)
    IF              reduce using rule 28 (var1 -> ID var2 .)
    WHILE           reduce using rule 28 (var1 -> ID var2 .)
    }               reduce using rule 28 (var1 -> ID var2 .)


state 52

    (12) proca1 -> datatype ID ( .

    INT             reduce using rule 12 (proca1 -> datatype ID ( .)
    FLOAT           reduce using rule 12 (proca1 -> datatype ID ( .)
    BOOL            reduce using rule 12 (proca1 -> datatype ID ( .)
    STRING          reduce using rule 12 (proca1 -> datatype ID ( .)
    CHAR            reduce using rule 12 (proca1 -> datatype ID ( .)
    SET             reduce using rule 12 (proca1 -> datatype ID ( .)
    MAP             reduce using rule 12 (proca1 -> datatype ID ( .)
    )               reduce using rule 12 (proca1 -> datatype ID ( .)


state 53

    (27) var1 -> ID , . var1
    (27) var1 -> . ID , var1
    (28) var1 -> . ID var2

    ID              shift and go to state 61

    var1                           shift and go to state 60

state 54

    (29) var2 -> ; .

    INT             reduce using rule 29 (var2 -> ; .)
    FLOAT           reduce using rule 29 (var2 -> ; .)
    BOOL            reduce using rule 29 (var2 -> ; .)
    STRING          reduce using rule 29 (var2 -> ; .)
    CHAR            reduce using rule 29 (var2 -> ; .)
    VOID            reduce using rule 29 (var2 -> ; .)
    MAIN            reduce using rule 29 (var2 -> ; .)
    SET             reduce using rule 29 (var2 -> ; .)
    MAP             reduce using rule 29 (var2 -> ; .)
    READ            reduce using rule 29 (var2 -> ; .)
    PRINT           reduce using rule 29 (var2 -> ; .)
    ID              reduce using rule 29 (var2 -> ; .)
    RETURN          reduce using rule 29 (var2 -> ; .)
    IF              reduce using rule 29 (var2 -> ; .)
    WHILE           reduce using rule 29 (var2 -> ; .)
    }               reduce using rule 29 (var2 -> ; .)


state 55

    (133) main -> MAIN n_clear_scope n_main_quad2 . { vars_aux statement_aux }

    {               shift and go to state 62


state 56

    (129) set_definition -> SET < datatype > .

    ID              reduce using rule 129 (set_definition -> SET < datatype > .)
    >               reduce using rule 129 (set_definition -> SET < datatype > .)
    ,               reduce using rule 129 (set_definition -> SET < datatype > .)


state 57

    (13) procA -> proc1 ) { . proc3 }
    (19) proc3 -> . var proc3
    (20) proc3 -> . n_quad_counter proc4
    (26) var -> . datatype var1
    (21) n_quad_counter -> .
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 21 (n_quad_counter -> .)
    PRINT           reduce using rule 21 (n_quad_counter -> .)
    ID              reduce using rule 21 (n_quad_counter -> .)
    RETURN          reduce using rule 21 (n_quad_counter -> .)
    IF              reduce using rule 21 (n_quad_counter -> .)
    WHILE           reduce using rule 21 (n_quad_counter -> .)
    }               reduce using rule 21 (n_quad_counter -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 21 (n_quad_counter -> .) ]

    set_definition                 shift and go to state 19
    datatype                       shift and go to state 66
    map_definition                 shift and go to state 7
    n_quad_counter                 shift and go to state 64
    var                            shift and go to state 65
    proc3                          shift and go to state 63

state 58

    (16) proc2 -> , n_push_variable . proc2
    (16) proc2 -> . , n_push_variable proc2
    (17) proc2 -> . empty
    (142) empty -> .

    ,               shift and go to state 44
    )               reduce using rule 142 (empty -> .)

    empty                          shift and go to state 45
    proc2                          shift and go to state 67

state 59

    (138) map_definition -> MAP < datatype , . datatype >
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

    datatype                       shift and go to state 68
    map_definition                 shift and go to state 7
    set_definition                 shift and go to state 19

state 60

    (27) var1 -> ID , var1 .

    INT             reduce using rule 27 (var1 -> ID , var1 .)
    FLOAT           reduce using rule 27 (var1 -> ID , var1 .)
    BOOL            reduce using rule 27 (var1 -> ID , var1 .)
    STRING          reduce using rule 27 (var1 -> ID , var1 .)
    CHAR            reduce using rule 27 (var1 -> ID , var1 .)
    VOID            reduce using rule 27 (var1 -> ID , var1 .)
    MAIN            reduce using rule 27 (var1 -> ID , var1 .)
    SET             reduce using rule 27 (var1 -> ID , var1 .)
    MAP             reduce using rule 27 (var1 -> ID , var1 .)
    READ            reduce using rule 27 (var1 -> ID , var1 .)
    PRINT           reduce using rule 27 (var1 -> ID , var1 .)
    ID              reduce using rule 27 (var1 -> ID , var1 .)
    RETURN          reduce using rule 27 (var1 -> ID , var1 .)
    IF              reduce using rule 27 (var1 -> ID , var1 .)
    WHILE           reduce using rule 27 (var1 -> ID , var1 .)
    }               reduce using rule 27 (var1 -> ID , var1 .)


state 61

    (27) var1 -> ID . , var1
    (28) var1 -> ID . var2
    (29) var2 -> . ;

    ,               shift and go to state 53
    ;               shift and go to state 54

    var2                           shift and go to state 51

state 62

    (133) main -> MAIN n_clear_scope n_main_quad2 { . vars_aux statement_aux }
    (136) vars_aux -> . vars
    (137) vars_aux -> . empty
    (24) vars -> . var vars
    (25) vars -> . var
    (142) empty -> .
    (26) var -> . datatype var1
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 142 (empty -> .)
    PRINT           reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    RETURN          reduce using rule 142 (empty -> .)
    IF              reduce using rule 142 (empty -> .)
    WHILE           reduce using rule 142 (empty -> .)
    }               reduce using rule 142 (empty -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 142 (empty -> .) ]

    set_definition                 shift and go to state 19
    vars                           shift and go to state 69
    datatype                       shift and go to state 66
    map_definition                 shift and go to state 7
    vars_aux                       shift and go to state 70
    var                            shift and go to state 71
    empty                          shift and go to state 72

state 63

    (13) procA -> proc1 ) { proc3 . }

    }               shift and go to state 73


state 64

    (20) proc3 -> n_quad_counter . proc4
    (22) proc4 -> . statement proc4
    (23) proc4 -> . empty
    (62) statement -> . statement1 ;
    (63) statement -> . statement2
    (142) empty -> .
    (64) statement1 -> . assignment
    (65) statement1 -> . input
    (66) statement1 -> . output
    (67) statement1 -> . set_operation
    (68) statement1 -> . map_definition
    (69) statement1 -> . return
    (70) statement1 -> . map_assignment
    (71) statement1 -> . map_operation
    (72) statement1 -> . function_call
    (73) statement2 -> . condition
    (74) statement2 -> . while
    (30) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (42) input -> . READ ( n_process_read input1 )
    (46) output -> . PRINT ( n_output_quad output1 )
    (59) set_operation -> . ID . OPERATION ( set_operation1 )
    (138) map_definition -> . MAP < datatype , datatype >
    (58) return -> . RETURN expression
    (140) map_assignment -> . map_access ASSIGNATOR exp
    (141) map_operation -> . ID . OPERATION ( )
    (50) function_call -> . n_era_size function_call1 )
    (33) condition -> . IF ( expression n_while_2 ) block condition1
    (38) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (31) assignment2 -> . ID
    (139) map_access -> . ID [ exp ]
    (51) n_era_size -> . ID (

    }               reduce using rule 142 (empty -> .)
    READ            shift and go to state 75
    PRINT           shift and go to state 79
    ID              shift and go to state 92
    MAP             shift and go to state 18
    RETURN          shift and go to state 74
    IF              shift and go to state 94
    WHILE           shift and go to state 78

    map_definition                 shift and go to state 76
    function_call                  shift and go to state 77
    proc4                          shift and go to state 80
    map_access                     shift and go to state 81
    assignment2                    shift and go to state 82
    statement                      shift and go to state 83
    input                          shift and go to state 84
    empty                          shift and go to state 85
    return                         shift and go to state 86
    statement2                     shift and go to state 87
    statement1                     shift and go to state 88
    n_era_size                     shift and go to state 89
    assignment                     shift and go to state 90
    map_operation                  shift and go to state 91
    condition                      shift and go to state 93
    set_operation                  shift and go to state 95
    map_assignment                 shift and go to state 96
    while                          shift and go to state 97
    output                         shift and go to state 98

state 65

    (19) proc3 -> var . proc3
    (19) proc3 -> . var proc3
    (20) proc3 -> . n_quad_counter proc4
    (26) var -> . datatype var1
    (21) n_quad_counter -> .
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 21 (n_quad_counter -> .)
    PRINT           reduce using rule 21 (n_quad_counter -> .)
    ID              reduce using rule 21 (n_quad_counter -> .)
    RETURN          reduce using rule 21 (n_quad_counter -> .)
    IF              reduce using rule 21 (n_quad_counter -> .)
    WHILE           reduce using rule 21 (n_quad_counter -> .)
    }               reduce using rule 21 (n_quad_counter -> .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 21 (n_quad_counter -> .) ]

    set_definition                 shift and go to state 19
    datatype                       shift and go to state 66
    map_definition                 shift and go to state 7
    n_quad_counter                 shift and go to state 64
    var                            shift and go to state 65
    proc3                          shift and go to state 99

state 66

    (26) var -> datatype . var1
    (27) var1 -> . ID , var1
    (28) var1 -> . ID var2

    ID              shift and go to state 61

    var1                           shift and go to state 37

state 67

    (16) proc2 -> , n_push_variable proc2 .

    )               reduce using rule 16 (proc2 -> , n_push_variable proc2 .)


state 68

    (138) map_definition -> MAP < datatype , datatype . >

    >               shift and go to state 100


state 69

    (136) vars_aux -> vars .

    READ            reduce using rule 136 (vars_aux -> vars .)
    PRINT           reduce using rule 136 (vars_aux -> vars .)
    ID              reduce using rule 136 (vars_aux -> vars .)
    MAP             reduce using rule 136 (vars_aux -> vars .)
    RETURN          reduce using rule 136 (vars_aux -> vars .)
    IF              reduce using rule 136 (vars_aux -> vars .)
    WHILE           reduce using rule 136 (vars_aux -> vars .)
    }               reduce using rule 136 (vars_aux -> vars .)


state 70

    (133) main -> MAIN n_clear_scope n_main_quad2 { vars_aux . statement_aux }
    (131) statement_aux -> . statement statement_aux
    (132) statement_aux -> . empty
    (62) statement -> . statement1 ;
    (63) statement -> . statement2
    (142) empty -> .
    (64) statement1 -> . assignment
    (65) statement1 -> . input
    (66) statement1 -> . output
    (67) statement1 -> . set_operation
    (68) statement1 -> . map_definition
    (69) statement1 -> . return
    (70) statement1 -> . map_assignment
    (71) statement1 -> . map_operation
    (72) statement1 -> . function_call
    (73) statement2 -> . condition
    (74) statement2 -> . while
    (30) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (42) input -> . READ ( n_process_read input1 )
    (46) output -> . PRINT ( n_output_quad output1 )
    (59) set_operation -> . ID . OPERATION ( set_operation1 )
    (138) map_definition -> . MAP < datatype , datatype >
    (58) return -> . RETURN expression
    (140) map_assignment -> . map_access ASSIGNATOR exp
    (141) map_operation -> . ID . OPERATION ( )
    (50) function_call -> . n_era_size function_call1 )
    (33) condition -> . IF ( expression n_while_2 ) block condition1
    (38) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (31) assignment2 -> . ID
    (139) map_access -> . ID [ exp ]
    (51) n_era_size -> . ID (

    }               reduce using rule 142 (empty -> .)
    READ            shift and go to state 75
    PRINT           shift and go to state 79
    ID              shift and go to state 92
    MAP             shift and go to state 18
    RETURN          shift and go to state 74
    IF              shift and go to state 94
    WHILE           shift and go to state 78

    map_definition                 shift and go to state 76
    function_call                  shift and go to state 77
    statement_aux                  shift and go to state 101
    map_access                     shift and go to state 81
    assignment2                    shift and go to state 82
    statement                      shift and go to state 102
    input                          shift and go to state 84
    empty                          shift and go to state 103
    return                         shift and go to state 86
    statement2                     shift and go to state 87
    statement1                     shift and go to state 88
    n_era_size                     shift and go to state 89
    assignment                     shift and go to state 90
    map_operation                  shift and go to state 91
    condition                      shift and go to state 93
    set_operation                  shift and go to state 95
    map_assignment                 shift and go to state 96
    while                          shift and go to state 97
    output                         shift and go to state 98

state 71

    (24) vars -> var . vars
    (25) vars -> var .
    (24) vars -> . var vars
    (25) vars -> . var
    (26) var -> . datatype var1
    (122) datatype -> . INT
    (123) datatype -> . FLOAT
    (124) datatype -> . BOOL
    (125) datatype -> . STRING
    (126) datatype -> . CHAR
    (127) datatype -> . set_definition
    (128) datatype -> . map_definition
    (129) set_definition -> . SET < datatype >
    (138) map_definition -> . MAP < datatype , datatype >

  ! shift/reduce conflict for MAP resolved as shift
    READ            reduce using rule 25 (vars -> var .)
    PRINT           reduce using rule 25 (vars -> var .)
    ID              reduce using rule 25 (vars -> var .)
    RETURN          reduce using rule 25 (vars -> var .)
    IF              reduce using rule 25 (vars -> var .)
    WHILE           reduce using rule 25 (vars -> var .)
    }               reduce using rule 25 (vars -> var .)
    INT             shift and go to state 22
    FLOAT           shift and go to state 21
    BOOL            shift and go to state 23
    STRING          shift and go to state 17
    CHAR            shift and go to state 8
    SET             shift and go to state 9
    MAP             shift and go to state 18

  ! MAP             [ reduce using rule 25 (vars -> var .) ]

    vars                           shift and go to state 104
    set_definition                 shift and go to state 19
    datatype                       shift and go to state 66
    map_definition                 shift and go to state 7
    var                            shift and go to state 71

state 72

    (137) vars_aux -> empty .

    READ            reduce using rule 137 (vars_aux -> empty .)
    PRINT           reduce using rule 137 (vars_aux -> empty .)
    ID              reduce using rule 137 (vars_aux -> empty .)
    MAP             reduce using rule 137 (vars_aux -> empty .)
    RETURN          reduce using rule 137 (vars_aux -> empty .)
    IF              reduce using rule 137 (vars_aux -> empty .)
    WHILE           reduce using rule 137 (vars_aux -> empty .)
    }               reduce using rule 137 (vars_aux -> empty .)


state 73

    (13) procA -> proc1 ) { proc3 } .

    VOID            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    MAIN            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    INT             reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    FLOAT           reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    BOOL            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    STRING          reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    CHAR            reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    SET             reduce using rule 13 (procA -> proc1 ) { proc3 } .)
    MAP             reduce using rule 13 (procA -> proc1 ) { proc3 } .)


state 74

    (58) return -> RETURN . expression
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    exp                            shift and go to state 109
    expression                     shift and go to state 110
    empty                          shift and go to state 111

state 75

    (42) input -> READ . ( n_process_read input1 )

    (               shift and go to state 112


state 76

    (68) statement1 -> map_definition .

    ;               reduce using rule 68 (statement1 -> map_definition .)


state 77

    (72) statement1 -> function_call .

    ;               reduce using rule 72 (statement1 -> function_call .)


state 78

    (38) while -> WHILE . n_while_1 ( expression ) n_while_2 block n_while_3
    (39) n_while_1 -> .

    (               reduce using rule 39 (n_while_1 -> .)

    n_while_1                      shift and go to state 113

state 79

    (46) output -> PRINT . ( n_output_quad output1 )

    (               shift and go to state 114


state 80

    (20) proc3 -> n_quad_counter proc4 .

    }               reduce using rule 20 (proc3 -> n_quad_counter proc4 .)


state 81

    (140) map_assignment -> map_access . ASSIGNATOR exp

    ASSIGNATOR      shift and go to state 115


state 82

    (30) assignment -> assignment2 . ASSIGNATOR n_quad_assign expression

    ASSIGNATOR      shift and go to state 116


state 83

    (22) proc4 -> statement . proc4
    (22) proc4 -> . statement proc4
    (23) proc4 -> . empty
    (62) statement -> . statement1 ;
    (63) statement -> . statement2
    (142) empty -> .
    (64) statement1 -> . assignment
    (65) statement1 -> . input
    (66) statement1 -> . output
    (67) statement1 -> . set_operation
    (68) statement1 -> . map_definition
    (69) statement1 -> . return
    (70) statement1 -> . map_assignment
    (71) statement1 -> . map_operation
    (72) statement1 -> . function_call
    (73) statement2 -> . condition
    (74) statement2 -> . while
    (30) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (42) input -> . READ ( n_process_read input1 )
    (46) output -> . PRINT ( n_output_quad output1 )
    (59) set_operation -> . ID . OPERATION ( set_operation1 )
    (138) map_definition -> . MAP < datatype , datatype >
    (58) return -> . RETURN expression
    (140) map_assignment -> . map_access ASSIGNATOR exp
    (141) map_operation -> . ID . OPERATION ( )
    (50) function_call -> . n_era_size function_call1 )
    (33) condition -> . IF ( expression n_while_2 ) block condition1
    (38) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (31) assignment2 -> . ID
    (139) map_access -> . ID [ exp ]
    (51) n_era_size -> . ID (

    }               reduce using rule 142 (empty -> .)
    READ            shift and go to state 75
    PRINT           shift and go to state 79
    ID              shift and go to state 92
    MAP             shift and go to state 18
    RETURN          shift and go to state 74
    IF              shift and go to state 94
    WHILE           shift and go to state 78

    map_definition                 shift and go to state 76
    function_call                  shift and go to state 77
    proc4                          shift and go to state 117
    map_access                     shift and go to state 81
    assignment2                    shift and go to state 82
    statement                      shift and go to state 83
    input                          shift and go to state 84
    empty                          shift and go to state 85
    return                         shift and go to state 86
    statement2                     shift and go to state 87
    statement1                     shift and go to state 88
    n_era_size                     shift and go to state 89
    assignment                     shift and go to state 90
    map_operation                  shift and go to state 91
    condition                      shift and go to state 93
    set_operation                  shift and go to state 95
    map_assignment                 shift and go to state 96
    while                          shift and go to state 97
    output                         shift and go to state 98

state 84

    (65) statement1 -> input .

    ;               reduce using rule 65 (statement1 -> input .)


state 85

    (23) proc4 -> empty .

    }               reduce using rule 23 (proc4 -> empty .)


state 86

    (69) statement1 -> return .

    ;               reduce using rule 69 (statement1 -> return .)


state 87

    (63) statement -> statement2 .

    READ            reduce using rule 63 (statement -> statement2 .)
    PRINT           reduce using rule 63 (statement -> statement2 .)
    ID              reduce using rule 63 (statement -> statement2 .)
    MAP             reduce using rule 63 (statement -> statement2 .)
    RETURN          reduce using rule 63 (statement -> statement2 .)
    IF              reduce using rule 63 (statement -> statement2 .)
    WHILE           reduce using rule 63 (statement -> statement2 .)
    }               reduce using rule 63 (statement -> statement2 .)


state 88

    (62) statement -> statement1 . ;

    ;               shift and go to state 118


state 89

    (50) function_call -> n_era_size . function_call1 )
    (52) function_call1 -> . empty
    (53) function_call1 -> . function_call2
    (142) empty -> .
    (54) function_call2 -> . n_verify_argument , n_add_one_to_counter function_call2
    (55) function_call2 -> . n_verify_argument
    (57) n_verify_argument -> . expression
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty

    )               reduce using rule 142 (empty -> .)
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)
    !               shift and go to state 108

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp                            shift and go to state 109
    exp0                           shift and go to state 107
    function_call2                 shift and go to state 119
    function_call1                 shift and go to state 120
    expression                     shift and go to state 121
    n_verify_argument              shift and go to state 122
    empty                          shift and go to state 123

state 90

    (64) statement1 -> assignment .

    ;               reduce using rule 64 (statement1 -> assignment .)


state 91

    (71) statement1 -> map_operation .

    ;               reduce using rule 71 (statement1 -> map_operation .)


state 92

    (59) set_operation -> ID . . OPERATION ( set_operation1 )
    (141) map_operation -> ID . . OPERATION ( )
    (31) assignment2 -> ID .
    (139) map_access -> ID . [ exp ]
    (51) n_era_size -> ID . (

    .               shift and go to state 125
    ASSIGNATOR      reduce using rule 31 (assignment2 -> ID .)
    [               shift and go to state 126
    (               shift and go to state 124


state 93

    (73) statement2 -> condition .

    READ            reduce using rule 73 (statement2 -> condition .)
    PRINT           reduce using rule 73 (statement2 -> condition .)
    ID              reduce using rule 73 (statement2 -> condition .)
    MAP             reduce using rule 73 (statement2 -> condition .)
    RETURN          reduce using rule 73 (statement2 -> condition .)
    IF              reduce using rule 73 (statement2 -> condition .)
    WHILE           reduce using rule 73 (statement2 -> condition .)
    }               reduce using rule 73 (statement2 -> condition .)


state 94

    (33) condition -> IF . ( expression n_while_2 ) block condition1

    (               shift and go to state 127


state 95

    (67) statement1 -> set_operation .

    ;               reduce using rule 67 (statement1 -> set_operation .)


state 96

    (70) statement1 -> map_assignment .

    ;               reduce using rule 70 (statement1 -> map_assignment .)


state 97

    (74) statement2 -> while .

    READ            reduce using rule 74 (statement2 -> while .)
    PRINT           reduce using rule 74 (statement2 -> while .)
    ID              reduce using rule 74 (statement2 -> while .)
    MAP             reduce using rule 74 (statement2 -> while .)
    RETURN          reduce using rule 74 (statement2 -> while .)
    IF              reduce using rule 74 (statement2 -> while .)
    WHILE           reduce using rule 74 (statement2 -> while .)
    }               reduce using rule 74 (statement2 -> while .)


state 98

    (66) statement1 -> output .

    ;               reduce using rule 66 (statement1 -> output .)


state 99

    (19) proc3 -> var proc3 .

    }               reduce using rule 19 (proc3 -> var proc3 .)


state 100

    (138) map_definition -> MAP < datatype , datatype > .

    ID              reduce using rule 138 (map_definition -> MAP < datatype , datatype > .)
    ;               reduce using rule 138 (map_definition -> MAP < datatype , datatype > .)
    ,               reduce using rule 138 (map_definition -> MAP < datatype , datatype > .)
    >               reduce using rule 138 (map_definition -> MAP < datatype , datatype > .)


state 101

    (133) main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux . }

    }               shift and go to state 128


state 102

    (131) statement_aux -> statement . statement_aux
    (131) statement_aux -> . statement statement_aux
    (132) statement_aux -> . empty
    (62) statement -> . statement1 ;
    (63) statement -> . statement2
    (142) empty -> .
    (64) statement1 -> . assignment
    (65) statement1 -> . input
    (66) statement1 -> . output
    (67) statement1 -> . set_operation
    (68) statement1 -> . map_definition
    (69) statement1 -> . return
    (70) statement1 -> . map_assignment
    (71) statement1 -> . map_operation
    (72) statement1 -> . function_call
    (73) statement2 -> . condition
    (74) statement2 -> . while
    (30) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (42) input -> . READ ( n_process_read input1 )
    (46) output -> . PRINT ( n_output_quad output1 )
    (59) set_operation -> . ID . OPERATION ( set_operation1 )
    (138) map_definition -> . MAP < datatype , datatype >
    (58) return -> . RETURN expression
    (140) map_assignment -> . map_access ASSIGNATOR exp
    (141) map_operation -> . ID . OPERATION ( )
    (50) function_call -> . n_era_size function_call1 )
    (33) condition -> . IF ( expression n_while_2 ) block condition1
    (38) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (31) assignment2 -> . ID
    (139) map_access -> . ID [ exp ]
    (51) n_era_size -> . ID (

    }               reduce using rule 142 (empty -> .)
    READ            shift and go to state 75
    PRINT           shift and go to state 79
    ID              shift and go to state 92
    MAP             shift and go to state 18
    RETURN          shift and go to state 74
    IF              shift and go to state 94
    WHILE           shift and go to state 78

    map_definition                 shift and go to state 76
    function_call                  shift and go to state 77
    statement_aux                  shift and go to state 129
    map_access                     shift and go to state 81
    assignment2                    shift and go to state 82
    statement                      shift and go to state 102
    input                          shift and go to state 84
    empty                          shift and go to state 103
    return                         shift and go to state 86
    statement2                     shift and go to state 87
    statement1                     shift and go to state 88
    n_era_size                     shift and go to state 89
    assignment                     shift and go to state 90
    map_operation                  shift and go to state 91
    condition                      shift and go to state 93
    set_operation                  shift and go to state 95
    map_assignment                 shift and go to state 96
    while                          shift and go to state 97
    output                         shift and go to state 98

state 103

    (132) statement_aux -> empty .

    }               reduce using rule 132 (statement_aux -> empty .)


state 104

    (24) vars -> var vars .

    READ            reduce using rule 24 (vars -> var vars .)
    PRINT           reduce using rule 24 (vars -> var vars .)
    ID              reduce using rule 24 (vars -> var vars .)
    MAP             reduce using rule 24 (vars -> var vars .)
    RETURN          reduce using rule 24 (vars -> var vars .)
    IF              reduce using rule 24 (vars -> var vars .)
    WHILE           reduce using rule 24 (vars -> var vars .)
    }               reduce using rule 24 (vars -> var vars .)


state 105

    (97) term -> term_not . factor n_quad_muldiv term2
    (105) factor -> . ( n_push_false_bottom expression ) n_pop_false_bottom
    (106) factor -> . varcte
    (109) varcte -> . ID empty
    (110) varcte -> . varcte1
    (111) varcte1 -> . CTE_INT
    (112) varcte1 -> . CTE_FLOAT
    (113) varcte1 -> . CTE_BOOL
    (114) varcte1 -> . CTE_STRING
    (115) varcte1 -> . CTE_CHAR
    (116) varcte1 -> . function_call
    (117) varcte1 -> . map_access
    (118) varcte1 -> . map_operation
    (119) varcte1 -> . set_operation
    (50) function_call -> . n_era_size function_call1 )
    (139) map_access -> . ID [ exp ]
    (141) map_operation -> . ID . OPERATION ( )
    (59) set_operation -> . ID . OPERATION ( set_operation1 )
    (51) n_era_size -> . ID (

    (               shift and go to state 133
    ID              shift and go to state 138
    CTE_INT         shift and go to state 137
    CTE_FLOAT       shift and go to state 140
    CTE_BOOL        shift and go to state 141
    CTE_STRING      shift and go to state 142
    CTE_CHAR        shift and go to state 135

    map_operation                  shift and go to state 136
    set_operation                  shift and go to state 139
    map_access                     shift and go to state 143
    function_call                  shift and go to state 130
    factor                         shift and go to state 134
    varcte1                        shift and go to state 131
    n_era_size                     shift and go to state 89
    varcte                         shift and go to state 132

state 106

    (90) exp -> term . exp2
    (95) exp2 -> . addsub term n_quad_addsub exp2
    (96) exp2 -> . empty
    (91) addsub -> . +
    (92) addsub -> . -
    (142) empty -> .

    +               shift and go to state 145
    -               shift and go to state 146
    <               reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    NOT_EQ          reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    LEQ             reduce using rule 142 (empty -> .)
    GEQ             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)

    exp2                           shift and go to state 144
    addsub                         shift and go to state 147
    empty                          shift and go to state 148

state 107

    (83) expression -> exp0 . expression2
    (84) expression2 -> . logop exp0 n_quad_logop expression2
    (85) expression2 -> . empty
    (81) logop -> . OR
    (82) logop -> . AND
    (142) empty -> .

    OR              shift and go to state 152
    AND             shift and go to state 149
    ;               reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)

    empty                          shift and go to state 153
    expression2                    shift and go to state 151
    logop                          shift and go to state 150

state 108

    (103) term_not -> ! .

    (               reduce using rule 103 (term_not -> ! .)
    ID              reduce using rule 103 (term_not -> ! .)
    CTE_INT         reduce using rule 103 (term_not -> ! .)
    CTE_FLOAT       reduce using rule 103 (term_not -> ! .)
    CTE_BOOL        reduce using rule 103 (term_not -> ! .)
    CTE_STRING      reduce using rule 103 (term_not -> ! .)
    CTE_CHAR        reduce using rule 103 (term_not -> ! .)


state 109

    (87) exp0 -> exp . exp02
    (88) exp02 -> . relop exp
    (89) exp02 -> . empty
    (75) relop -> . <
    (76) relop -> . >
    (77) relop -> . NOT_EQ
    (78) relop -> . EQ
    (79) relop -> . LEQ
    (80) relop -> . GEQ
    (142) empty -> .

    <               shift and go to state 160
    >               shift and go to state 162
    NOT_EQ          shift and go to state 156
    EQ              shift and go to state 159
    LEQ             shift and go to state 157
    GEQ             shift and go to state 154
    OR              reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)

    exp02                          shift and go to state 158
    empty                          shift and go to state 161
    relop                          shift and go to state 155

state 110

    (58) return -> RETURN expression .

    ;               reduce using rule 58 (return -> RETURN expression .)


state 111

    (104) term_not -> empty .

    (               reduce using rule 104 (term_not -> empty .)
    ID              reduce using rule 104 (term_not -> empty .)
    CTE_INT         reduce using rule 104 (term_not -> empty .)
    CTE_FLOAT       reduce using rule 104 (term_not -> empty .)
    CTE_BOOL        reduce using rule 104 (term_not -> empty .)
    CTE_STRING      reduce using rule 104 (term_not -> empty .)
    CTE_CHAR        reduce using rule 104 (term_not -> empty .)


state 112

    (42) input -> READ ( . n_process_read input1 )
    (45) n_process_read -> . ID

    ID              shift and go to state 164

    n_process_read                 shift and go to state 163

state 113

    (38) while -> WHILE n_while_1 . ( expression ) n_while_2 block n_while_3

    (               shift and go to state 165


state 114

    (46) output -> PRINT ( . n_output_quad output1 )
    (49) n_output_quad -> . expression
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    n_output_quad                  shift and go to state 166
    exp                            shift and go to state 109
    expression                     shift and go to state 167
    empty                          shift and go to state 111

state 115

    (140) map_assignment -> map_access ASSIGNATOR . exp
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp                            shift and go to state 168
    empty                          shift and go to state 111

state 116

    (30) assignment -> assignment2 ASSIGNATOR . n_quad_assign expression
    (32) n_quad_assign -> .

    !               reduce using rule 32 (n_quad_assign -> .)
    (               reduce using rule 32 (n_quad_assign -> .)
    ID              reduce using rule 32 (n_quad_assign -> .)
    CTE_INT         reduce using rule 32 (n_quad_assign -> .)
    CTE_FLOAT       reduce using rule 32 (n_quad_assign -> .)
    CTE_BOOL        reduce using rule 32 (n_quad_assign -> .)
    CTE_STRING      reduce using rule 32 (n_quad_assign -> .)
    CTE_CHAR        reduce using rule 32 (n_quad_assign -> .)

    n_quad_assign                  shift and go to state 169

state 117

    (22) proc4 -> statement proc4 .

    }               reduce using rule 22 (proc4 -> statement proc4 .)


state 118

    (62) statement -> statement1 ; .

    READ            reduce using rule 62 (statement -> statement1 ; .)
    PRINT           reduce using rule 62 (statement -> statement1 ; .)
    ID              reduce using rule 62 (statement -> statement1 ; .)
    MAP             reduce using rule 62 (statement -> statement1 ; .)
    RETURN          reduce using rule 62 (statement -> statement1 ; .)
    IF              reduce using rule 62 (statement -> statement1 ; .)
    WHILE           reduce using rule 62 (statement -> statement1 ; .)
    }               reduce using rule 62 (statement -> statement1 ; .)


state 119

    (53) function_call1 -> function_call2 .

    )               reduce using rule 53 (function_call1 -> function_call2 .)


state 120

    (50) function_call -> n_era_size function_call1 . )

    )               shift and go to state 170


state 121

    (57) n_verify_argument -> expression .

    ,               reduce using rule 57 (n_verify_argument -> expression .)
    )               reduce using rule 57 (n_verify_argument -> expression .)


state 122

    (54) function_call2 -> n_verify_argument . , n_add_one_to_counter function_call2
    (55) function_call2 -> n_verify_argument .

    ,               shift and go to state 171
    )               reduce using rule 55 (function_call2 -> n_verify_argument .)


state 123

    (52) function_call1 -> empty .
    (104) term_not -> empty .

    )               reduce using rule 52 (function_call1 -> empty .)
    (               reduce using rule 104 (term_not -> empty .)
    ID              reduce using rule 104 (term_not -> empty .)
    CTE_INT         reduce using rule 104 (term_not -> empty .)
    CTE_FLOAT       reduce using rule 104 (term_not -> empty .)
    CTE_BOOL        reduce using rule 104 (term_not -> empty .)
    CTE_STRING      reduce using rule 104 (term_not -> empty .)
    CTE_CHAR        reduce using rule 104 (term_not -> empty .)


state 124

    (51) n_era_size -> ID ( .

    !               reduce using rule 51 (n_era_size -> ID ( .)
    )               reduce using rule 51 (n_era_size -> ID ( .)
    (               reduce using rule 51 (n_era_size -> ID ( .)
    ID              reduce using rule 51 (n_era_size -> ID ( .)
    CTE_INT         reduce using rule 51 (n_era_size -> ID ( .)
    CTE_FLOAT       reduce using rule 51 (n_era_size -> ID ( .)
    CTE_BOOL        reduce using rule 51 (n_era_size -> ID ( .)
    CTE_STRING      reduce using rule 51 (n_era_size -> ID ( .)
    CTE_CHAR        reduce using rule 51 (n_era_size -> ID ( .)


state 125

    (59) set_operation -> ID . . OPERATION ( set_operation1 )
    (141) map_operation -> ID . . OPERATION ( )

    OPERATION       shift and go to state 172


state 126

    (139) map_access -> ID [ . exp ]
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp                            shift and go to state 173
    empty                          shift and go to state 111

state 127

    (33) condition -> IF ( . expression n_while_2 ) block condition1
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp                            shift and go to state 109
    exp0                           shift and go to state 107
    empty                          shift and go to state 111
    expression                     shift and go to state 174

state 128

    (133) main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux } .

    $end            reduce using rule 133 (main -> MAIN n_clear_scope n_main_quad2 { vars_aux statement_aux } .)


state 129

    (131) statement_aux -> statement statement_aux .

    }               reduce using rule 131 (statement_aux -> statement statement_aux .)


state 130

    (116) varcte1 -> function_call .

    *               reduce using rule 116 (varcte1 -> function_call .)
    /               reduce using rule 116 (varcte1 -> function_call .)
    +               reduce using rule 116 (varcte1 -> function_call .)
    -               reduce using rule 116 (varcte1 -> function_call .)
    <               reduce using rule 116 (varcte1 -> function_call .)
    >               reduce using rule 116 (varcte1 -> function_call .)
    NOT_EQ          reduce using rule 116 (varcte1 -> function_call .)
    EQ              reduce using rule 116 (varcte1 -> function_call .)
    LEQ             reduce using rule 116 (varcte1 -> function_call .)
    GEQ             reduce using rule 116 (varcte1 -> function_call .)
    OR              reduce using rule 116 (varcte1 -> function_call .)
    AND             reduce using rule 116 (varcte1 -> function_call .)
    ;               reduce using rule 116 (varcte1 -> function_call .)
    ,               reduce using rule 116 (varcte1 -> function_call .)
    )               reduce using rule 116 (varcte1 -> function_call .)
    ]               reduce using rule 116 (varcte1 -> function_call .)


state 131

    (110) varcte -> varcte1 .

    *               reduce using rule 110 (varcte -> varcte1 .)
    /               reduce using rule 110 (varcte -> varcte1 .)
    +               reduce using rule 110 (varcte -> varcte1 .)
    -               reduce using rule 110 (varcte -> varcte1 .)
    <               reduce using rule 110 (varcte -> varcte1 .)
    >               reduce using rule 110 (varcte -> varcte1 .)
    NOT_EQ          reduce using rule 110 (varcte -> varcte1 .)
    EQ              reduce using rule 110 (varcte -> varcte1 .)
    LEQ             reduce using rule 110 (varcte -> varcte1 .)
    GEQ             reduce using rule 110 (varcte -> varcte1 .)
    OR              reduce using rule 110 (varcte -> varcte1 .)
    AND             reduce using rule 110 (varcte -> varcte1 .)
    ;               reduce using rule 110 (varcte -> varcte1 .)
    ,               reduce using rule 110 (varcte -> varcte1 .)
    )               reduce using rule 110 (varcte -> varcte1 .)
    ]               reduce using rule 110 (varcte -> varcte1 .)


state 132

    (106) factor -> varcte .

    *               reduce using rule 106 (factor -> varcte .)
    /               reduce using rule 106 (factor -> varcte .)
    +               reduce using rule 106 (factor -> varcte .)
    -               reduce using rule 106 (factor -> varcte .)
    <               reduce using rule 106 (factor -> varcte .)
    >               reduce using rule 106 (factor -> varcte .)
    NOT_EQ          reduce using rule 106 (factor -> varcte .)
    EQ              reduce using rule 106 (factor -> varcte .)
    LEQ             reduce using rule 106 (factor -> varcte .)
    GEQ             reduce using rule 106 (factor -> varcte .)
    OR              reduce using rule 106 (factor -> varcte .)
    AND             reduce using rule 106 (factor -> varcte .)
    ;               reduce using rule 106 (factor -> varcte .)
    ,               reduce using rule 106 (factor -> varcte .)
    )               reduce using rule 106 (factor -> varcte .)
    ]               reduce using rule 106 (factor -> varcte .)


state 133

    (105) factor -> ( . n_push_false_bottom expression ) n_pop_false_bottom
    (107) n_push_false_bottom -> .

    !               reduce using rule 107 (n_push_false_bottom -> .)
    (               reduce using rule 107 (n_push_false_bottom -> .)
    ID              reduce using rule 107 (n_push_false_bottom -> .)
    CTE_INT         reduce using rule 107 (n_push_false_bottom -> .)
    CTE_FLOAT       reduce using rule 107 (n_push_false_bottom -> .)
    CTE_BOOL        reduce using rule 107 (n_push_false_bottom -> .)
    CTE_STRING      reduce using rule 107 (n_push_false_bottom -> .)
    CTE_CHAR        reduce using rule 107 (n_push_false_bottom -> .)

    n_push_false_bottom            shift and go to state 175

state 134

    (97) term -> term_not factor . n_quad_muldiv term2
    (98) n_quad_muldiv -> .

    *               reduce using rule 98 (n_quad_muldiv -> .)
    /               reduce using rule 98 (n_quad_muldiv -> .)
    +               reduce using rule 98 (n_quad_muldiv -> .)
    -               reduce using rule 98 (n_quad_muldiv -> .)
    <               reduce using rule 98 (n_quad_muldiv -> .)
    >               reduce using rule 98 (n_quad_muldiv -> .)
    NOT_EQ          reduce using rule 98 (n_quad_muldiv -> .)
    EQ              reduce using rule 98 (n_quad_muldiv -> .)
    LEQ             reduce using rule 98 (n_quad_muldiv -> .)
    GEQ             reduce using rule 98 (n_quad_muldiv -> .)
    OR              reduce using rule 98 (n_quad_muldiv -> .)
    AND             reduce using rule 98 (n_quad_muldiv -> .)
    ;               reduce using rule 98 (n_quad_muldiv -> .)
    ,               reduce using rule 98 (n_quad_muldiv -> .)
    )               reduce using rule 98 (n_quad_muldiv -> .)
    ]               reduce using rule 98 (n_quad_muldiv -> .)

    n_quad_muldiv                  shift and go to state 176

state 135

    (115) varcte1 -> CTE_CHAR .

    *               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    /               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    +               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    -               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    <               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    >               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    NOT_EQ          reduce using rule 115 (varcte1 -> CTE_CHAR .)
    EQ              reduce using rule 115 (varcte1 -> CTE_CHAR .)
    LEQ             reduce using rule 115 (varcte1 -> CTE_CHAR .)
    GEQ             reduce using rule 115 (varcte1 -> CTE_CHAR .)
    OR              reduce using rule 115 (varcte1 -> CTE_CHAR .)
    AND             reduce using rule 115 (varcte1 -> CTE_CHAR .)
    ;               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    ,               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    )               reduce using rule 115 (varcte1 -> CTE_CHAR .)
    ]               reduce using rule 115 (varcte1 -> CTE_CHAR .)


state 136

    (118) varcte1 -> map_operation .

    *               reduce using rule 118 (varcte1 -> map_operation .)
    /               reduce using rule 118 (varcte1 -> map_operation .)
    +               reduce using rule 118 (varcte1 -> map_operation .)
    -               reduce using rule 118 (varcte1 -> map_operation .)
    <               reduce using rule 118 (varcte1 -> map_operation .)
    >               reduce using rule 118 (varcte1 -> map_operation .)
    NOT_EQ          reduce using rule 118 (varcte1 -> map_operation .)
    EQ              reduce using rule 118 (varcte1 -> map_operation .)
    LEQ             reduce using rule 118 (varcte1 -> map_operation .)
    GEQ             reduce using rule 118 (varcte1 -> map_operation .)
    OR              reduce using rule 118 (varcte1 -> map_operation .)
    AND             reduce using rule 118 (varcte1 -> map_operation .)
    ;               reduce using rule 118 (varcte1 -> map_operation .)
    ,               reduce using rule 118 (varcte1 -> map_operation .)
    )               reduce using rule 118 (varcte1 -> map_operation .)
    ]               reduce using rule 118 (varcte1 -> map_operation .)


state 137

    (111) varcte1 -> CTE_INT .

    *               reduce using rule 111 (varcte1 -> CTE_INT .)
    /               reduce using rule 111 (varcte1 -> CTE_INT .)
    +               reduce using rule 111 (varcte1 -> CTE_INT .)
    -               reduce using rule 111 (varcte1 -> CTE_INT .)
    <               reduce using rule 111 (varcte1 -> CTE_INT .)
    >               reduce using rule 111 (varcte1 -> CTE_INT .)
    NOT_EQ          reduce using rule 111 (varcte1 -> CTE_INT .)
    EQ              reduce using rule 111 (varcte1 -> CTE_INT .)
    LEQ             reduce using rule 111 (varcte1 -> CTE_INT .)
    GEQ             reduce using rule 111 (varcte1 -> CTE_INT .)
    OR              reduce using rule 111 (varcte1 -> CTE_INT .)
    AND             reduce using rule 111 (varcte1 -> CTE_INT .)
    ;               reduce using rule 111 (varcte1 -> CTE_INT .)
    ,               reduce using rule 111 (varcte1 -> CTE_INT .)
    )               reduce using rule 111 (varcte1 -> CTE_INT .)
    ]               reduce using rule 111 (varcte1 -> CTE_INT .)


state 138

    (109) varcte -> ID . empty
    (139) map_access -> ID . [ exp ]
    (141) map_operation -> ID . . OPERATION ( )
    (59) set_operation -> ID . . OPERATION ( set_operation1 )
    (51) n_era_size -> ID . (
    (142) empty -> .

    [               shift and go to state 126
    .               shift and go to state 177
    (               shift and go to state 124
    *               reduce using rule 142 (empty -> .)
    /               reduce using rule 142 (empty -> .)
    +               reduce using rule 142 (empty -> .)
    -               reduce using rule 142 (empty -> .)
    <               reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    NOT_EQ          reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    LEQ             reduce using rule 142 (empty -> .)
    GEQ             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)

    empty                          shift and go to state 178

state 139

    (119) varcte1 -> set_operation .

    *               reduce using rule 119 (varcte1 -> set_operation .)
    /               reduce using rule 119 (varcte1 -> set_operation .)
    +               reduce using rule 119 (varcte1 -> set_operation .)
    -               reduce using rule 119 (varcte1 -> set_operation .)
    <               reduce using rule 119 (varcte1 -> set_operation .)
    >               reduce using rule 119 (varcte1 -> set_operation .)
    NOT_EQ          reduce using rule 119 (varcte1 -> set_operation .)
    EQ              reduce using rule 119 (varcte1 -> set_operation .)
    LEQ             reduce using rule 119 (varcte1 -> set_operation .)
    GEQ             reduce using rule 119 (varcte1 -> set_operation .)
    OR              reduce using rule 119 (varcte1 -> set_operation .)
    AND             reduce using rule 119 (varcte1 -> set_operation .)
    ;               reduce using rule 119 (varcte1 -> set_operation .)
    ,               reduce using rule 119 (varcte1 -> set_operation .)
    )               reduce using rule 119 (varcte1 -> set_operation .)
    ]               reduce using rule 119 (varcte1 -> set_operation .)


state 140

    (112) varcte1 -> CTE_FLOAT .

    *               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    /               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    +               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    -               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    <               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    >               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    NOT_EQ          reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    EQ              reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    LEQ             reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    GEQ             reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    OR              reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    AND             reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    ;               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    ,               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    )               reduce using rule 112 (varcte1 -> CTE_FLOAT .)
    ]               reduce using rule 112 (varcte1 -> CTE_FLOAT .)


state 141

    (113) varcte1 -> CTE_BOOL .

    *               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    /               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    +               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    -               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    <               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    >               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    NOT_EQ          reduce using rule 113 (varcte1 -> CTE_BOOL .)
    EQ              reduce using rule 113 (varcte1 -> CTE_BOOL .)
    LEQ             reduce using rule 113 (varcte1 -> CTE_BOOL .)
    GEQ             reduce using rule 113 (varcte1 -> CTE_BOOL .)
    OR              reduce using rule 113 (varcte1 -> CTE_BOOL .)
    AND             reduce using rule 113 (varcte1 -> CTE_BOOL .)
    ;               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    ,               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    )               reduce using rule 113 (varcte1 -> CTE_BOOL .)
    ]               reduce using rule 113 (varcte1 -> CTE_BOOL .)


state 142

    (114) varcte1 -> CTE_STRING .

    *               reduce using rule 114 (varcte1 -> CTE_STRING .)
    /               reduce using rule 114 (varcte1 -> CTE_STRING .)
    +               reduce using rule 114 (varcte1 -> CTE_STRING .)
    -               reduce using rule 114 (varcte1 -> CTE_STRING .)
    <               reduce using rule 114 (varcte1 -> CTE_STRING .)
    >               reduce using rule 114 (varcte1 -> CTE_STRING .)
    NOT_EQ          reduce using rule 114 (varcte1 -> CTE_STRING .)
    EQ              reduce using rule 114 (varcte1 -> CTE_STRING .)
    LEQ             reduce using rule 114 (varcte1 -> CTE_STRING .)
    GEQ             reduce using rule 114 (varcte1 -> CTE_STRING .)
    OR              reduce using rule 114 (varcte1 -> CTE_STRING .)
    AND             reduce using rule 114 (varcte1 -> CTE_STRING .)
    ;               reduce using rule 114 (varcte1 -> CTE_STRING .)
    ,               reduce using rule 114 (varcte1 -> CTE_STRING .)
    )               reduce using rule 114 (varcte1 -> CTE_STRING .)
    ]               reduce using rule 114 (varcte1 -> CTE_STRING .)


state 143

    (117) varcte1 -> map_access .

    *               reduce using rule 117 (varcte1 -> map_access .)
    /               reduce using rule 117 (varcte1 -> map_access .)
    +               reduce using rule 117 (varcte1 -> map_access .)
    -               reduce using rule 117 (varcte1 -> map_access .)
    <               reduce using rule 117 (varcte1 -> map_access .)
    >               reduce using rule 117 (varcte1 -> map_access .)
    NOT_EQ          reduce using rule 117 (varcte1 -> map_access .)
    EQ              reduce using rule 117 (varcte1 -> map_access .)
    LEQ             reduce using rule 117 (varcte1 -> map_access .)
    GEQ             reduce using rule 117 (varcte1 -> map_access .)
    OR              reduce using rule 117 (varcte1 -> map_access .)
    AND             reduce using rule 117 (varcte1 -> map_access .)
    ;               reduce using rule 117 (varcte1 -> map_access .)
    ,               reduce using rule 117 (varcte1 -> map_access .)
    )               reduce using rule 117 (varcte1 -> map_access .)
    ]               reduce using rule 117 (varcte1 -> map_access .)


state 144

    (90) exp -> term exp2 .

    <               reduce using rule 90 (exp -> term exp2 .)
    >               reduce using rule 90 (exp -> term exp2 .)
    NOT_EQ          reduce using rule 90 (exp -> term exp2 .)
    EQ              reduce using rule 90 (exp -> term exp2 .)
    LEQ             reduce using rule 90 (exp -> term exp2 .)
    GEQ             reduce using rule 90 (exp -> term exp2 .)
    OR              reduce using rule 90 (exp -> term exp2 .)
    AND             reduce using rule 90 (exp -> term exp2 .)
    ,               reduce using rule 90 (exp -> term exp2 .)
    )               reduce using rule 90 (exp -> term exp2 .)
    ;               reduce using rule 90 (exp -> term exp2 .)
    ]               reduce using rule 90 (exp -> term exp2 .)


state 145

    (91) addsub -> + .

    !               reduce using rule 91 (addsub -> + .)
    (               reduce using rule 91 (addsub -> + .)
    ID              reduce using rule 91 (addsub -> + .)
    CTE_INT         reduce using rule 91 (addsub -> + .)
    CTE_FLOAT       reduce using rule 91 (addsub -> + .)
    CTE_BOOL        reduce using rule 91 (addsub -> + .)
    CTE_STRING      reduce using rule 91 (addsub -> + .)
    CTE_CHAR        reduce using rule 91 (addsub -> + .)


state 146

    (92) addsub -> - .

    !               reduce using rule 92 (addsub -> - .)
    (               reduce using rule 92 (addsub -> - .)
    ID              reduce using rule 92 (addsub -> - .)
    CTE_INT         reduce using rule 92 (addsub -> - .)
    CTE_FLOAT       reduce using rule 92 (addsub -> - .)
    CTE_BOOL        reduce using rule 92 (addsub -> - .)
    CTE_STRING      reduce using rule 92 (addsub -> - .)
    CTE_CHAR        reduce using rule 92 (addsub -> - .)


state 147

    (95) exp2 -> addsub . term n_quad_addsub exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 179
    empty                          shift and go to state 111

state 148

    (96) exp2 -> empty .

    <               reduce using rule 96 (exp2 -> empty .)
    >               reduce using rule 96 (exp2 -> empty .)
    NOT_EQ          reduce using rule 96 (exp2 -> empty .)
    EQ              reduce using rule 96 (exp2 -> empty .)
    LEQ             reduce using rule 96 (exp2 -> empty .)
    GEQ             reduce using rule 96 (exp2 -> empty .)
    OR              reduce using rule 96 (exp2 -> empty .)
    AND             reduce using rule 96 (exp2 -> empty .)
    ;               reduce using rule 96 (exp2 -> empty .)
    ,               reduce using rule 96 (exp2 -> empty .)
    )               reduce using rule 96 (exp2 -> empty .)
    ]               reduce using rule 96 (exp2 -> empty .)


state 149

    (82) logop -> AND .

    !               reduce using rule 82 (logop -> AND .)
    (               reduce using rule 82 (logop -> AND .)
    ID              reduce using rule 82 (logop -> AND .)
    CTE_INT         reduce using rule 82 (logop -> AND .)
    CTE_FLOAT       reduce using rule 82 (logop -> AND .)
    CTE_BOOL        reduce using rule 82 (logop -> AND .)
    CTE_STRING      reduce using rule 82 (logop -> AND .)
    CTE_CHAR        reduce using rule 82 (logop -> AND .)


state 150

    (84) expression2 -> logop . exp0 n_quad_logop expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    exp0                           shift and go to state 180
    term                           shift and go to state 106
    exp                            shift and go to state 109
    empty                          shift and go to state 111

state 151

    (83) expression -> exp0 expression2 .

    )               reduce using rule 83 (expression -> exp0 expression2 .)
    ,               reduce using rule 83 (expression -> exp0 expression2 .)
    ;               reduce using rule 83 (expression -> exp0 expression2 .)


state 152

    (81) logop -> OR .

    !               reduce using rule 81 (logop -> OR .)
    (               reduce using rule 81 (logop -> OR .)
    ID              reduce using rule 81 (logop -> OR .)
    CTE_INT         reduce using rule 81 (logop -> OR .)
    CTE_FLOAT       reduce using rule 81 (logop -> OR .)
    CTE_BOOL        reduce using rule 81 (logop -> OR .)
    CTE_STRING      reduce using rule 81 (logop -> OR .)
    CTE_CHAR        reduce using rule 81 (logop -> OR .)


state 153

    (85) expression2 -> empty .

    ;               reduce using rule 85 (expression2 -> empty .)
    ,               reduce using rule 85 (expression2 -> empty .)
    )               reduce using rule 85 (expression2 -> empty .)


state 154

    (80) relop -> GEQ .

    !               reduce using rule 80 (relop -> GEQ .)
    (               reduce using rule 80 (relop -> GEQ .)
    ID              reduce using rule 80 (relop -> GEQ .)
    CTE_INT         reduce using rule 80 (relop -> GEQ .)
    CTE_FLOAT       reduce using rule 80 (relop -> GEQ .)
    CTE_BOOL        reduce using rule 80 (relop -> GEQ .)
    CTE_STRING      reduce using rule 80 (relop -> GEQ .)
    CTE_CHAR        reduce using rule 80 (relop -> GEQ .)


state 155

    (88) exp02 -> relop . exp
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp                            shift and go to state 181
    empty                          shift and go to state 111

state 156

    (77) relop -> NOT_EQ .

    !               reduce using rule 77 (relop -> NOT_EQ .)
    (               reduce using rule 77 (relop -> NOT_EQ .)
    ID              reduce using rule 77 (relop -> NOT_EQ .)
    CTE_INT         reduce using rule 77 (relop -> NOT_EQ .)
    CTE_FLOAT       reduce using rule 77 (relop -> NOT_EQ .)
    CTE_BOOL        reduce using rule 77 (relop -> NOT_EQ .)
    CTE_STRING      reduce using rule 77 (relop -> NOT_EQ .)
    CTE_CHAR        reduce using rule 77 (relop -> NOT_EQ .)


state 157

    (79) relop -> LEQ .

    !               reduce using rule 79 (relop -> LEQ .)
    (               reduce using rule 79 (relop -> LEQ .)
    ID              reduce using rule 79 (relop -> LEQ .)
    CTE_INT         reduce using rule 79 (relop -> LEQ .)
    CTE_FLOAT       reduce using rule 79 (relop -> LEQ .)
    CTE_BOOL        reduce using rule 79 (relop -> LEQ .)
    CTE_STRING      reduce using rule 79 (relop -> LEQ .)
    CTE_CHAR        reduce using rule 79 (relop -> LEQ .)


state 158

    (87) exp0 -> exp exp02 .

    OR              reduce using rule 87 (exp0 -> exp exp02 .)
    AND             reduce using rule 87 (exp0 -> exp exp02 .)
    ,               reduce using rule 87 (exp0 -> exp exp02 .)
    )               reduce using rule 87 (exp0 -> exp exp02 .)
    ;               reduce using rule 87 (exp0 -> exp exp02 .)


state 159

    (78) relop -> EQ .

    !               reduce using rule 78 (relop -> EQ .)
    (               reduce using rule 78 (relop -> EQ .)
    ID              reduce using rule 78 (relop -> EQ .)
    CTE_INT         reduce using rule 78 (relop -> EQ .)
    CTE_FLOAT       reduce using rule 78 (relop -> EQ .)
    CTE_BOOL        reduce using rule 78 (relop -> EQ .)
    CTE_STRING      reduce using rule 78 (relop -> EQ .)
    CTE_CHAR        reduce using rule 78 (relop -> EQ .)


state 160

    (75) relop -> < .

    !               reduce using rule 75 (relop -> < .)
    (               reduce using rule 75 (relop -> < .)
    ID              reduce using rule 75 (relop -> < .)
    CTE_INT         reduce using rule 75 (relop -> < .)
    CTE_FLOAT       reduce using rule 75 (relop -> < .)
    CTE_BOOL        reduce using rule 75 (relop -> < .)
    CTE_STRING      reduce using rule 75 (relop -> < .)
    CTE_CHAR        reduce using rule 75 (relop -> < .)


state 161

    (89) exp02 -> empty .

    OR              reduce using rule 89 (exp02 -> empty .)
    AND             reduce using rule 89 (exp02 -> empty .)
    ;               reduce using rule 89 (exp02 -> empty .)
    ,               reduce using rule 89 (exp02 -> empty .)
    )               reduce using rule 89 (exp02 -> empty .)


state 162

    (76) relop -> > .

    !               reduce using rule 76 (relop -> > .)
    (               reduce using rule 76 (relop -> > .)
    ID              reduce using rule 76 (relop -> > .)
    CTE_INT         reduce using rule 76 (relop -> > .)
    CTE_FLOAT       reduce using rule 76 (relop -> > .)
    CTE_BOOL        reduce using rule 76 (relop -> > .)
    CTE_STRING      reduce using rule 76 (relop -> > .)
    CTE_CHAR        reduce using rule 76 (relop -> > .)


state 163

    (42) input -> READ ( n_process_read . input1 )
    (43) input1 -> . , n_process_read input1
    (44) input1 -> . empty
    (142) empty -> .

    ,               shift and go to state 183
    )               reduce using rule 142 (empty -> .)

    input1                         shift and go to state 182
    empty                          shift and go to state 184

state 164

    (45) n_process_read -> ID .

    ,               reduce using rule 45 (n_process_read -> ID .)
    )               reduce using rule 45 (n_process_read -> ID .)


state 165

    (38) while -> WHILE n_while_1 ( . expression ) n_while_2 block n_while_3
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp                            shift and go to state 109
    exp0                           shift and go to state 107
    empty                          shift and go to state 111
    expression                     shift and go to state 185

state 166

    (46) output -> PRINT ( n_output_quad . output1 )
    (47) output1 -> . , n_output_quad output1
    (48) output1 -> . empty
    (142) empty -> .

    ,               shift and go to state 187
    )               reduce using rule 142 (empty -> .)

    output1                        shift and go to state 186
    empty                          shift and go to state 188

state 167

    (49) n_output_quad -> expression .

    ,               reduce using rule 49 (n_output_quad -> expression .)
    )               reduce using rule 49 (n_output_quad -> expression .)


state 168

    (140) map_assignment -> map_access ASSIGNATOR exp .

    ;               reduce using rule 140 (map_assignment -> map_access ASSIGNATOR exp .)


state 169

    (30) assignment -> assignment2 ASSIGNATOR n_quad_assign . expression
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    exp                            shift and go to state 109
    expression                     shift and go to state 189
    empty                          shift and go to state 111

state 170

    (50) function_call -> n_era_size function_call1 ) .

    ;               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    *               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    /               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    +               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    -               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    <               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    >               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    NOT_EQ          reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    EQ              reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    LEQ             reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    GEQ             reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    OR              reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    AND             reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    ,               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    )               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)
    ]               reduce using rule 50 (function_call -> n_era_size function_call1 ) .)


state 171

    (54) function_call2 -> n_verify_argument , . n_add_one_to_counter function_call2
    (56) n_add_one_to_counter -> .

    !               reduce using rule 56 (n_add_one_to_counter -> .)
    (               reduce using rule 56 (n_add_one_to_counter -> .)
    ID              reduce using rule 56 (n_add_one_to_counter -> .)
    CTE_INT         reduce using rule 56 (n_add_one_to_counter -> .)
    CTE_FLOAT       reduce using rule 56 (n_add_one_to_counter -> .)
    CTE_BOOL        reduce using rule 56 (n_add_one_to_counter -> .)
    CTE_STRING      reduce using rule 56 (n_add_one_to_counter -> .)
    CTE_CHAR        reduce using rule 56 (n_add_one_to_counter -> .)

    n_add_one_to_counter           shift and go to state 190

state 172

    (59) set_operation -> ID . OPERATION . ( set_operation1 )
    (141) map_operation -> ID . OPERATION . ( )

    (               shift and go to state 191


state 173

    (139) map_access -> ID [ exp . ]

    ]               shift and go to state 192


state 174

    (33) condition -> IF ( expression . n_while_2 ) block condition1
    (40) n_while_2 -> .

    )               reduce using rule 40 (n_while_2 -> .)

    n_while_2                      shift and go to state 193

state 175

    (105) factor -> ( n_push_false_bottom . expression ) n_pop_false_bottom
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    exp                            shift and go to state 109
    expression                     shift and go to state 194
    empty                          shift and go to state 111

state 176

    (97) term -> term_not factor n_quad_muldiv . term2
    (100) term2 -> . muldiv factor n_quad_muldiv term2
    (101) term2 -> . n_quad_not
    (93) muldiv -> . *
    (94) muldiv -> . /
    (102) n_quad_not -> .

    *               shift and go to state 196
    /               shift and go to state 198
    +               reduce using rule 102 (n_quad_not -> .)
    -               reduce using rule 102 (n_quad_not -> .)
    <               reduce using rule 102 (n_quad_not -> .)
    >               reduce using rule 102 (n_quad_not -> .)
    NOT_EQ          reduce using rule 102 (n_quad_not -> .)
    EQ              reduce using rule 102 (n_quad_not -> .)
    LEQ             reduce using rule 102 (n_quad_not -> .)
    GEQ             reduce using rule 102 (n_quad_not -> .)
    OR              reduce using rule 102 (n_quad_not -> .)
    AND             reduce using rule 102 (n_quad_not -> .)
    ;               reduce using rule 102 (n_quad_not -> .)
    ,               reduce using rule 102 (n_quad_not -> .)
    )               reduce using rule 102 (n_quad_not -> .)
    ]               reduce using rule 102 (n_quad_not -> .)

    term2                          shift and go to state 195
    n_quad_not                     shift and go to state 197
    muldiv                         shift and go to state 199

state 177

    (141) map_operation -> ID . . OPERATION ( )
    (59) set_operation -> ID . . OPERATION ( set_operation1 )

    OPERATION       shift and go to state 200


state 178

    (109) varcte -> ID empty .

    *               reduce using rule 109 (varcte -> ID empty .)
    /               reduce using rule 109 (varcte -> ID empty .)
    +               reduce using rule 109 (varcte -> ID empty .)
    -               reduce using rule 109 (varcte -> ID empty .)
    <               reduce using rule 109 (varcte -> ID empty .)
    >               reduce using rule 109 (varcte -> ID empty .)
    NOT_EQ          reduce using rule 109 (varcte -> ID empty .)
    EQ              reduce using rule 109 (varcte -> ID empty .)
    LEQ             reduce using rule 109 (varcte -> ID empty .)
    GEQ             reduce using rule 109 (varcte -> ID empty .)
    OR              reduce using rule 109 (varcte -> ID empty .)
    AND             reduce using rule 109 (varcte -> ID empty .)
    ;               reduce using rule 109 (varcte -> ID empty .)
    ,               reduce using rule 109 (varcte -> ID empty .)
    )               reduce using rule 109 (varcte -> ID empty .)
    ]               reduce using rule 109 (varcte -> ID empty .)


state 179

    (95) exp2 -> addsub term . n_quad_addsub exp2
    (99) n_quad_addsub -> .

    +               reduce using rule 99 (n_quad_addsub -> .)
    -               reduce using rule 99 (n_quad_addsub -> .)
    <               reduce using rule 99 (n_quad_addsub -> .)
    >               reduce using rule 99 (n_quad_addsub -> .)
    NOT_EQ          reduce using rule 99 (n_quad_addsub -> .)
    EQ              reduce using rule 99 (n_quad_addsub -> .)
    LEQ             reduce using rule 99 (n_quad_addsub -> .)
    GEQ             reduce using rule 99 (n_quad_addsub -> .)
    OR              reduce using rule 99 (n_quad_addsub -> .)
    AND             reduce using rule 99 (n_quad_addsub -> .)
    ;               reduce using rule 99 (n_quad_addsub -> .)
    ,               reduce using rule 99 (n_quad_addsub -> .)
    )               reduce using rule 99 (n_quad_addsub -> .)
    ]               reduce using rule 99 (n_quad_addsub -> .)

    n_quad_addsub                  shift and go to state 201

state 180

    (84) expression2 -> logop exp0 . n_quad_logop expression2
    (86) n_quad_logop -> .

    OR              reduce using rule 86 (n_quad_logop -> .)
    AND             reduce using rule 86 (n_quad_logop -> .)
    ;               reduce using rule 86 (n_quad_logop -> .)
    ,               reduce using rule 86 (n_quad_logop -> .)
    )               reduce using rule 86 (n_quad_logop -> .)

    n_quad_logop                   shift and go to state 202

state 181

    (88) exp02 -> relop exp .

    OR              reduce using rule 88 (exp02 -> relop exp .)
    AND             reduce using rule 88 (exp02 -> relop exp .)
    ;               reduce using rule 88 (exp02 -> relop exp .)
    ,               reduce using rule 88 (exp02 -> relop exp .)
    )               reduce using rule 88 (exp02 -> relop exp .)


state 182

    (42) input -> READ ( n_process_read input1 . )

    )               shift and go to state 203


state 183

    (43) input1 -> , . n_process_read input1
    (45) n_process_read -> . ID

    ID              shift and go to state 164

    n_process_read                 shift and go to state 204

state 184

    (44) input1 -> empty .

    )               reduce using rule 44 (input1 -> empty .)


state 185

    (38) while -> WHILE n_while_1 ( expression . ) n_while_2 block n_while_3

    )               shift and go to state 205


state 186

    (46) output -> PRINT ( n_output_quad output1 . )

    )               shift and go to state 206


state 187

    (47) output1 -> , . n_output_quad output1
    (49) n_output_quad -> . expression
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    n_output_quad                  shift and go to state 207
    exp                            shift and go to state 109
    expression                     shift and go to state 167
    empty                          shift and go to state 111

state 188

    (48) output1 -> empty .

    )               reduce using rule 48 (output1 -> empty .)


state 189

    (30) assignment -> assignment2 ASSIGNATOR n_quad_assign expression .

    ;               reduce using rule 30 (assignment -> assignment2 ASSIGNATOR n_quad_assign expression .)


state 190

    (54) function_call2 -> n_verify_argument , n_add_one_to_counter . function_call2
    (54) function_call2 -> . n_verify_argument , n_add_one_to_counter function_call2
    (55) function_call2 -> . n_verify_argument
    (57) n_verify_argument -> . expression
    (83) expression -> . exp0 expression2
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty
    (142) empty -> .

    !               shift and go to state 108
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)

    term_not                       shift and go to state 105
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    function_call2                 shift and go to state 208
    exp                            shift and go to state 109
    expression                     shift and go to state 121
    n_verify_argument              shift and go to state 122
    empty                          shift and go to state 111

state 191

    (59) set_operation -> ID . OPERATION ( . set_operation1 )
    (141) map_operation -> ID . OPERATION ( . )
    (60) set_operation1 -> . expression
    (61) set_operation1 -> . empty
    (83) expression -> . exp0 expression2
    (142) empty -> .
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 210
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)
    !               shift and go to state 108

  ! )               [ reduce using rule 142 (empty -> .) ]

    term_not                       shift and go to state 105
    set_operation1                 shift and go to state 209
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    exp                            shift and go to state 109
    expression                     shift and go to state 211
    empty                          shift and go to state 212

state 192

    (139) map_access -> ID [ exp ] .

    ASSIGNATOR      reduce using rule 139 (map_access -> ID [ exp ] .)
    *               reduce using rule 139 (map_access -> ID [ exp ] .)
    /               reduce using rule 139 (map_access -> ID [ exp ] .)
    +               reduce using rule 139 (map_access -> ID [ exp ] .)
    -               reduce using rule 139 (map_access -> ID [ exp ] .)
    <               reduce using rule 139 (map_access -> ID [ exp ] .)
    >               reduce using rule 139 (map_access -> ID [ exp ] .)
    NOT_EQ          reduce using rule 139 (map_access -> ID [ exp ] .)
    EQ              reduce using rule 139 (map_access -> ID [ exp ] .)
    LEQ             reduce using rule 139 (map_access -> ID [ exp ] .)
    GEQ             reduce using rule 139 (map_access -> ID [ exp ] .)
    OR              reduce using rule 139 (map_access -> ID [ exp ] .)
    AND             reduce using rule 139 (map_access -> ID [ exp ] .)
    ;               reduce using rule 139 (map_access -> ID [ exp ] .)
    ,               reduce using rule 139 (map_access -> ID [ exp ] .)
    )               reduce using rule 139 (map_access -> ID [ exp ] .)
    ]               reduce using rule 139 (map_access -> ID [ exp ] .)


state 193

    (33) condition -> IF ( expression n_while_2 . ) block condition1

    )               shift and go to state 213


state 194

    (105) factor -> ( n_push_false_bottom expression . ) n_pop_false_bottom

    )               shift and go to state 214


state 195

    (97) term -> term_not factor n_quad_muldiv term2 .

    +               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    -               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    <               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    >               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    NOT_EQ          reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    EQ              reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    LEQ             reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    GEQ             reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    OR              reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    AND             reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    )               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    ;               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    ]               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)
    ,               reduce using rule 97 (term -> term_not factor n_quad_muldiv term2 .)


state 196

    (93) muldiv -> * .

    (               reduce using rule 93 (muldiv -> * .)
    ID              reduce using rule 93 (muldiv -> * .)
    CTE_INT         reduce using rule 93 (muldiv -> * .)
    CTE_FLOAT       reduce using rule 93 (muldiv -> * .)
    CTE_BOOL        reduce using rule 93 (muldiv -> * .)
    CTE_STRING      reduce using rule 93 (muldiv -> * .)
    CTE_CHAR        reduce using rule 93 (muldiv -> * .)


state 197

    (101) term2 -> n_quad_not .

    +               reduce using rule 101 (term2 -> n_quad_not .)
    -               reduce using rule 101 (term2 -> n_quad_not .)
    <               reduce using rule 101 (term2 -> n_quad_not .)
    >               reduce using rule 101 (term2 -> n_quad_not .)
    NOT_EQ          reduce using rule 101 (term2 -> n_quad_not .)
    EQ              reduce using rule 101 (term2 -> n_quad_not .)
    LEQ             reduce using rule 101 (term2 -> n_quad_not .)
    GEQ             reduce using rule 101 (term2 -> n_quad_not .)
    OR              reduce using rule 101 (term2 -> n_quad_not .)
    AND             reduce using rule 101 (term2 -> n_quad_not .)
    ;               reduce using rule 101 (term2 -> n_quad_not .)
    ,               reduce using rule 101 (term2 -> n_quad_not .)
    )               reduce using rule 101 (term2 -> n_quad_not .)
    ]               reduce using rule 101 (term2 -> n_quad_not .)


state 198

    (94) muldiv -> / .

    (               reduce using rule 94 (muldiv -> / .)
    ID              reduce using rule 94 (muldiv -> / .)
    CTE_INT         reduce using rule 94 (muldiv -> / .)
    CTE_FLOAT       reduce using rule 94 (muldiv -> / .)
    CTE_BOOL        reduce using rule 94 (muldiv -> / .)
    CTE_STRING      reduce using rule 94 (muldiv -> / .)
    CTE_CHAR        reduce using rule 94 (muldiv -> / .)


state 199

    (100) term2 -> muldiv . factor n_quad_muldiv term2
    (105) factor -> . ( n_push_false_bottom expression ) n_pop_false_bottom
    (106) factor -> . varcte
    (109) varcte -> . ID empty
    (110) varcte -> . varcte1
    (111) varcte1 -> . CTE_INT
    (112) varcte1 -> . CTE_FLOAT
    (113) varcte1 -> . CTE_BOOL
    (114) varcte1 -> . CTE_STRING
    (115) varcte1 -> . CTE_CHAR
    (116) varcte1 -> . function_call
    (117) varcte1 -> . map_access
    (118) varcte1 -> . map_operation
    (119) varcte1 -> . set_operation
    (50) function_call -> . n_era_size function_call1 )
    (139) map_access -> . ID [ exp ]
    (141) map_operation -> . ID . OPERATION ( )
    (59) set_operation -> . ID . OPERATION ( set_operation1 )
    (51) n_era_size -> . ID (

    (               shift and go to state 133
    ID              shift and go to state 138
    CTE_INT         shift and go to state 137
    CTE_FLOAT       shift and go to state 140
    CTE_BOOL        shift and go to state 141
    CTE_STRING      shift and go to state 142
    CTE_CHAR        shift and go to state 135

    map_operation                  shift and go to state 136
    set_operation                  shift and go to state 139
    map_access                     shift and go to state 143
    function_call                  shift and go to state 130
    factor                         shift and go to state 215
    varcte1                        shift and go to state 131
    n_era_size                     shift and go to state 89
    varcte                         shift and go to state 132

state 200

    (141) map_operation -> ID . OPERATION . ( )
    (59) set_operation -> ID . OPERATION . ( set_operation1 )

    (               shift and go to state 216


state 201

    (95) exp2 -> addsub term n_quad_addsub . exp2
    (95) exp2 -> . addsub term n_quad_addsub exp2
    (96) exp2 -> . empty
    (91) addsub -> . +
    (92) addsub -> . -
    (142) empty -> .

    +               shift and go to state 145
    -               shift and go to state 146
    <               reduce using rule 142 (empty -> .)
    >               reduce using rule 142 (empty -> .)
    NOT_EQ          reduce using rule 142 (empty -> .)
    EQ              reduce using rule 142 (empty -> .)
    LEQ             reduce using rule 142 (empty -> .)
    GEQ             reduce using rule 142 (empty -> .)
    OR              reduce using rule 142 (empty -> .)
    AND             reduce using rule 142 (empty -> .)
    ;               reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)
    ]               reduce using rule 142 (empty -> .)

    exp2                           shift and go to state 217
    addsub                         shift and go to state 147
    empty                          shift and go to state 148

state 202

    (84) expression2 -> logop exp0 n_quad_logop . expression2
    (84) expression2 -> . logop exp0 n_quad_logop expression2
    (85) expression2 -> . empty
    (81) logop -> . OR
    (82) logop -> . AND
    (142) empty -> .

    OR              shift and go to state 152
    AND             shift and go to state 149
    ;               reduce using rule 142 (empty -> .)
    ,               reduce using rule 142 (empty -> .)
    )               reduce using rule 142 (empty -> .)

    logop                          shift and go to state 150
    empty                          shift and go to state 153
    expression2                    shift and go to state 218

state 203

    (42) input -> READ ( n_process_read input1 ) .

    ;               reduce using rule 42 (input -> READ ( n_process_read input1 ) .)


state 204

    (43) input1 -> , n_process_read . input1
    (43) input1 -> . , n_process_read input1
    (44) input1 -> . empty
    (142) empty -> .

    ,               shift and go to state 183
    )               reduce using rule 142 (empty -> .)

    input1                         shift and go to state 219
    empty                          shift and go to state 184

state 205

    (38) while -> WHILE n_while_1 ( expression ) . n_while_2 block n_while_3
    (40) n_while_2 -> .

    {               reduce using rule 40 (n_while_2 -> .)

    n_while_2                      shift and go to state 220

state 206

    (46) output -> PRINT ( n_output_quad output1 ) .

    ;               reduce using rule 46 (output -> PRINT ( n_output_quad output1 ) .)


state 207

    (47) output1 -> , n_output_quad . output1
    (47) output1 -> . , n_output_quad output1
    (48) output1 -> . empty
    (142) empty -> .

    ,               shift and go to state 187
    )               reduce using rule 142 (empty -> .)

    output1                        shift and go to state 221
    empty                          shift and go to state 188

state 208

    (54) function_call2 -> n_verify_argument , n_add_one_to_counter function_call2 .

    )               reduce using rule 54 (function_call2 -> n_verify_argument , n_add_one_to_counter function_call2 .)


state 209

    (59) set_operation -> ID . OPERATION ( set_operation1 . )

    )               shift and go to state 222


state 210

    (141) map_operation -> ID . OPERATION ( ) .

    ;               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    *               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    /               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    +               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    -               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    <               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    >               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    NOT_EQ          reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    EQ              reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    LEQ             reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    GEQ             reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    OR              reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    AND             reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    ,               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    )               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)
    ]               reduce using rule 141 (map_operation -> ID . OPERATION ( ) .)


state 211

    (60) set_operation1 -> expression .

    )               reduce using rule 60 (set_operation1 -> expression .)


state 212

    (61) set_operation1 -> empty .
    (104) term_not -> empty .

    )               reduce using rule 61 (set_operation1 -> empty .)
    (               reduce using rule 104 (term_not -> empty .)
    ID              reduce using rule 104 (term_not -> empty .)
    CTE_INT         reduce using rule 104 (term_not -> empty .)
    CTE_FLOAT       reduce using rule 104 (term_not -> empty .)
    CTE_BOOL        reduce using rule 104 (term_not -> empty .)
    CTE_STRING      reduce using rule 104 (term_not -> empty .)
    CTE_CHAR        reduce using rule 104 (term_not -> empty .)


state 213

    (33) condition -> IF ( expression n_while_2 ) . block condition1
    (130) block -> . { statement_aux }

    {               shift and go to state 223

    block                          shift and go to state 224

state 214

    (105) factor -> ( n_push_false_bottom expression ) . n_pop_false_bottom
    (108) n_pop_false_bottom -> .

    *               reduce using rule 108 (n_pop_false_bottom -> .)
    /               reduce using rule 108 (n_pop_false_bottom -> .)
    +               reduce using rule 108 (n_pop_false_bottom -> .)
    -               reduce using rule 108 (n_pop_false_bottom -> .)
    <               reduce using rule 108 (n_pop_false_bottom -> .)
    >               reduce using rule 108 (n_pop_false_bottom -> .)
    NOT_EQ          reduce using rule 108 (n_pop_false_bottom -> .)
    EQ              reduce using rule 108 (n_pop_false_bottom -> .)
    LEQ             reduce using rule 108 (n_pop_false_bottom -> .)
    GEQ             reduce using rule 108 (n_pop_false_bottom -> .)
    OR              reduce using rule 108 (n_pop_false_bottom -> .)
    AND             reduce using rule 108 (n_pop_false_bottom -> .)
    ;               reduce using rule 108 (n_pop_false_bottom -> .)
    ,               reduce using rule 108 (n_pop_false_bottom -> .)
    )               reduce using rule 108 (n_pop_false_bottom -> .)
    ]               reduce using rule 108 (n_pop_false_bottom -> .)

    n_pop_false_bottom             shift and go to state 225

state 215

    (100) term2 -> muldiv factor . n_quad_muldiv term2
    (98) n_quad_muldiv -> .

    *               reduce using rule 98 (n_quad_muldiv -> .)
    /               reduce using rule 98 (n_quad_muldiv -> .)
    +               reduce using rule 98 (n_quad_muldiv -> .)
    -               reduce using rule 98 (n_quad_muldiv -> .)
    <               reduce using rule 98 (n_quad_muldiv -> .)
    >               reduce using rule 98 (n_quad_muldiv -> .)
    NOT_EQ          reduce using rule 98 (n_quad_muldiv -> .)
    EQ              reduce using rule 98 (n_quad_muldiv -> .)
    LEQ             reduce using rule 98 (n_quad_muldiv -> .)
    GEQ             reduce using rule 98 (n_quad_muldiv -> .)
    OR              reduce using rule 98 (n_quad_muldiv -> .)
    AND             reduce using rule 98 (n_quad_muldiv -> .)
    ;               reduce using rule 98 (n_quad_muldiv -> .)
    ,               reduce using rule 98 (n_quad_muldiv -> .)
    )               reduce using rule 98 (n_quad_muldiv -> .)
    ]               reduce using rule 98 (n_quad_muldiv -> .)

    n_quad_muldiv                  shift and go to state 226

state 216

    (141) map_operation -> ID . OPERATION ( . )
    (59) set_operation -> ID . OPERATION ( . set_operation1 )
    (60) set_operation1 -> . expression
    (61) set_operation1 -> . empty
    (83) expression -> . exp0 expression2
    (142) empty -> .
    (87) exp0 -> . exp exp02
    (90) exp -> . term exp2
    (97) term -> . term_not factor n_quad_muldiv term2
    (103) term_not -> . !
    (104) term_not -> . empty

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 210
    (               reduce using rule 142 (empty -> .)
    ID              reduce using rule 142 (empty -> .)
    CTE_INT         reduce using rule 142 (empty -> .)
    CTE_FLOAT       reduce using rule 142 (empty -> .)
    CTE_BOOL        reduce using rule 142 (empty -> .)
    CTE_STRING      reduce using rule 142 (empty -> .)
    CTE_CHAR        reduce using rule 142 (empty -> .)
    !               shift and go to state 108

  ! )               [ reduce using rule 142 (empty -> .) ]

    term_not                       shift and go to state 105
    set_operation1                 shift and go to state 209
    term                           shift and go to state 106
    exp0                           shift and go to state 107
    exp                            shift and go to state 109
    expression                     shift and go to state 211
    empty                          shift and go to state 212

state 217

    (95) exp2 -> addsub term n_quad_addsub exp2 .

    <               reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    >               reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    NOT_EQ          reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    EQ              reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    LEQ             reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    GEQ             reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    OR              reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    AND             reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    ;               reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    ,               reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    )               reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)
    ]               reduce using rule 95 (exp2 -> addsub term n_quad_addsub exp2 .)


state 218

    (84) expression2 -> logop exp0 n_quad_logop expression2 .

    ;               reduce using rule 84 (expression2 -> logop exp0 n_quad_logop expression2 .)
    ,               reduce using rule 84 (expression2 -> logop exp0 n_quad_logop expression2 .)
    )               reduce using rule 84 (expression2 -> logop exp0 n_quad_logop expression2 .)


state 219

    (43) input1 -> , n_process_read input1 .

    )               reduce using rule 43 (input1 -> , n_process_read input1 .)


state 220

    (38) while -> WHILE n_while_1 ( expression ) n_while_2 . block n_while_3
    (130) block -> . { statement_aux }

    {               shift and go to state 223

    block                          shift and go to state 227

state 221

    (47) output1 -> , n_output_quad output1 .

    )               reduce using rule 47 (output1 -> , n_output_quad output1 .)


state 222

    (59) set_operation -> ID . OPERATION ( set_operation1 ) .

    ;               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    *               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    /               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    +               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    -               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    <               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    >               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    NOT_EQ          reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    EQ              reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    LEQ             reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    GEQ             reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    OR              reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    AND             reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    ,               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    )               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)
    ]               reduce using rule 59 (set_operation -> ID . OPERATION ( set_operation1 ) .)


state 223

    (130) block -> { . statement_aux }
    (131) statement_aux -> . statement statement_aux
    (132) statement_aux -> . empty
    (62) statement -> . statement1 ;
    (63) statement -> . statement2
    (142) empty -> .
    (64) statement1 -> . assignment
    (65) statement1 -> . input
    (66) statement1 -> . output
    (67) statement1 -> . set_operation
    (68) statement1 -> . map_definition
    (69) statement1 -> . return
    (70) statement1 -> . map_assignment
    (71) statement1 -> . map_operation
    (72) statement1 -> . function_call
    (73) statement2 -> . condition
    (74) statement2 -> . while
    (30) assignment -> . assignment2 ASSIGNATOR n_quad_assign expression
    (42) input -> . READ ( n_process_read input1 )
    (46) output -> . PRINT ( n_output_quad output1 )
    (59) set_operation -> . ID . OPERATION ( set_operation1 )
    (138) map_definition -> . MAP < datatype , datatype >
    (58) return -> . RETURN expression
    (140) map_assignment -> . map_access ASSIGNATOR exp
    (141) map_operation -> . ID . OPERATION ( )
    (50) function_call -> . n_era_size function_call1 )
    (33) condition -> . IF ( expression n_while_2 ) block condition1
    (38) while -> . WHILE n_while_1 ( expression ) n_while_2 block n_while_3
    (31) assignment2 -> . ID
    (139) map_access -> . ID [ exp ]
    (51) n_era_size -> . ID (

    }               reduce using rule 142 (empty -> .)
    READ            shift and go to state 75
    PRINT           shift and go to state 79
    ID              shift and go to state 92
    MAP             shift and go to state 18
    RETURN          shift and go to state 74
    IF              shift and go to state 94
    WHILE           shift and go to state 78

    map_definition                 shift and go to state 76
    function_call                  shift and go to state 77
    statement_aux                  shift and go to state 228
    map_access                     shift and go to state 81
    assignment2                    shift and go to state 82
    statement                      shift and go to state 102
    input                          shift and go to state 84
    empty                          shift and go to state 103
    return                         shift and go to state 86
    statement2                     shift and go to state 87
    statement1                     shift and go to state 88
    n_era_size                     shift and go to state 89
    assignment                     shift and go to state 90
    map_operation                  shift and go to state 91
    condition                      shift and go to state 93
    set_operation                  shift and go to state 95
    map_assignment                 shift and go to state 96
    while                          shift and go to state 97
    output                         shift and go to state 98

state 224

    (33) condition -> IF ( expression n_while_2 ) block . condition1
    (34) condition1 -> . ELSE n_if_2 block n_if_3
    (35) condition1 -> . n_if_3
    (37) n_if_3 -> .

    ELSE            shift and go to state 230
    READ            reduce using rule 37 (n_if_3 -> .)
    PRINT           reduce using rule 37 (n_if_3 -> .)
    ID              reduce using rule 37 (n_if_3 -> .)
    MAP             reduce using rule 37 (n_if_3 -> .)
    RETURN          reduce using rule 37 (n_if_3 -> .)
    IF              reduce using rule 37 (n_if_3 -> .)
    WHILE           reduce using rule 37 (n_if_3 -> .)
    }               reduce using rule 37 (n_if_3 -> .)

    n_if_3                         shift and go to state 229
    condition1                     shift and go to state 231

state 225

    (105) factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .

    *               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    /               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    +               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    -               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    <               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    >               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    NOT_EQ          reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    EQ              reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    LEQ             reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    GEQ             reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    OR              reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    AND             reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    ;               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    ,               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    )               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)
    ]               reduce using rule 105 (factor -> ( n_push_false_bottom expression ) n_pop_false_bottom .)


state 226

    (100) term2 -> muldiv factor n_quad_muldiv . term2
    (100) term2 -> . muldiv factor n_quad_muldiv term2
    (101) term2 -> . n_quad_not
    (93) muldiv -> . *
    (94) muldiv -> . /
    (102) n_quad_not -> .

    *               shift and go to state 196
    /               shift and go to state 198
    +               reduce using rule 102 (n_quad_not -> .)
    -               reduce using rule 102 (n_quad_not -> .)
    <               reduce using rule 102 (n_quad_not -> .)
    >               reduce using rule 102 (n_quad_not -> .)
    NOT_EQ          reduce using rule 102 (n_quad_not -> .)
    EQ              reduce using rule 102 (n_quad_not -> .)
    LEQ             reduce using rule 102 (n_quad_not -> .)
    GEQ             reduce using rule 102 (n_quad_not -> .)
    OR              reduce using rule 102 (n_quad_not -> .)
    AND             reduce using rule 102 (n_quad_not -> .)
    ;               reduce using rule 102 (n_quad_not -> .)
    ,               reduce using rule 102 (n_quad_not -> .)
    )               reduce using rule 102 (n_quad_not -> .)
    ]               reduce using rule 102 (n_quad_not -> .)

    term2                          shift and go to state 232
    n_quad_not                     shift and go to state 197
    muldiv                         shift and go to state 199

state 227

    (38) while -> WHILE n_while_1 ( expression ) n_while_2 block . n_while_3
    (41) n_while_3 -> .

    READ            reduce using rule 41 (n_while_3 -> .)
    PRINT           reduce using rule 41 (n_while_3 -> .)
    ID              reduce using rule 41 (n_while_3 -> .)
    MAP             reduce using rule 41 (n_while_3 -> .)
    RETURN          reduce using rule 41 (n_while_3 -> .)
    IF              reduce using rule 41 (n_while_3 -> .)
    WHILE           reduce using rule 41 (n_while_3 -> .)
    }               reduce using rule 41 (n_while_3 -> .)

    n_while_3                      shift and go to state 233

state 228

    (130) block -> { statement_aux . }

    }               shift and go to state 234


state 229

    (35) condition1 -> n_if_3 .

    READ            reduce using rule 35 (condition1 -> n_if_3 .)
    PRINT           reduce using rule 35 (condition1 -> n_if_3 .)
    ID              reduce using rule 35 (condition1 -> n_if_3 .)
    MAP             reduce using rule 35 (condition1 -> n_if_3 .)
    RETURN          reduce using rule 35 (condition1 -> n_if_3 .)
    IF              reduce using rule 35 (condition1 -> n_if_3 .)
    WHILE           reduce using rule 35 (condition1 -> n_if_3 .)
    }               reduce using rule 35 (condition1 -> n_if_3 .)


state 230

    (34) condition1 -> ELSE . n_if_2 block n_if_3
    (36) n_if_2 -> .

    {               reduce using rule 36 (n_if_2 -> .)

    n_if_2                         shift and go to state 235

state 231

    (33) condition -> IF ( expression n_while_2 ) block condition1 .

    READ            reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)
    PRINT           reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)
    ID              reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)
    MAP             reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)
    RETURN          reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)
    IF              reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)
    WHILE           reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)
    }               reduce using rule 33 (condition -> IF ( expression n_while_2 ) block condition1 .)


state 232

    (100) term2 -> muldiv factor n_quad_muldiv term2 .

    +               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    -               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    <               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    >               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    NOT_EQ          reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    EQ              reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    LEQ             reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    GEQ             reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    OR              reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    AND             reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    ;               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    ,               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    )               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)
    ]               reduce using rule 100 (term2 -> muldiv factor n_quad_muldiv term2 .)


state 233

    (38) while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .

    READ            reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    PRINT           reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    ID              reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    MAP             reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    RETURN          reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    IF              reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    WHILE           reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)
    }               reduce using rule 38 (while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3 .)


state 234

    (130) block -> { statement_aux } .

    READ            reduce using rule 130 (block -> { statement_aux } .)
    PRINT           reduce using rule 130 (block -> { statement_aux } .)
    ID              reduce using rule 130 (block -> { statement_aux } .)
    MAP             reduce using rule 130 (block -> { statement_aux } .)
    RETURN          reduce using rule 130 (block -> { statement_aux } .)
    IF              reduce using rule 130 (block -> { statement_aux } .)
    WHILE           reduce using rule 130 (block -> { statement_aux } .)
    }               reduce using rule 130 (block -> { statement_aux } .)
    ELSE            reduce using rule 130 (block -> { statement_aux } .)


state 235

    (34) condition1 -> ELSE n_if_2 . block n_if_3
    (130) block -> . { statement_aux }

    {               shift and go to state 223

    block                          shift and go to state 236

state 236

    (34) condition1 -> ELSE n_if_2 block . n_if_3
    (37) n_if_3 -> .

    READ            reduce using rule 37 (n_if_3 -> .)
    PRINT           reduce using rule 37 (n_if_3 -> .)
    ID              reduce using rule 37 (n_if_3 -> .)
    MAP             reduce using rule 37 (n_if_3 -> .)
    RETURN          reduce using rule 37 (n_if_3 -> .)
    IF              reduce using rule 37 (n_if_3 -> .)
    WHILE           reduce using rule 37 (n_if_3 -> .)
    }               reduce using rule 37 (n_if_3 -> .)

    n_if_3                         shift and go to state 237

state 237

    (34) condition1 -> ELSE n_if_2 block n_if_3 .

    READ            reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)
    PRINT           reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)
    ID              reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)
    MAP             reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)
    RETURN          reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)
    IF              reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)
    WHILE           reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)
    }               reduce using rule 34 (condition1 -> ELSE n_if_2 block n_if_3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for SET in state 5 resolved as shift
WARNING: shift/reduce conflict for MAP in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 13 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 13 resolved as shift
WARNING: shift/reduce conflict for INT in state 13 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 13 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 13 resolved as shift
WARNING: shift/reduce conflict for STRING in state 13 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 13 resolved as shift
WARNING: shift/reduce conflict for SET in state 13 resolved as shift
WARNING: shift/reduce conflict for MAP in state 13 resolved as shift
WARNING: shift/reduce conflict for VOID in state 15 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 15 resolved as shift
WARNING: shift/reduce conflict for INT in state 15 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 15 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 15 resolved as shift
WARNING: shift/reduce conflict for STRING in state 15 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 15 resolved as shift
WARNING: shift/reduce conflict for SET in state 15 resolved as shift
WARNING: shift/reduce conflict for MAP in state 15 resolved as shift
WARNING: shift/reduce conflict for MAP in state 57 resolved as shift
WARNING: shift/reduce conflict for MAP in state 62 resolved as shift
WARNING: shift/reduce conflict for MAP in state 65 resolved as shift
WARNING: shift/reduce conflict for MAP in state 71 resolved as shift
WARNING: shift/reduce conflict for ) in state 191 resolved as shift
WARNING: shift/reduce conflict for ) in state 216 resolved as shift
