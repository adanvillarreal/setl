   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : . LexToken(PROGRAM,'program',1,0)
   yacc.py: 445:Action : Shift and goto state 1
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 435:Stack  : PROGRAM . LexToken(ID,'aPlusB',1,8)
   yacc.py: 445:Action : Shift and goto state 3
   yacc.py: 410:
   yacc.py: 411:State  : 3
   yacc.py: 435:Stack  : PROGRAM ID . LexToken(;,';',1,14)
   yacc.py: 445:Action : Shift and goto state 4
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : PROGRAM ID ; . LexToken(INT,'int',1,17)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; INT . LexToken(ID,'a',1,21)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 19
   yacc.py: 506:Result : <str @ 0x7f61047afb70> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 19
   yacc.py: 435:Stack  : PROGRAM ID ; datatype . LexToken(ID,'a',1,21)
   yacc.py: 445:Action : Shift and goto state 35
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID . LexToken(,,',',1,22)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , . LexToken(ID,'b',1,24)
   yacc.py: 445:Action : Shift and goto state 54
   yacc.py: 410:
   yacc.py: 411:State  : 54
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , ID . LexToken(;,';',1,25)
   yacc.py: 445:Action : Shift and goto state 45
   yacc.py: 410:
   yacc.py: 411:State  : 45
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , ID ; . LexToken(BOOL,'bool',1,28)
   yacc.py: 471:Action : Reduce rule [var2 -> ;] with [';'] and goto state 42
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , ID var2 . LexToken(BOOL,'bool',1,28)
   yacc.py: 471:Action : Reduce rule [var1 -> ID var2] with ['b',None] and goto state 53
   yacc.py: 506:Result : <str @ 0x7f6105d455a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 53
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , var1 . LexToken(BOOL,'bool',1,28)
   yacc.py: 471:Action : Reduce rule [var1 -> ID , var1] with ['a',',','b'] and goto state 34
   yacc.py: 506:Result : <str @ 0x7f61047af9b8> ('a b')
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : PROGRAM ID ; datatype var1 . LexToken(BOOL,'bool',1,28)
   yacc.py: 471:Action : Reduce rule [var -> datatype var1] with ['int','a b'] and goto state 12
   yacc.py: 506:Result : <str @ 0x7f610469a540> ('int a b')
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 435:Stack  : PROGRAM ID ; var . LexToken(BOOL,'bool',1,28)
   yacc.py: 445:Action : Shift and goto state 22
   yacc.py: 410:
   yacc.py: 411:State  : 22
   yacc.py: 435:Stack  : PROGRAM ID ; var BOOL . LexToken(ID,'t',1,33)
   yacc.py: 471:Action : Reduce rule [datatype -> BOOL] with ['bool'] and goto state 19
   yacc.py: 506:Result : <str @ 0x7f610469a570> ('bool')
   yacc.py: 410:
   yacc.py: 411:State  : 19
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype . LexToken(ID,'t',1,33)
   yacc.py: 445:Action : Shift and goto state 35
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID . LexToken(,,',',1,34)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID , . LexToken(ID,'y',1,36)
   yacc.py: 445:Action : Shift and goto state 54
   yacc.py: 410:
   yacc.py: 411:State  : 54
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID , ID . LexToken(;,';',1,37)
   yacc.py: 445:Action : Shift and goto state 45
   yacc.py: 410:
   yacc.py: 411:State  : 45
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID , ID ; . LexToken(INT,'int',1,40)
   yacc.py: 471:Action : Reduce rule [var2 -> ;] with [';'] and goto state 42
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID , ID var2 . LexToken(INT,'int',1,40)
   yacc.py: 471:Action : Reduce rule [var1 -> ID var2] with ['y',None] and goto state 53
   yacc.py: 506:Result : <str @ 0x7f6105c98260> ('y')
   yacc.py: 410:
   yacc.py: 411:State  : 53
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID , var1 . LexToken(INT,'int',1,40)
   yacc.py: 471:Action : Reduce rule [var1 -> ID , var1] with ['t',',','y'] and goto state 34
   yacc.py: 506:Result : <str @ 0x7f61047af9b8> ('t y')
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype var1 . LexToken(INT,'int',1,40)
   yacc.py: 471:Action : Reduce rule [var -> datatype var1] with ['bool','t y'] and goto state 12
   yacc.py: 506:Result : <str @ 0x7f610469a630> ('bool t y')
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 435:Stack  : PROGRAM ID ; var var . LexToken(INT,'int',1,40)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; var var INT . LexToken(ID,'sum',1,44)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 19
   yacc.py: 506:Result : <str @ 0x7f61047afb70> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 19
   yacc.py: 435:Stack  : PROGRAM ID ; var var datatype . LexToken(ID,'sum',1,44)
   yacc.py: 445:Action : Shift and goto state 35
   yacc.py: 410:
   yacc.py: 411:State  : 35
   yacc.py: 435:Stack  : PROGRAM ID ; var var datatype ID . LexToken((,'(',1,47)
   yacc.py: 445:Action : Shift and goto state 43
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 435:Stack  : PROGRAM ID ; var var datatype ID ( . LexToken(),')',1,48)
   yacc.py: 471:Action : Reduce rule [proca1 -> datatype ID (] with ['int','sum','('] and goto state 11
   yacc.py: 506:Result : <str @ 0x7f610469a6f0> ('intsum')
   yacc.py: 410:
   yacc.py: 411:State  : 11
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 . LexToken(),')',1,48)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 25
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 25
   yacc.py: 430:Defaulted state 25: Reduce using 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 empty . LexToken(),')',1,48)
   yacc.py: 471:Action : Reduce rule [proc1 -> empty] with [None] and goto state 24
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 . LexToken(),')',1,48)
   yacc.py: 445:Action : Shift and goto state 37
   yacc.py: 410:
   yacc.py: 411:State  : 37
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) . LexToken({,'{',1,49)
   yacc.py: 445:Action : Shift and goto state 47
   yacc.py: 410:
   yacc.py: 411:State  : 47
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { . LexToken(INT,'int',1,56)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { INT . LexToken(ID,'res',1,60)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 59
   yacc.py: 506:Result : <str @ 0x7f6104647030> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 59
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { datatype . LexToken(ID,'res',1,60)
   yacc.py: 445:Action : Shift and goto state 54
   yacc.py: 410:
   yacc.py: 411:State  : 54
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { datatype ID . LexToken(;,';',1,63)
   yacc.py: 445:Action : Shift and goto state 45
   yacc.py: 410:
   yacc.py: 411:State  : 45
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { datatype ID ; . LexToken(ID,'res',1,70)
   yacc.py: 471:Action : Reduce rule [var2 -> ;] with [';'] and goto state 42
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { datatype ID var2 . LexToken(ID,'res',1,70)
   yacc.py: 471:Action : Reduce rule [var1 -> ID var2] with ['res',None] and goto state 34
   yacc.py: 506:Result : <str @ 0x7f6104647080> ('res')
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { datatype var1 . LexToken(ID,'res',1,70)
   yacc.py: 471:Action : Reduce rule [var -> datatype var1] with ['int','res'] and goto state 72
   yacc.py: 506:Result : <str @ 0x7f610469a720> ('int res')
   yacc.py: 410:
   yacc.py: 411:State  : 72
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var . LexToken(ID,'res',1,70)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID . LexToken(ASSIGNATOR,':=',1,74)
   yacc.py: 445:Action : Shift and goto state 109
   yacc.py: 410:
   yacc.py: 411:State  : 109
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR . LexToken(ID,'a',1,77)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR empty . LexToken(ID,'a',1,77)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not . LexToken(ID,'a',1,77)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not ID . LexToken(EQ,'==',1,79)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not ID n_push_operand . LexToken(EQ,'==',1,79)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['a',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d45580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not varcte . LexToken(EQ,'==',1,79)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not factor . LexToken(EQ,'==',1,79)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not factor n_quad_muldiv . LexToken(EQ,'==',1,79)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not factor n_quad_muldiv n_quad_not . LexToken(EQ,'==',1,79)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term_not factor n_quad_muldiv term2 . LexToken(EQ,'==',1,79)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term . LexToken(EQ,'==',1,79)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term empty . LexToken(EQ,'==',1,79)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR term exp2 . LexToken(EQ,'==',1,79)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp . LexToken(EQ,'==',1,79)
   yacc.py: 445:Action : Shift and goto state 144
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp EQ . LexToken(ID,'b',1,82)
   yacc.py: 471:Action : Reduce rule [relop -> EQ] with ['=='] and goto state 140
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 140
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop . LexToken(ID,'b',1,82)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop empty . LexToken(ID,'b',1,82)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not . LexToken(ID,'b',1,82)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not ID . LexToken(;,';',1,83)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not ID n_push_operand . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['b',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d455a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not varcte . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not factor . LexToken(;,';',1,83)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not factor n_quad_muldiv . LexToken(;,';',1,83)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term_not factor n_quad_muldiv term2 . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term . LexToken(;,';',1,83)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term empty . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop term exp2 . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 167
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 167
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp relop exp . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [exp02 -> relop exp] with [None,None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp exp02 . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp0 . LexToken(;,';',1,83)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp0 empty . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR exp0 expression2 . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 158
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 430:Defaulted state 158: Reduce using 27
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var ID ASSIGNATOR expression . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [assignment -> ID ASSIGNATOR expression] with ['res',':=',None] and goto state 76
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 430:Defaulted state 76: Reduce using 48
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var assignment . LexToken(;,';',1,83)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 75
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement1 . LexToken(;,';',1,83)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement1 ; . LexToken(ID,'a',1,90)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 71
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement . LexToken(ID,'a',1,90)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID . LexToken(ASSIGNATOR,':=',1,92)
   yacc.py: 445:Action : Shift and goto state 109
   yacc.py: 410:
   yacc.py: 411:State  : 109
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR . LexToken(CTE_INT,'5',1,95)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR empty . LexToken(CTE_INT,'5',1,95)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not . LexToken(CTE_INT,'5',1,95)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not CTE_INT . LexToken(*,'*',1,97)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['5'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not varcte1 . LexToken(*,'*',1,97)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not varcte . LexToken(*,'*',1,97)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor . LexToken(*,'*',1,97)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv . LexToken(*,'*',1,97)
   yacc.py: 445:Action : Shift and goto state 182
   yacc.py: 410:
   yacc.py: 411:State  : 182
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv * . LexToken(CTE_INT,'4',1,99)
   yacc.py: 471:Action : Reduce rule [muldiv -> *] with ['*'] and goto state 185
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 185
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv . LexToken(CTE_INT,'4',1,99)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv CTE_INT . LexToken(+,'+',1,101)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['4'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv varcte1 . LexToken(+,'+',1,101)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv varcte . LexToken(+,'+',1,101)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 202
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 202
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv factor . LexToken(+,'+',1,101)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 214
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv factor n_quad_muldiv . LexToken(+,'+',1,101)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,101)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 217
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 217
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv muldiv factor n_quad_muldiv term2 . LexToken(+,'+',1,101)
   yacc.py: 471:Action : Reduce rule [term2 -> muldiv factor n_quad_muldiv term2] with [None,None,None,None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,101)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term . LexToken(+,'+',1,101)
   yacc.py: 445:Action : Shift and goto state 130
   yacc.py: 410:
   yacc.py: 411:State  : 130
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term + . LexToken(CTE_INT,'1',1,103)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 132
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 132
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub . LexToken(CTE_INT,'1',1,103)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub empty . LexToken(CTE_INT,'1',1,103)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not . LexToken(CTE_INT,'1',1,103)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not CTE_INT . LexToken(+,'+',1,105)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['1'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not varcte1 . LexToken(+,'+',1,105)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not varcte . LexToken(+,'+',1,105)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not factor . LexToken(+,'+',1,105)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv . LexToken(+,'+',1,105)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,105)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,105)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 165
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 165
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term . LexToken(+,'+',1,105)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 187
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 187
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub . LexToken(+,'+',1,105)
   yacc.py: 445:Action : Shift and goto state 130
   yacc.py: 410:
   yacc.py: 411:State  : 130
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub + . LexToken(CTE_INT,'2',1,107)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 132
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 132
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub . LexToken(CTE_INT,'2',1,107)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub empty . LexToken(CTE_INT,'2',1,107)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not . LexToken(CTE_INT,'2',1,107)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not CTE_INT . LexToken(*,'*',1,109)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['2'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not varcte1 . LexToken(*,'*',1,109)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not varcte . LexToken(*,'*',1,109)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor . LexToken(*,'*',1,109)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv . LexToken(*,'*',1,109)
   yacc.py: 445:Action : Shift and goto state 182
   yacc.py: 410:
   yacc.py: 411:State  : 182
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv * . LexToken(CTE_INT,'3',1,111)
   yacc.py: 471:Action : Reduce rule [muldiv -> *] with ['*'] and goto state 185
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 185
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv . LexToken(CTE_INT,'3',1,111)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv CTE_INT . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['3'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv varcte1 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv varcte . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 202
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 202
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv factor . LexToken(;,';',1,112)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 214
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv . LexToken(;,';',1,112)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv n_quad_not . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 217
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 217
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv term2 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [term2 -> muldiv factor n_quad_muldiv term2] with [None,None,None,None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv term2 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 165
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 165
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term . LexToken(;,';',1,112)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 187
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 187
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term n_quad_addsub . LexToken(;,';',1,112)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term n_quad_addsub empty . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 204
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 204
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub addsub term n_quad_addsub exp2 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 204
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 204
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term addsub term n_quad_addsub exp2 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR term exp2 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR exp . LexToken(;,';',1,112)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 146
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR exp empty . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR exp exp02 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR exp0 . LexToken(;,';',1,112)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR exp0 empty . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR exp0 expression2 . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 158
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 430:Defaulted state 158: Reduce using 27
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement ID ASSIGNATOR expression . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [assignment -> ID ASSIGNATOR expression] with ['a',':=',None] and goto state 76
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 430:Defaulted state 76: Reduce using 48
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement assignment . LexToken(;,';',1,112)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 75
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement1 . LexToken(;,';',1,112)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement1 ; . LexToken(ID,'b',1,119)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 71
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement . LexToken(ID,'b',1,119)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID . LexToken(ASSIGNATOR,':=',1,121)
   yacc.py: 445:Action : Shift and goto state 109
   yacc.py: 410:
   yacc.py: 411:State  : 109
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR . LexToken(ID,'a',1,124)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR empty . LexToken(ID,'a',1,124)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not . LexToken(ID,'a',1,124)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not ID . LexToken(+,'+',1,126)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not ID n_push_operand . LexToken(+,'+',1,126)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['a',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d45580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not varcte . LexToken(+,'+',1,126)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not factor . LexToken(+,'+',1,126)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not factor n_quad_muldiv . LexToken(+,'+',1,126)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,126)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,126)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term . LexToken(+,'+',1,126)
   yacc.py: 445:Action : Shift and goto state 130
   yacc.py: 410:
   yacc.py: 411:State  : 130
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term + . LexToken(CTE_INT,'1',1,128)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 132
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 132
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub . LexToken(CTE_INT,'1',1,128)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub empty . LexToken(CTE_INT,'1',1,128)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not . LexToken(CTE_INT,'1',1,128)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not CTE_INT . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['1'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not varcte1 . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not varcte . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not factor . LexToken(;,';',1,129)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv . LexToken(;,';',1,129)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv term2 . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 165
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 165
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term . LexToken(;,';',1,129)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 187
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 187
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term n_quad_addsub . LexToken(;,';',1,129)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term n_quad_addsub empty . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 204
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 204
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term addsub term n_quad_addsub exp2 . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR term exp2 . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR exp . LexToken(;,';',1,129)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 146
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR exp empty . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR exp exp02 . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR exp0 . LexToken(;,';',1,129)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR exp0 empty . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR exp0 expression2 . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 158
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 430:Defaulted state 158: Reduce using 27
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement ID ASSIGNATOR expression . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [assignment -> ID ASSIGNATOR expression] with ['b',':=',None] and goto state 76
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 430:Defaulted state 76: Reduce using 48
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement assignment . LexToken(;,';',1,129)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 75
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement1 . LexToken(;,';',1,129)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement1 ; . LexToken(ID,'res',1,136)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 71
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement . LexToken(ID,'res',1,136)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID . LexToken(ASSIGNATOR,':=',1,140)
   yacc.py: 445:Action : Shift and goto state 109
   yacc.py: 410:
   yacc.py: 411:State  : 109
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR . LexToken(ID,'a',1,143)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR empty . LexToken(ID,'a',1,143)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not . LexToken(ID,'a',1,143)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not ID . LexToken(+,'+',1,145)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not ID n_push_operand . LexToken(+,'+',1,145)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['a',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d45580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not varcte . LexToken(+,'+',1,145)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not factor . LexToken(+,'+',1,145)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not factor n_quad_muldiv . LexToken(+,'+',1,145)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,145)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,145)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term . LexToken(+,'+',1,145)
   yacc.py: 445:Action : Shift and goto state 130
   yacc.py: 410:
   yacc.py: 411:State  : 130
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term + . LexToken(ID,'b',1,147)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 132
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 132
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub . LexToken(ID,'b',1,147)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub empty . LexToken(ID,'b',1,147)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not . LexToken(ID,'b',1,147)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not ID . LexToken(;,';',1,148)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not ID n_push_operand . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['b',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d455a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not varcte . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not factor . LexToken(;,';',1,148)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv . LexToken(;,';',1,148)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term_not factor n_quad_muldiv term2 . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 165
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 165
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term . LexToken(;,';',1,148)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 187
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 187
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term n_quad_addsub . LexToken(;,';',1,148)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term n_quad_addsub empty . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 204
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 204
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term addsub term n_quad_addsub exp2 . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR term exp2 . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR exp . LexToken(;,';',1,148)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 146
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR exp empty . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR exp exp02 . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR exp0 . LexToken(;,';',1,148)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR exp0 empty . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR exp0 expression2 . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 158
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 430:Defaulted state 158: Reduce using 27
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement ID ASSIGNATOR expression . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [assignment -> ID ASSIGNATOR expression] with ['res',':=',None] and goto state 76
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 430:Defaulted state 76: Reduce using 48
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement assignment . LexToken(;,';',1,148)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 75
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement1 . LexToken(;,';',1,148)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement1 ; . LexToken(RETURN,'return',1,155)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 71
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement . LexToken(RETURN,'return',1,155)
   yacc.py: 445:Action : Shift and goto state 60
   yacc.py: 410:
   yacc.py: 411:State  : 60
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN . LexToken(ID,'res',1,162)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN empty . LexToken(ID,'res',1,162)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not . LexToken(ID,'res',1,162)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not ID . LexToken(;,';',1,165)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not ID n_push_operand . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['res',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f61046470a8> ('res')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not varcte . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['res'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not factor . LexToken(;,';',1,165)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not factor n_quad_muldiv . LexToken(;,';',1,165)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term_not factor n_quad_muldiv term2 . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term . LexToken(;,';',1,165)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term empty . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN term exp2 . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN exp . LexToken(;,';',1,165)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 146
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN exp empty . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN exp exp02 . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN exp0 . LexToken(;,';',1,165)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN exp0 empty . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN exp0 expression2 . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 97
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 97
   yacc.py: 430:Defaulted state 97: Reduce using 42
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement RETURN expression . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [return -> RETURN expression] with ['return',None] and goto state 77
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 77
   yacc.py: 430:Defaulted state 77: Reduce using 53
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement return . LexToken(;,';',1,165)
   yacc.py: 471:Action : Reduce rule [statement1 -> return] with [None] and goto state 75
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement statement1 . LexToken(;,';',1,165)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement statement1 ; . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 71
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 71
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement statement . LexToken(},'}',1,167)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 74
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 430:Defaulted state 74: Reduce using 20
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement statement empty . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc4 -> empty] with [None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 430:Defaulted state 104: Reduce using 19
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement statement proc4 . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 430:Defaulted state 104: Reduce using 19
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement statement proc4 . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 430:Defaulted state 104: Reduce using 19
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement statement proc4 . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 430:Defaulted state 104: Reduce using 19
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement statement proc4 . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 430:Defaulted state 104: Reduce using 19
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var statement proc4 . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 67
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 67
   yacc.py: 430:Defaulted state 67: Reduce using 18
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var proc4 . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc3 -> proc4] with [None] and goto state 105
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 105
   yacc.py: 430:Defaulted state 105: Reduce using 17
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { var proc3 . LexToken(},'}',1,167)
   yacc.py: 471:Action : Reduce rule [proc3 -> var proc3] with ['int res',None] and goto state 68
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { proc3 . LexToken(},'}',1,167)
   yacc.py: 445:Action : Shift and goto state 102
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 proc1 ) { proc3 } . LexToken(MAIN,'main',1,170)
   yacc.py: 471:Action : Reduce rule [procA -> proc1 ) { proc3 }] with [None,')','{',None,'}'] and goto state 29
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 435:Stack  : PROGRAM ID ; var var proca1 procA . LexToken(MAIN,'main',1,170)
   yacc.py: 471:Action : Reduce rule [proc -> proca1 procA] with ['intsum',None] and goto state 14
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc . LexToken(MAIN,'main',1,170)
   yacc.py: 445:Action : Shift and goto state 23
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 430:Defaulted state 23: Reduce using 120
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN . None
   yacc.py: 474:Action : Reduce rule [n_clear_scope -> <empty>] with [] and goto state 36
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 36
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope . LexToken({,'{',1,175)
   yacc.py: 445:Action : Shift and goto state 46
   yacc.py: 410:
   yacc.py: 411:State  : 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { . LexToken(INT,'int',1,182)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { INT . LexToken(ID,'a',1,186)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 59
   yacc.py: 506:Result : <str @ 0x7f6104647440> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 59
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype . LexToken(ID,'a',1,186)
   yacc.py: 445:Action : Shift and goto state 54
   yacc.py: 410:
   yacc.py: 411:State  : 54
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype ID . LexToken(,,',',1,187)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype ID , . LexToken(ID,'y',1,189)
   yacc.py: 445:Action : Shift and goto state 54
   yacc.py: 410:
   yacc.py: 411:State  : 54
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype ID , ID . LexToken(;,';',1,190)
   yacc.py: 445:Action : Shift and goto state 45
   yacc.py: 410:
   yacc.py: 411:State  : 45
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype ID , ID ; . LexToken(READ,'read',1,197)
   yacc.py: 471:Action : Reduce rule [var2 -> ;] with [';'] and goto state 42
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype ID , ID var2 . LexToken(READ,'read',1,197)
   yacc.py: 471:Action : Reduce rule [var1 -> ID var2] with ['y',None] and goto state 53
   yacc.py: 506:Result : <str @ 0x7f6105c98260> ('y')
   yacc.py: 410:
   yacc.py: 411:State  : 53
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype ID , var1 . LexToken(READ,'read',1,197)
   yacc.py: 471:Action : Reduce rule [var1 -> ID , var1] with ['a',',','y'] and goto state 34
   yacc.py: 506:Result : <str @ 0x7f6104647490> ('a y')
   yacc.py: 410:
   yacc.py: 411:State  : 34
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { datatype var1 . LexToken(READ,'read',1,197)
   yacc.py: 471:Action : Reduce rule [var -> datatype var1] with ['int','a y'] and goto state 57
   yacc.py: 506:Result : <str @ 0x7f610469a7b0> ('int a y')
   yacc.py: 410:
   yacc.py: 411:State  : 57
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { var . LexToken(READ,'read',1,197)
   yacc.py: 471:Action : Reduce rule [vars -> var] with ['int a y'] and goto state 55
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars . LexToken(READ,'read',1,197)
   yacc.py: 471:Action : Reduce rule [vars_aux -> vars] with [None] and goto state 56
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 56
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux . LexToken(READ,'read',1,197)
   yacc.py: 445:Action : Shift and goto state 61
   yacc.py: 410:
   yacc.py: 411:State  : 61
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ . LexToken((,'(',1,201)
   yacc.py: 445:Action : Shift and goto state 99
   yacc.py: 410:
   yacc.py: 411:State  : 99
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( . LexToken(ID,'a',1,202)
   yacc.py: 445:Action : Shift and goto state 148
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( ID . LexToken(,,',',1,203)
   yacc.py: 445:Action : Shift and goto state 169
   yacc.py: 410:
   yacc.py: 411:State  : 169
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( ID , . LexToken(ID,'b',1,205)
   yacc.py: 445:Action : Shift and goto state 190
   yacc.py: 410:
   yacc.py: 411:State  : 190
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( ID , ID . LexToken(),')',1,206)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 170
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 170
   yacc.py: 430:Defaulted state 170: Reduce using 33
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( ID , ID empty . LexToken(),')',1,206)
   yacc.py: 471:Action : Reduce rule [input1 -> empty] with [None] and goto state 206
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 206
   yacc.py: 430:Defaulted state 206: Reduce using 32
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( ID , ID input1 . LexToken(),')',1,206)
   yacc.py: 471:Action : Reduce rule [input1 -> , ID input1] with [',','b',None] and goto state 168
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 168
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( ID input1 . LexToken(),')',1,206)
   yacc.py: 445:Action : Shift and goto state 189
   yacc.py: 410:
   yacc.py: 411:State  : 189
   yacc.py: 430:Defaulted state 189: Reduce using 31
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux READ ( ID input1 ) . None
   yacc.py: 471:Action : Reduce rule [input -> READ ( ID input1 )] with ['read','(','a',None,')'] and goto state 73
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 73
   yacc.py: 430:Defaulted state 73: Reduce using 49
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux input . None
   yacc.py: 471:Action : Reduce rule [statement1 -> input] with [None] and goto state 75
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement1 . LexToken(;,';',1,207)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement1 ; . LexToken(IF,'if',1,215)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 89
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement . LexToken(IF,'if',1,215)
   yacc.py: 445:Action : Shift and goto state 81
   yacc.py: 410:
   yacc.py: 411:State  : 81
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF . LexToken((,'(',1,217)
   yacc.py: 445:Action : Shift and goto state 110
   yacc.py: 410:
   yacc.py: 411:State  : 110
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( . LexToken(ID,'a',1,219)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( empty . LexToken(ID,'a',1,219)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not . LexToken(ID,'a',1,219)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not ID . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not ID n_push_operand . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['a',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d45580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not varcte . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not factor . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not factor n_quad_muldiv . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not factor n_quad_muldiv n_quad_not . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term_not factor n_quad_muldiv term2 . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term empty . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( term exp2 . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp . LexToken(NOT_EQ,'!=',1,221)
   yacc.py: 445:Action : Shift and goto state 141
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp NOT_EQ . LexToken(ID,'b',1,224)
   yacc.py: 471:Action : Reduce rule [relop -> NOT_EQ] with ['!='] and goto state 140
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 140
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop . LexToken(ID,'b',1,224)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop empty . LexToken(ID,'b',1,224)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not . LexToken(ID,'b',1,224)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not ID . LexToken(AND,'&&',1,226)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not ID n_push_operand . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['b',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d455a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not varcte . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not factor . LexToken(AND,'&&',1,226)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not factor n_quad_muldiv . LexToken(AND,'&&',1,226)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not factor n_quad_muldiv n_quad_not . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term_not factor n_quad_muldiv term2 . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term . LexToken(AND,'&&',1,226)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term empty . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop term exp2 . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 167
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 167
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp relop exp . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [exp02 -> relop exp] with [None,None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp exp02 . LexToken(AND,'&&',1,226)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 . LexToken(AND,'&&',1,226)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 AND . LexToken(CTE_INT,'3',1,229)
   yacc.py: 471:Action : Reduce rule [logop -> AND] with ['&&'] and goto state 135
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop . LexToken(CTE_INT,'3',1,229)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop empty . LexToken(CTE_INT,'3',1,229)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not . LexToken(CTE_INT,'3',1,229)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not CTE_INT . LexToken(>,'>',1,231)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['3'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not varcte1 . LexToken(>,'>',1,231)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not varcte . LexToken(>,'>',1,231)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not factor . LexToken(>,'>',1,231)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not factor n_quad_muldiv . LexToken(>,'>',1,231)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not factor n_quad_muldiv n_quad_not . LexToken(>,'>',1,231)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term_not factor n_quad_muldiv term2 . LexToken(>,'>',1,231)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term . LexToken(>,'>',1,231)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term empty . LexToken(>,'>',1,231)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop term exp2 . LexToken(>,'>',1,231)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp . LexToken(>,'>',1,231)
   yacc.py: 445:Action : Shift and goto state 147
   yacc.py: 410:
   yacc.py: 411:State  : 147
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp > . LexToken(CTE_INT,'5',1,233)
   yacc.py: 471:Action : Reduce rule [relop -> >] with ['>'] and goto state 140
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 140
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop . LexToken(CTE_INT,'5',1,233)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop empty . LexToken(CTE_INT,'5',1,233)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not . LexToken(CTE_INT,'5',1,233)
   yacc.py: 445:Action : Shift and goto state 121
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not CTE_INT . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['5'] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not varcte1 . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not varcte . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not factor . LexToken(),')',1,234)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not factor n_quad_muldiv . LexToken(),')',1,234)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not factor n_quad_muldiv n_quad_not . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term_not factor n_quad_muldiv term2 . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term . LexToken(),')',1,234)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term empty . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop term exp2 . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 167
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 167
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp relop exp . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [exp02 -> relop exp] with [None,None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp exp02 . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 166
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp0 . LexToken(),')',1,234)
   yacc.py: 474:Action : Reduce rule [n_quad_logop -> <empty>] with [] and goto state 188
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 188
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp0 n_quad_logop . LexToken(),')',1,234)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp0 n_quad_logop empty . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 205
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 205
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 logop exp0 n_quad_logop expression2 . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [expression2 -> logop exp0 n_quad_logop expression2] with [None,None,None,None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( exp0 expression2 . LexToken(),')',1,234)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 159
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 159
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression . LexToken(),')',1,234)
   yacc.py: 445:Action : Shift and goto state 179
   yacc.py: 410:
   yacc.py: 411:State  : 179
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) . LexToken({,'{',1,235)
   yacc.py: 445:Action : Shift and goto state 191
   yacc.py: 410:
   yacc.py: 411:State  : 191
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) { . LexToken(},'}',1,243)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 90
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 430:Defaulted state 90: Reduce using 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) { empty . LexToken(},'}',1,243)
   yacc.py: 471:Action : Reduce rule [statement_aux -> empty] with [None] and goto state 207
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 207
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) { statement_aux . LexToken(},'}',1,243)
   yacc.py: 445:Action : Shift and goto state 215
   yacc.py: 410:
   yacc.py: 411:State  : 215
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) { statement_aux } . LexToken(PRINT,'print',1,250)
   yacc.py: 471:Action : Reduce rule [block -> { statement_aux }] with ['{',None,'}'] and goto state 200
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 200
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) block . LexToken(PRINT,'print',1,250)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 211
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 211
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) block empty . LexToken(PRINT,'print',1,250)
   yacc.py: 471:Action : Reduce rule [condition1 -> empty] with [None] and goto state 212
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 212
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement IF ( expression ) block condition1 . LexToken(PRINT,'print',1,250)
   yacc.py: 471:Action : Reduce rule [condition -> IF ( expression ) block condition1] with ['if','(',None,')',None,None] and goto state 80
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 80
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement condition . LexToken(PRINT,'print',1,250)
   yacc.py: 471:Action : Reduce rule [statement2 -> condition] with [None] and goto state 69
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 69
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement2 . LexToken(PRINT,'print',1,250)
   yacc.py: 471:Action : Reduce rule [statement -> statement2] with [None] and goto state 89
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement . LexToken(PRINT,'print',1,250)
   yacc.py: 445:Action : Shift and goto state 66
   yacc.py: 410:
   yacc.py: 411:State  : 66
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT . LexToken((,'(',1,255)
   yacc.py: 445:Action : Shift and goto state 101
   yacc.py: 410:
   yacc.py: 411:State  : 101
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( . LexToken(ID,'sum',1,256)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( empty . LexToken(ID,'sum',1,256)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not . LexToken(ID,'sum',1,256)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID . LexToken((,'(',1,259)
   yacc.py: 445:Action : Shift and goto state 107
   yacc.py: 410:
   yacc.py: 411:State  : 107
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( . LexToken(ID,'a',1,260)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 156
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 156
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( empty . LexToken(ID,'a',1,260)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not . LexToken(ID,'a',1,260)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not ID . LexToken(,,',',1,261)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not ID n_push_operand . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['a',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d45580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not varcte . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not factor . LexToken(,,',',1,261)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not factor n_quad_muldiv . LexToken(,,',',1,261)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not factor n_quad_muldiv n_quad_not . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term_not factor n_quad_muldiv term2 . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term . LexToken(,,',',1,261)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term empty . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( term exp2 . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 154
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 154
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( exp . LexToken(,,',',1,261)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 146
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( exp empty . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( exp exp02 . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( exp0 . LexToken(,,',',1,261)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( exp0 empty . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( exp0 expression2 . LexToken(,,',',1,261)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression . LexToken(,,',',1,261)
   yacc.py: 445:Action : Shift and goto state 177
   yacc.py: 410:
   yacc.py: 411:State  : 177
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , . LexToken(ID,'b',1,263)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 98
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , empty . LexToken(ID,'b',1,263)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 92
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 92
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not . LexToken(ID,'b',1,263)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not ID . LexToken(),')',1,264)
   yacc.py: 474:Action : Reduce rule [n_push_operand -> <empty>] with [] and goto state 164
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not ID n_push_operand . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [varcte -> ID n_push_operand] with ['b',None] and goto state 123
   yacc.py: 506:Result : <str @ 0x7f6105d455a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not varcte . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not factor . LexToken(),')',1,264)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not factor n_quad_muldiv . LexToken(),')',1,264)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not factor n_quad_muldiv n_quad_not . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term_not factor n_quad_muldiv term2 . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term . LexToken(),')',1,264)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term empty . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , term exp2 . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , exp . LexToken(),')',1,264)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 146
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , exp empty . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , exp exp02 . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , exp0 . LexToken(),')',1,264)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , exp0 empty . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , exp0 expression2 . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , expression . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [function_call2 -> expression] with [None] and goto state 195
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 195
   yacc.py: 430:Defaulted state 195: Reduce using 40
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( expression , function_call2 . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [function_call2 -> expression , function_call2] with [None,',',None] and goto state 153
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 153
   yacc.py: 430:Defaulted state 153: Reduce using 39
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( function_call2 . LexToken(),')',1,264)
   yacc.py: 471:Action : Reduce rule [function_call1 -> function_call2] with [None] and goto state 152
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 152
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( function_call1 . LexToken(),')',1,264)
   yacc.py: 445:Action : Shift and goto state 175
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID ( function_call1 ) . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [function_call -> ID ( function_call1 )] with ['sum','(',None,')'] and goto state 115
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 115
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not function_call . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [varcte1 -> function_call] with [None] and goto state 116
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not varcte1 . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 123
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not varcte . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor . LexToken(),')',1,265)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 162
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor n_quad_muldiv . LexToken(),')',1,265)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 183
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor n_quad_muldiv n_quad_not . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 181
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 181
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor n_quad_muldiv term2 . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term . LexToken(),')',1,265)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 133
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 133
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term empty . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term exp2 . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 96
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp . LexToken(),')',1,265)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 146
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 146
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp empty . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 143
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp exp02 . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp0 . LexToken(),')',1,265)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 138
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 138
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp0 empty . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 136
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 136
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp0 expression2 . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 150
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( expression . LexToken(),')',1,265)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 174
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 174
   yacc.py: 430:Defaulted state 174: Reduce using 36
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( expression empty . LexToken(),')',1,265)
   yacc.py: 471:Action : Reduce rule [output1 -> empty] with [None] and goto state 172
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 172
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( expression output1 . LexToken(),')',1,265)
   yacc.py: 445:Action : Shift and goto state 193
   yacc.py: 410:
   yacc.py: 411:State  : 193
   yacc.py: 430:Defaulted state 193: Reduce using 34
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement PRINT ( expression output1 ) . None
   yacc.py: 471:Action : Reduce rule [output -> PRINT ( expression output1 )] with ['print','(',None,None,')'] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 430:Defaulted state 84: Reduce using 50
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement output . None
   yacc.py: 471:Action : Reduce rule [statement1 -> output] with [None] and goto state 75
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 75
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement statement1 . LexToken(;,';',1,266)
   yacc.py: 445:Action : Shift and goto state 106
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement statement1 ; . LexToken(},'}',1,268)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 89
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 89
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement statement . LexToken(},'}',1,268)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 90
   yacc.py: 548:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 430:Defaulted state 90: Reduce using 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement statement empty . LexToken(},'}',1,268)
   yacc.py: 471:Action : Reduce rule [statement_aux -> empty] with [None] and goto state 114
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 430:Defaulted state 114: Reduce using 117
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement statement statement_aux . LexToken(},'}',1,268)
   yacc.py: 471:Action : Reduce rule [statement_aux -> statement statement_aux] with [None,None] and goto state 114
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 430:Defaulted state 114: Reduce using 117
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement statement_aux . LexToken(},'}',1,268)
   yacc.py: 471:Action : Reduce rule [statement_aux -> statement statement_aux] with [None,None] and goto state 114
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 430:Defaulted state 114: Reduce using 117
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement statement_aux . LexToken(},'}',1,268)
   yacc.py: 471:Action : Reduce rule [statement_aux -> statement statement_aux] with [None,None] and goto state 88
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement_aux . LexToken(},'}',1,268)
   yacc.py: 445:Action : Shift and goto state 113
   yacc.py: 410:
   yacc.py: 411:State  : 113
   yacc.py: 430:Defaulted state 113: Reduce using 119
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc MAIN n_clear_scope { vars_aux statement_aux } . None
   yacc.py: 471:Action : Reduce rule [main -> MAIN n_clear_scope { vars_aux statement_aux }] with ['main',None,'{',None,None,'}'] and goto state 13
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 13
   yacc.py: 430:Defaulted state 13: Reduce using 5
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc main . None
   yacc.py: 471:Action : Reduce rule [program2 -> main] with [None] and goto state 31
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 31
   yacc.py: 430:Defaulted state 31: Reduce using 4
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc program2 . None
   yacc.py: 471:Action : Reduce rule [program2 -> proc program2] with [None,None] and goto state 10
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 10
   yacc.py: 430:Defaulted state 10: Reduce using 3
   yacc.py: 435:Stack  : PROGRAM ID ; var var program2 . None
   yacc.py: 471:Action : Reduce rule [program1 -> program2] with [None] and goto state 30
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 30
   yacc.py: 430:Defaulted state 30: Reduce using 2
   yacc.py: 435:Stack  : PROGRAM ID ; var var program1 . None
   yacc.py: 471:Action : Reduce rule [program1 -> var program1] with ['bool t y',None] and goto state 30
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 30
   yacc.py: 430:Defaulted state 30: Reduce using 2
   yacc.py: 435:Stack  : PROGRAM ID ; var program1 . None
   yacc.py: 471:Action : Reduce rule [program1 -> var program1] with ['int a b',None] and goto state 9
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 9
   yacc.py: 430:Defaulted state 9: Reduce using 1
   yacc.py: 435:Stack  : PROGRAM ID ; program1 . None
   yacc.py: 471:Action : Reduce rule [program -> PROGRAM ID ; program1] with ['program','aPlusB',';',None] and goto state 2
   yacc.py: 506:Result : <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 2
   yacc.py: 435:Stack  : program . $end
   yacc.py: 571:Done   : Returning <NoneType @ 0x558bd5dbc560> (None)
   yacc.py: 572:PLY: PARSE DEBUG END
