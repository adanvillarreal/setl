   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : . LexToken(PROGRAM,'program',1,0)
   yacc.py: 445:Action : Shift and goto state 1
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 435:Stack  : PROGRAM . LexToken(ID,'aPlusB',1,8)
   yacc.py: 445:Action : Shift and goto state 3
   yacc.py: 410:
   yacc.py: 411:State  : 3
   yacc.py: 435:Stack  : PROGRAM ID . LexToken(;,';',1,14)
   yacc.py: 445:Action : Shift and goto state 4
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : PROGRAM ID ; . LexToken(INT,'int',1,17)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; INT . LexToken(ID,'a',1,21)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 19
   yacc.py: 506:Result : <str @ 0x7eff95a12a08> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 19
   yacc.py: 435:Stack  : PROGRAM ID ; datatype . LexToken(ID,'a',1,21)
   yacc.py: 445:Action : Shift and goto state 37
   yacc.py: 410:
   yacc.py: 411:State  : 37
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID . LexToken(,,',',1,22)
   yacc.py: 445:Action : Shift and goto state 51
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , . LexToken(ID,'b',1,23)
   yacc.py: 445:Action : Shift and goto state 59
   yacc.py: 410:
   yacc.py: 411:State  : 59
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , ID . LexToken(;,';',1,24)
   yacc.py: 445:Action : Shift and goto state 52
   yacc.py: 410:
   yacc.py: 411:State  : 52
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , ID ; . LexToken(FLOAT,'float',1,26)
   yacc.py: 471:Action : Reduce rule [var2 -> ;] with [';'] and goto state 49
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , ID var2 . LexToken(FLOAT,'float',1,26)
   yacc.py: 471:Action : Reduce rule [var1 -> ID var2] with ['b',None] and goto state 58
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 58
   yacc.py: 435:Stack  : PROGRAM ID ; datatype ID , var1 . LexToken(FLOAT,'float',1,26)
   yacc.py: 471:Action : Reduce rule [var1 -> ID , var1] with ['a',',','b'] and goto state 36
   yacc.py: 506:Result : <str @ 0x7eff95a12aa8> ('a b')
   yacc.py: 410:
   yacc.py: 411:State  : 36
   yacc.py: 435:Stack  : PROGRAM ID ; datatype var1 . LexToken(FLOAT,'float',1,26)
   yacc.py: 471:Action : Reduce rule [var -> datatype var1] with ['int','a b'] and goto state 12
   yacc.py: 506:Result : <str @ 0x7eff9598c480> ('int a b')
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 435:Stack  : PROGRAM ID ; var . LexToken(FLOAT,'float',1,26)
   yacc.py: 445:Action : Shift and goto state 20
   yacc.py: 410:
   yacc.py: 411:State  : 20
   yacc.py: 435:Stack  : PROGRAM ID ; var FLOAT . LexToken(ID,'f',1,32)
   yacc.py: 471:Action : Reduce rule [datatype -> FLOAT] with ['float'] and goto state 19
   yacc.py: 506:Result : <str @ 0x7eff9598c4b0> ('float')
   yacc.py: 410:
   yacc.py: 411:State  : 19
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype . LexToken(ID,'f',1,32)
   yacc.py: 445:Action : Shift and goto state 37
   yacc.py: 410:
   yacc.py: 411:State  : 37
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID . LexToken(;,';',1,33)
   yacc.py: 445:Action : Shift and goto state 52
   yacc.py: 410:
   yacc.py: 411:State  : 52
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID ; . LexToken(VOID,'void',1,36)
   yacc.py: 471:Action : Reduce rule [var2 -> ;] with [';'] and goto state 49
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype ID var2 . LexToken(VOID,'void',1,36)
   yacc.py: 471:Action : Reduce rule [var1 -> ID var2] with ['f',None] and goto state 36
   yacc.py: 506:Result : <str @ 0x7eff970797d8> ('f')
   yacc.py: 410:
   yacc.py: 411:State  : 36
   yacc.py: 435:Stack  : PROGRAM ID ; var datatype var1 . LexToken(VOID,'void',1,36)
   yacc.py: 471:Action : Reduce rule [var -> datatype var1] with ['float','f'] and goto state 12
   yacc.py: 506:Result : <str @ 0x7eff9598c570> ('float f')
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 435:Stack  : PROGRAM ID ; var var . LexToken(VOID,'void',1,36)
   yacc.py: 445:Action : Shift and goto state 5
   yacc.py: 410:
   yacc.py: 411:State  : 5
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID . LexToken(ID,'uno',1,41)
   yacc.py: 445:Action : Shift and goto state 24
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID ID . LexToken((,'(',1,44)
   yacc.py: 445:Action : Shift and goto state 39
   yacc.py: 410:
   yacc.py: 411:State  : 39
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID ID ( . LexToken(INT,'int',1,45)
   yacc.py: 471:Action : Reduce rule [proca2 -> ID (] with ['uno','('] and goto state 25
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 25
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 . LexToken(INT,'int',1,45)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 INT . LexToken(ID,'a',1,49)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 30
   yacc.py: 506:Result : <str @ 0x7eff95a12aa8> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 datatype . LexToken(ID,'a',1,49)
   yacc.py: 445:Action : Shift and goto state 46
   yacc.py: 410:
   yacc.py: 411:State  : 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 datatype ID . LexToken(),')',1,50)
   yacc.py: 471:Action : Reduce rule [n_push_variable -> datatype ID] with ['int','a'] and goto state 29
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 n_push_variable . LexToken(),')',1,50)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 44
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 430:Defaulted state 44: Reduce using 17
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 n_push_variable empty . LexToken(),')',1,50)
   yacc.py: 471:Action : Reduce rule [proc2 -> empty] with [None] and goto state 45
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 45
   yacc.py: 430:Defaulted state 45: Reduce using 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 n_push_variable proc2 . LexToken(),')',1,50)
   yacc.py: 471:Action : Reduce rule [proc1 -> n_push_variable proc2] with [None,None] and goto state 27
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 27
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 . LexToken(),')',1,50)
   yacc.py: 445:Action : Shift and goto state 42
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) . LexToken({,'{',1,51)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { . LexToken(ID,'a',1,55)
   yacc.py: 474:Action : Reduce rule [n_quad_counter -> <empty>] with [] and goto state 66
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 66
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter . LexToken(ID,'a',1,55)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter ID . LexToken(ASSIGNATOR,':=',1,57)
   yacc.py: 471:Action : Reduce rule [assignment2 -> ID] with ['a'] and goto state 78
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 . LexToken(ASSIGNATOR,':=',1,57)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR . LexToken(ID,'a',1,60)
   yacc.py: 474:Action : Reduce rule [n_quad_assign -> <empty>] with [] and goto state 166
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign . LexToken(ID,'a',1,60)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign empty . LexToken(ID,'a',1,60)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not . LexToken(ID,'a',1,60)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not ID . LexToken(+,'+',1,62)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not ID empty . LexToken(+,'+',1,62)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not varcte . LexToken(+,'+',1,62)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor . LexToken(+,'+',1,62)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv . LexToken(+,'+',1,62)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,62)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,62)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term . LexToken(+,'+',1,62)
   yacc.py: 445:Action : Shift and goto state 142
   yacc.py: 410:
   yacc.py: 411:State  : 142
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term + . LexToken(ID,'b',1,64)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 144
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub . LexToken(ID,'b',1,64)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub empty . LexToken(ID,'b',1,64)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not . LexToken(ID,'b',1,64)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not ID . LexToken(*,'*',1,66)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not ID empty . LexToken(*,'*',1,66)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not varcte . LexToken(*,'*',1,66)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor . LexToken(*,'*',1,66)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv . LexToken(*,'*',1,66)
   yacc.py: 445:Action : Shift and goto state 193
   yacc.py: 410:
   yacc.py: 411:State  : 193
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv * . LexToken(ID,'a',1,68)
   yacc.py: 471:Action : Reduce rule [muldiv -> *] with ['*'] and goto state 196
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 196
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv . LexToken(ID,'a',1,68)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv ID . LexToken(;,';',1,69)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv ID empty . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv varcte . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 212
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 212
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor . LexToken(;,';',1,69)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 223
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 223
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv . LexToken(;,';',1,69)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv n_quad_not . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 229
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 229
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv term2 . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [term2 -> muldiv factor n_quad_muldiv term2] with [None,None,None,None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv term2 . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 176
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 176
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term . LexToken(;,';',1,69)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 198
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 198
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub . LexToken(;,';',1,69)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub empty . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 214
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub exp2 . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign term exp2 . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp . LexToken(;,';',1,69)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp empty . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp exp02 . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp0 . LexToken(;,';',1,69)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp0 empty . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp0 expression2 . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 186
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 186
   yacc.py: 430:Defaulted state 186: Reduce using 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment2 ASSIGNATOR n_quad_assign expression . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [assignment -> assignment2 ASSIGNATOR n_quad_assign expression] with ['a',':=',None,None] and goto state 86
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 430:Defaulted state 86: Reduce using 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter assignment . LexToken(;,';',1,69)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement1 . LexToken(;,';',1,69)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement1 ; . LexToken(PRINT,'print',1,73)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 98
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement . LexToken(PRINT,'print',1,73)
   yacc.py: 445:Action : Shift and goto state 76
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT . LexToken((,'(',1,78)
   yacc.py: 445:Action : Shift and goto state 112
   yacc.py: 410:
   yacc.py: 411:State  : 112
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( . LexToken(ID,'a',1,79)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( empty . LexToken(ID,'a',1,79)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not . LexToken(ID,'a',1,79)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not ID . LexToken(,,',',1,80)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not ID empty . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not varcte . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not factor . LexToken(,,',',1,80)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not factor n_quad_muldiv . LexToken(,,',',1,80)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not factor n_quad_muldiv n_quad_not . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term_not factor n_quad_muldiv term2 . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term . LexToken(,,',',1,80)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term empty . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( term exp2 . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( exp . LexToken(,,',',1,80)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( exp empty . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( exp exp02 . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( exp0 . LexToken(,,',',1,80)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( exp0 empty . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( exp0 expression2 . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 164
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( expression . LexToken(,,',',1,80)
   yacc.py: 471:Action : Reduce rule [n_output_quad -> expression] with [None] and goto state 163
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 163
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad . LexToken(,,',',1,80)
   yacc.py: 445:Action : Shift and goto state 184
   yacc.py: 410:
   yacc.py: 411:State  : 184
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , . LexToken(ID,'b',1,82)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , empty . LexToken(ID,'b',1,82)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not . LexToken(ID,'b',1,82)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not ID . LexToken(,,',',1,83)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not ID empty . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not varcte . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not factor . LexToken(,,',',1,83)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not factor n_quad_muldiv . LexToken(,,',',1,83)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not factor n_quad_muldiv n_quad_not . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term_not factor n_quad_muldiv term2 . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term . LexToken(,,',',1,83)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term empty . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , term exp2 . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , exp . LexToken(,,',',1,83)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , exp empty . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , exp exp02 . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , exp0 . LexToken(,,',',1,83)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , exp0 empty . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , exp0 expression2 . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 164
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , expression . LexToken(,,',',1,83)
   yacc.py: 471:Action : Reduce rule [n_output_quad -> expression] with [None] and goto state 204
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 204
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad . LexToken(,,',',1,83)
   yacc.py: 445:Action : Shift and goto state 184
   yacc.py: 410:
   yacc.py: 411:State  : 184
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , . LexToken(ID,'a',1,85)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , empty . LexToken(ID,'a',1,85)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not . LexToken(ID,'a',1,85)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not ID . LexToken(+,'+',1,87)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not ID empty . LexToken(+,'+',1,87)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not varcte . LexToken(+,'+',1,87)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not factor . LexToken(+,'+',1,87)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not factor n_quad_muldiv . LexToken(+,'+',1,87)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,87)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,87)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term . LexToken(+,'+',1,87)
   yacc.py: 445:Action : Shift and goto state 142
   yacc.py: 410:
   yacc.py: 411:State  : 142
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term + . LexToken(ID,'b',1,89)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 144
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub . LexToken(ID,'b',1,89)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub empty . LexToken(ID,'b',1,89)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not . LexToken(ID,'b',1,89)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not ID . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not ID empty . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not varcte . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not factor . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not factor n_quad_muldiv . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not factor n_quad_muldiv n_quad_not . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term_not factor n_quad_muldiv term2 . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 176
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 176
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 198
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 198
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term n_quad_addsub . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term n_quad_addsub empty . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 214
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term addsub term n_quad_addsub exp2 . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , term exp2 . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , exp . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , exp empty . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , exp exp02 . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , exp0 . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , exp0 empty . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , exp0 expression2 . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 164
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , expression . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [n_output_quad -> expression] with [None] and goto state 204
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 204
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , n_output_quad . LexToken(),')',1,90)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 185
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 185
   yacc.py: 430:Defaulted state 185: Reduce using 48
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , n_output_quad empty . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [output1 -> empty] with [None] and goto state 218
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 218
   yacc.py: 430:Defaulted state 218: Reduce using 47
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad , n_output_quad output1 . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [output1 -> , n_output_quad output1] with [',',None,None] and goto state 218
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 218
   yacc.py: 430:Defaulted state 218: Reduce using 47
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad , n_output_quad output1 . LexToken(),')',1,90)
   yacc.py: 471:Action : Reduce rule [output1 -> , n_output_quad output1] with [',',None,None] and goto state 183
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad output1 . LexToken(),')',1,90)
   yacc.py: 445:Action : Shift and goto state 203
   yacc.py: 410:
   yacc.py: 411:State  : 203
   yacc.py: 430:Defaulted state 203: Reduce using 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement PRINT ( n_output_quad output1 ) . None
   yacc.py: 471:Action : Reduce rule [output -> PRINT ( n_output_quad output1 )] with ['print','(',None,None,')'] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 430:Defaulted state 94: Reduce using 66
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement output . None
   yacc.py: 471:Action : Reduce rule [statement1 -> output] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement statement1 . LexToken(;,';',1,91)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement statement1 ; . LexToken(},'}',1,93)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 98
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement statement . LexToken(},'}',1,93)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 99
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 99
   yacc.py: 430:Defaulted state 99: Reduce using 23
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement statement empty . LexToken(},'}',1,93)
   yacc.py: 471:Action : Reduce rule [proc4 -> empty] with [None] and goto state 126
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 126
   yacc.py: 430:Defaulted state 126: Reduce using 22
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement statement proc4 . LexToken(},'}',1,93)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 126
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 126
   yacc.py: 430:Defaulted state 126: Reduce using 22
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter statement proc4 . LexToken(},'}',1,93)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 97
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 97
   yacc.py: 430:Defaulted state 97: Reduce using 20
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { n_quad_counter proc4 . LexToken(},'}',1,93)
   yacc.py: 471:Action : Reduce rule [proc3 -> n_quad_counter proc4] with [None,None] and goto state 65
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 65
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { proc3 . LexToken(},'}',1,93)
   yacc.py: 445:Action : Shift and goto state 96
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 proc1 ) { proc3 } . LexToken(VOID,'void',1,96)
   yacc.py: 471:Action : Reduce rule [procA -> proc1 ) { proc3 }] with [None,')','{',None,'}'] and goto state 40
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 435:Stack  : PROGRAM ID ; var var VOID proca2 procA . LexToken(VOID,'void',1,96)
   yacc.py: 471:Action : Reduce rule [proc -> VOID proca2 procA] with ['void',None,None] and goto state 14
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc . LexToken(VOID,'void',1,96)
   yacc.py: 445:Action : Shift and goto state 5
   yacc.py: 410:
   yacc.py: 411:State  : 5
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID . LexToken(ID,'dos',1,101)
   yacc.py: 445:Action : Shift and goto state 24
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID ID . LexToken((,'(',1,104)
   yacc.py: 445:Action : Shift and goto state 39
   yacc.py: 410:
   yacc.py: 411:State  : 39
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID ID ( . LexToken(INT,'int',1,105)
   yacc.py: 471:Action : Reduce rule [proca2 -> ID (] with ['dos','('] and goto state 25
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 25
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 . LexToken(INT,'int',1,105)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 INT . LexToken(ID,'a',1,109)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 30
   yacc.py: 506:Result : <str @ 0x7eff959312d8> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 datatype . LexToken(ID,'a',1,109)
   yacc.py: 445:Action : Shift and goto state 46
   yacc.py: 410:
   yacc.py: 411:State  : 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 datatype ID . LexToken(,,',',1,110)
   yacc.py: 471:Action : Reduce rule [n_push_variable -> datatype ID] with ['int','a'] and goto state 29
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable . LexToken(,,',',1,110)
   yacc.py: 445:Action : Shift and goto state 43
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , . LexToken(INT,'int',1,112)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , INT . LexToken(ID,'b',1,116)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 30
   yacc.py: 506:Result : <str @ 0x7eff959315d0> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , datatype . LexToken(ID,'b',1,116)
   yacc.py: 445:Action : Shift and goto state 46
   yacc.py: 410:
   yacc.py: 411:State  : 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , datatype ID . LexToken(,,',',1,117)
   yacc.py: 471:Action : Reduce rule [n_push_variable -> datatype ID] with ['int','b'] and goto state 56
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 56
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable . LexToken(,,',',1,117)
   yacc.py: 445:Action : Shift and goto state 43
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable , . LexToken(FLOAT,'float',1,119)
   yacc.py: 445:Action : Shift and goto state 20
   yacc.py: 410:
   yacc.py: 411:State  : 20
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable , FLOAT . LexToken(ID,'g',1,125)
   yacc.py: 471:Action : Reduce rule [datatype -> FLOAT] with ['float'] and goto state 30
   yacc.py: 506:Result : <str @ 0x7eff9598c5d0> ('float')
   yacc.py: 410:
   yacc.py: 411:State  : 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable , datatype . LexToken(ID,'g',1,125)
   yacc.py: 445:Action : Shift and goto state 46
   yacc.py: 410:
   yacc.py: 411:State  : 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable , datatype ID . LexToken(),')',1,126)
   yacc.py: 471:Action : Reduce rule [n_push_variable -> datatype ID] with ['float','g'] and goto state 56
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 56
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable , n_push_variable . LexToken(),')',1,126)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 44
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 430:Defaulted state 44: Reduce using 17
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable , n_push_variable empty . LexToken(),')',1,126)
   yacc.py: 471:Action : Reduce rule [proc2 -> empty] with [None] and goto state 68
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 430:Defaulted state 68: Reduce using 16
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable , n_push_variable proc2 . LexToken(),')',1,126)
   yacc.py: 471:Action : Reduce rule [proc2 -> , n_push_variable proc2] with [',',None,None] and goto state 68
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 430:Defaulted state 68: Reduce using 16
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable , n_push_variable proc2 . LexToken(),')',1,126)
   yacc.py: 471:Action : Reduce rule [proc2 -> , n_push_variable proc2] with [',',None,None] and goto state 45
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 45
   yacc.py: 430:Defaulted state 45: Reduce using 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 n_push_variable proc2 . LexToken(),')',1,126)
   yacc.py: 471:Action : Reduce rule [proc1 -> n_push_variable proc2] with [None,None] and goto state 27
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 27
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 . LexToken(),')',1,126)
   yacc.py: 445:Action : Shift and goto state 42
   yacc.py: 410:
   yacc.py: 411:State  : 42
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) . LexToken({,'{',1,127)
   yacc.py: 445:Action : Shift and goto state 55
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { . LexToken(INT,'int',1,131)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { INT . LexToken(ID,'i',1,135)
   yacc.py: 471:Action : Reduce rule [datatype -> INT] with ['int'] and goto state 64
   yacc.py: 506:Result : <str @ 0x7eff959315d0> ('int')
   yacc.py: 410:
   yacc.py: 411:State  : 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { datatype . LexToken(ID,'i',1,135)
   yacc.py: 445:Action : Shift and goto state 59
   yacc.py: 410:
   yacc.py: 411:State  : 59
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { datatype ID . LexToken(;,';',1,136)
   yacc.py: 445:Action : Shift and goto state 52
   yacc.py: 410:
   yacc.py: 411:State  : 52
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { datatype ID ; . LexToken(ID,'i',1,140)
   yacc.py: 471:Action : Reduce rule [var2 -> ;] with [';'] and goto state 49
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { datatype ID var2 . LexToken(ID,'i',1,140)
   yacc.py: 471:Action : Reduce rule [var1 -> ID var2] with ['i',None] and goto state 36
   yacc.py: 506:Result : <str @ 0x7eff97079aa8> ('i')
   yacc.py: 410:
   yacc.py: 411:State  : 36
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { datatype var1 . LexToken(ID,'i',1,140)
   yacc.py: 471:Action : Reduce rule [var -> datatype var1] with ['int','i'] and goto state 67
   yacc.py: 506:Result : <str @ 0x7eff9598c630> ('int i')
   yacc.py: 410:
   yacc.py: 411:State  : 67
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var . LexToken(ID,'i',1,140)
   yacc.py: 474:Action : Reduce rule [n_quad_counter -> <empty>] with [] and goto state 66
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 66
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter . LexToken(ID,'i',1,140)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter ID . LexToken(ASSIGNATOR,':=',1,142)
   yacc.py: 471:Action : Reduce rule [assignment2 -> ID] with ['i'] and goto state 78
   yacc.py: 506:Result : <str @ 0x7eff97079aa8> ('i')
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 . LexToken(ASSIGNATOR,':=',1,142)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR . LexToken(ID,'b',1,145)
   yacc.py: 474:Action : Reduce rule [n_quad_assign -> <empty>] with [] and goto state 166
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign . LexToken(ID,'b',1,145)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign empty . LexToken(ID,'b',1,145)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not . LexToken(ID,'b',1,145)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not ID . LexToken(;,';',1,146)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not ID empty . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not varcte . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor . LexToken(;,';',1,146)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv . LexToken(;,';',1,146)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv term2 . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term . LexToken(;,';',1,146)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term empty . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign term exp2 . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp . LexToken(;,';',1,146)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp empty . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp exp02 . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp0 . LexToken(;,';',1,146)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp0 empty . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign exp0 expression2 . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 186
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 186
   yacc.py: 430:Defaulted state 186: Reduce using 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment2 ASSIGNATOR n_quad_assign expression . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [assignment -> assignment2 ASSIGNATOR n_quad_assign expression] with ['i',':=',None,None] and goto state 86
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 430:Defaulted state 86: Reduce using 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter assignment . LexToken(;,';',1,146)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement1 . LexToken(;,';',1,146)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement1 ; . LexToken(WHILE,'while',1,150)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 98
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement . LexToken(WHILE,'while',1,150)
   yacc.py: 445:Action : Shift and goto state 74
   yacc.py: 410:
   yacc.py: 411:State  : 74
   yacc.py: 430:Defaulted state 74: Reduce using 39
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE . None
   yacc.py: 474:Action : Reduce rule [n_while_1 -> <empty>] with [] and goto state 110
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 110
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 . LexToken((,'(',1,155)
   yacc.py: 445:Action : Shift and goto state 162
   yacc.py: 410:
   yacc.py: 411:State  : 162
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( . LexToken(ID,'i',1,156)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( empty . LexToken(ID,'i',1,156)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not . LexToken(ID,'i',1,156)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not ID . LexToken(>,'>',1,158)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not ID empty . LexToken(>,'>',1,158)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['i',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97079aa8> ('i')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not varcte . LexToken(>,'>',1,158)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['i'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not factor . LexToken(>,'>',1,158)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not factor n_quad_muldiv . LexToken(>,'>',1,158)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not factor n_quad_muldiv n_quad_not . LexToken(>,'>',1,158)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term_not factor n_quad_muldiv term2 . LexToken(>,'>',1,158)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term . LexToken(>,'>',1,158)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term empty . LexToken(>,'>',1,158)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( term exp2 . LexToken(>,'>',1,158)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp . LexToken(>,'>',1,158)
   yacc.py: 445:Action : Shift and goto state 159
   yacc.py: 410:
   yacc.py: 411:State  : 159
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp > . LexToken(CTE_INT,'0',1,160)
   yacc.py: 471:Action : Reduce rule [relop -> >] with ['>'] and goto state 152
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 152
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop . LexToken(CTE_INT,'0',1,160)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop empty . LexToken(CTE_INT,'0',1,160)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not . LexToken(CTE_INT,'0',1,160)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not CTE_INT . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['0'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not varcte1 . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not varcte . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not factor . LexToken(),')',1,161)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not factor n_quad_muldiv . LexToken(),')',1,161)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not factor n_quad_muldiv n_quad_not . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term_not factor n_quad_muldiv term2 . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term . LexToken(),')',1,161)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term empty . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop term exp2 . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 178
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 178
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp relop exp . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [exp02 -> relop exp] with [None,None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp exp02 . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp0 . LexToken(),')',1,161)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp0 empty . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( exp0 expression2 . LexToken(),')',1,161)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 182
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 182
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression . LexToken(),')',1,161)
   yacc.py: 445:Action : Shift and goto state 202
   yacc.py: 410:
   yacc.py: 411:State  : 202
   yacc.py: 430:Defaulted state 202: Reduce using 40
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) . None
   yacc.py: 474:Action : Reduce rule [n_while_2 -> <empty>] with [] and goto state 217
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 217
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 . LexToken({,'{',1,162)
   yacc.py: 445:Action : Shift and goto state 220
   yacc.py: 410:
   yacc.py: 411:State  : 220
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { . LexToken(ID,'a',1,168)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { ID . LexToken(ASSIGNATOR,':=',1,170)
   yacc.py: 471:Action : Reduce rule [assignment2 -> ID] with ['a'] and goto state 78
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 . LexToken(ASSIGNATOR,':=',1,170)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR . LexToken(ID,'a',1,173)
   yacc.py: 474:Action : Reduce rule [n_quad_assign -> <empty>] with [] and goto state 166
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign . LexToken(ID,'a',1,173)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign empty . LexToken(ID,'a',1,173)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not . LexToken(ID,'a',1,173)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not ID . LexToken(+,'+',1,175)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not ID empty . LexToken(+,'+',1,175)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not varcte . LexToken(+,'+',1,175)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not factor . LexToken(+,'+',1,175)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv . LexToken(+,'+',1,175)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,175)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,175)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term . LexToken(+,'+',1,175)
   yacc.py: 445:Action : Shift and goto state 142
   yacc.py: 410:
   yacc.py: 411:State  : 142
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term + . LexToken(ID,'b',1,177)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 144
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub . LexToken(ID,'b',1,177)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub empty . LexToken(ID,'b',1,177)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not . LexToken(ID,'b',1,177)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not ID . LexToken(*,'*',1,179)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not ID empty . LexToken(*,'*',1,179)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not varcte . LexToken(*,'*',1,179)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor . LexToken(*,'*',1,179)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv . LexToken(*,'*',1,179)
   yacc.py: 445:Action : Shift and goto state 193
   yacc.py: 410:
   yacc.py: 411:State  : 193
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv * . LexToken(ID,'i',1,181)
   yacc.py: 471:Action : Reduce rule [muldiv -> *] with ['*'] and goto state 196
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 196
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv . LexToken(ID,'i',1,181)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv ID . LexToken(+,'+',1,183)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv ID empty . LexToken(+,'+',1,183)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['i',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97079aa8> ('i')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv varcte . LexToken(+,'+',1,183)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['i'] and goto state 212
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 212
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor . LexToken(+,'+',1,183)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 223
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 223
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv . LexToken(+,'+',1,183)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,183)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 229
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 229
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv term2 . LexToken(+,'+',1,183)
   yacc.py: 471:Action : Reduce rule [term2 -> muldiv factor n_quad_muldiv term2] with [None,None,None,None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,183)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 176
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 176
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term . LexToken(+,'+',1,183)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 198
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 198
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub . LexToken(+,'+',1,183)
   yacc.py: 445:Action : Shift and goto state 142
   yacc.py: 410:
   yacc.py: 411:State  : 142
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub + . LexToken(ID,'b',1,185)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 144
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub . LexToken(ID,'b',1,185)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub empty . LexToken(ID,'b',1,185)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not . LexToken(ID,'b',1,185)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not ID . LexToken(;,';',1,186)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not ID empty . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not varcte . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not factor . LexToken(;,';',1,186)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv . LexToken(;,';',1,186)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term_not factor n_quad_muldiv term2 . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 176
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 176
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term . LexToken(;,';',1,186)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 198
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 198
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term n_quad_addsub . LexToken(;,';',1,186)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term n_quad_addsub empty . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 214
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub addsub term n_quad_addsub exp2 . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 214
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub exp2 . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign term exp2 . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign exp . LexToken(;,';',1,186)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign exp empty . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign exp exp02 . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign exp0 . LexToken(;,';',1,186)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign exp0 empty . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign exp0 expression2 . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 186
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 186
   yacc.py: 430:Defaulted state 186: Reduce using 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment2 ASSIGNATOR n_quad_assign expression . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [assignment -> assignment2 ASSIGNATOR n_quad_assign expression] with ['a',':=',None,None] and goto state 86
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 430:Defaulted state 86: Reduce using 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { assignment . LexToken(;,';',1,186)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement1 . LexToken(;,';',1,186)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement1 ; . LexToken(ID,'uno',1,192)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement . LexToken(ID,'uno',1,192)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement ID . LexToken((,'(',1,195)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement ID ( . LexToken(ID,'i',1,196)
   yacc.py: 471:Action : Reduce rule [n_era_size -> ID (] with ['uno','('] and goto state 85
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size . LexToken(ID,'i',1,196)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 121
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size empty . LexToken(ID,'i',1,196)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not . LexToken(ID,'i',1,196)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not ID . LexToken(*,'*',1,197)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not ID empty . LexToken(*,'*',1,197)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['i',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97079aa8> ('i')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not varcte . LexToken(*,'*',1,197)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['i'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor . LexToken(*,'*',1,197)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv . LexToken(*,'*',1,197)
   yacc.py: 445:Action : Shift and goto state 193
   yacc.py: 410:
   yacc.py: 411:State  : 193
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv * . LexToken(CTE_INT,'2',1,198)
   yacc.py: 471:Action : Reduce rule [muldiv -> *] with ['*'] and goto state 196
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 196
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv . LexToken(CTE_INT,'2',1,198)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv CTE_INT . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['2'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv varcte1 . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv varcte . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 212
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 212
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv factor . LexToken(),')',1,199)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 223
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 223
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv factor n_quad_muldiv . LexToken(),')',1,199)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv factor n_quad_muldiv n_quad_not . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 229
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 229
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv muldiv factor n_quad_muldiv term2 . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [term2 -> muldiv factor n_quad_muldiv term2] with [None,None,None,None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term_not factor n_quad_muldiv term2 . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term . LexToken(),')',1,199)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term empty . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size term exp2 . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size exp . LexToken(),')',1,199)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size exp empty . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size exp exp02 . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size exp0 . LexToken(),')',1,199)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size exp0 empty . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size exp0 expression2 . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 119
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 119
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size expression . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [n_verify_argument -> expression] with [None] and goto state 120
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 120
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size n_verify_argument . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [function_call2 -> n_verify_argument] with [None] and goto state 117
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 117
   yacc.py: 430:Defaulted state 117: Reduce using 53
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size function_call2 . LexToken(),')',1,199)
   yacc.py: 471:Action : Reduce rule [function_call1 -> function_call2] with [None] and goto state 118
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 118
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size function_call1 . LexToken(),')',1,199)
   yacc.py: 445:Action : Shift and goto state 167
   yacc.py: 410:
   yacc.py: 411:State  : 167
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement n_era_size function_call1 ) . LexToken(;,';',1,200)
   yacc.py: 471:Action : Reduce rule [function_call -> n_era_size function_call1 )] with [None,None,')'] and goto state 73
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 73
   yacc.py: 430:Defaulted state 73: Reduce using 72
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement function_call . LexToken(;,';',1,200)
   yacc.py: 471:Action : Reduce rule [statement1 -> function_call] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement1 . LexToken(;,';',1,200)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement1 ; . LexToken(PRINT,'print',1,206)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement . LexToken(PRINT,'print',1,206)
   yacc.py: 445:Action : Shift and goto state 76
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT . LexToken((,'(',1,211)
   yacc.py: 445:Action : Shift and goto state 112
   yacc.py: 410:
   yacc.py: 411:State  : 112
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( . LexToken(ID,'a',1,212)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( empty . LexToken(ID,'a',1,212)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not . LexToken(ID,'a',1,212)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not ID . LexToken(),')',1,213)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not ID empty . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not varcte . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not factor . LexToken(),')',1,213)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not factor n_quad_muldiv . LexToken(),')',1,213)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not factor n_quad_muldiv n_quad_not . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term_not factor n_quad_muldiv term2 . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term . LexToken(),')',1,213)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term empty . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( term exp2 . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( exp . LexToken(),')',1,213)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( exp empty . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( exp exp02 . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( exp0 . LexToken(),')',1,213)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( exp0 empty . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( exp0 expression2 . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 164
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( expression . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [n_output_quad -> expression] with [None] and goto state 163
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 163
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( n_output_quad . LexToken(),')',1,213)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 185
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 185
   yacc.py: 430:Defaulted state 185: Reduce using 48
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( n_output_quad empty . LexToken(),')',1,213)
   yacc.py: 471:Action : Reduce rule [output1 -> empty] with [None] and goto state 183
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( n_output_quad output1 . LexToken(),')',1,213)
   yacc.py: 445:Action : Shift and goto state 203
   yacc.py: 410:
   yacc.py: 411:State  : 203
   yacc.py: 430:Defaulted state 203: Reduce using 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement PRINT ( n_output_quad output1 ) . None
   yacc.py: 471:Action : Reduce rule [output -> PRINT ( n_output_quad output1 )] with ['print','(',None,None,')'] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 430:Defaulted state 94: Reduce using 66
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement output . None
   yacc.py: 471:Action : Reduce rule [statement1 -> output] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement1 . LexToken(;,';',1,214)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement1 ; . LexToken(ID,'i',1,220)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement . LexToken(ID,'i',1,220)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement ID . LexToken(ASSIGNATOR,':=',1,222)
   yacc.py: 471:Action : Reduce rule [assignment2 -> ID] with ['i'] and goto state 78
   yacc.py: 506:Result : <str @ 0x7eff97079aa8> ('i')
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 . LexToken(ASSIGNATOR,':=',1,222)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR . LexToken(ID,'i',1,225)
   yacc.py: 474:Action : Reduce rule [n_quad_assign -> <empty>] with [] and goto state 166
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign . LexToken(ID,'i',1,225)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign empty . LexToken(ID,'i',1,225)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not . LexToken(ID,'i',1,225)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not ID . LexToken(-,'-',1,227)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not ID empty . LexToken(-,'-',1,227)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['i',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97079aa8> ('i')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not varcte . LexToken(-,'-',1,227)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['i'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor . LexToken(-,'-',1,227)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv . LexToken(-,'-',1,227)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv n_quad_not . LexToken(-,'-',1,227)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv term2 . LexToken(-,'-',1,227)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term . LexToken(-,'-',1,227)
   yacc.py: 445:Action : Shift and goto state 143
   yacc.py: 410:
   yacc.py: 411:State  : 143
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term - . LexToken(CTE_INT,'1',1,229)
   yacc.py: 471:Action : Reduce rule [addsub -> -] with ['-'] and goto state 144
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub . LexToken(CTE_INT,'1',1,229)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub empty . LexToken(CTE_INT,'1',1,229)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not . LexToken(CTE_INT,'1',1,229)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not CTE_INT . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['1'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not varcte1 . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not varcte . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor . LexToken(;,';',1,230)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv . LexToken(;,';',1,230)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv term2 . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 176
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 176
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term . LexToken(;,';',1,230)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 198
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 198
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub . LexToken(;,';',1,230)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub empty . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 214
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub exp2 . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign term exp2 . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign exp . LexToken(;,';',1,230)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign exp empty . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign exp exp02 . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign exp0 . LexToken(;,';',1,230)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign exp0 empty . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign exp0 expression2 . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 186
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 186
   yacc.py: 430:Defaulted state 186: Reduce using 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment2 ASSIGNATOR n_quad_assign expression . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [assignment -> assignment2 ASSIGNATOR n_quad_assign expression] with ['i',':=',None,None] and goto state 86
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 430:Defaulted state 86: Reduce using 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement assignment . LexToken(;,';',1,230)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement statement1 . LexToken(;,';',1,230)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement statement1 ; . LexToken(},'}',1,234)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement statement . LexToken(},'}',1,234)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 81
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 81
   yacc.py: 430:Defaulted state 81: Reduce using 132
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement statement empty . LexToken(},'}',1,234)
   yacc.py: 471:Action : Reduce rule [statement_aux -> empty] with [None] and goto state 115
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 115
   yacc.py: 430:Defaulted state 115: Reduce using 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement statement statement_aux . LexToken(},'}',1,234)
   yacc.py: 471:Action : Reduce rule [statement_aux -> statement statement_aux] with [None,None] and goto state 115
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 115
   yacc.py: 430:Defaulted state 115: Reduce using 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement statement_aux . LexToken(},'}',1,234)
   yacc.py: 471:Action : Reduce rule [statement_aux -> statement statement_aux] with [None,None] and goto state 115
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 115
   yacc.py: 430:Defaulted state 115: Reduce using 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement statement_aux . LexToken(},'}',1,234)
   yacc.py: 471:Action : Reduce rule [statement_aux -> statement statement_aux] with [None,None] and goto state 115
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 115
   yacc.py: 430:Defaulted state 115: Reduce using 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement statement_aux . LexToken(},'}',1,234)
   yacc.py: 471:Action : Reduce rule [statement_aux -> statement statement_aux] with [None,None] and goto state 225
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 225
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement_aux . LexToken(},'}',1,234)
   yacc.py: 445:Action : Shift and goto state 231
   yacc.py: 410:
   yacc.py: 411:State  : 231
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 { statement_aux } . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [block -> { statement_aux }] with ['{',None,'}'] and goto state 224
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 224
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 block . LexToken(},'}',1,236)
   yacc.py: 474:Action : Reduce rule [n_while_3 -> <empty>] with [] and goto state 230
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 230
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement WHILE n_while_1 ( expression ) n_while_2 block n_while_3 . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [while -> WHILE n_while_1 ( expression ) n_while_2 block n_while_3] with ['while',None,'(',None,')',None,None,None] and goto state 93
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement while . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [statement2 -> while] with [None] and goto state 83
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 83
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement statement2 . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [statement -> statement2] with [None] and goto state 98
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement statement . LexToken(},'}',1,236)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 99
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 99
   yacc.py: 430:Defaulted state 99: Reduce using 23
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement statement empty . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [proc4 -> empty] with [None] and goto state 126
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 126
   yacc.py: 430:Defaulted state 126: Reduce using 22
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement statement proc4 . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 126
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 126
   yacc.py: 430:Defaulted state 126: Reduce using 22
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter statement proc4 . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [proc4 -> statement proc4] with [None,None] and goto state 97
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 97
   yacc.py: 430:Defaulted state 97: Reduce using 20
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var n_quad_counter proc4 . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [proc3 -> n_quad_counter proc4] with [None,None] and goto state 100
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 100
   yacc.py: 430:Defaulted state 100: Reduce using 19
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { var proc3 . LexToken(},'}',1,236)
   yacc.py: 471:Action : Reduce rule [proc3 -> var proc3] with ['int i',None] and goto state 65
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 65
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { proc3 . LexToken(},'}',1,236)
   yacc.py: 445:Action : Shift and goto state 96
   yacc.py: 410:
   yacc.py: 411:State  : 96
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 proc1 ) { proc3 } . LexToken(MAIN,'main',1,239)
   yacc.py: 471:Action : Reduce rule [procA -> proc1 ) { proc3 }] with [None,')','{',None,'}'] and goto state 40
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc VOID proca2 procA . LexToken(MAIN,'main',1,239)
   yacc.py: 471:Action : Reduce rule [proc -> VOID proca2 procA] with ['void',None,None] and goto state 14
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc . LexToken(MAIN,'main',1,239)
   yacc.py: 445:Action : Shift and goto state 23
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 430:Defaulted state 23: Reduce using 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN . None
   yacc.py: 474:Action : Reduce rule [n_clear_scope -> <empty>] with [] and goto state 38
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope . LexToken({,'{',1,244)
   yacc.py: 445:Action : Shift and goto state 53
   yacc.py: 410:
   yacc.py: 411:State  : 53
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { . LexToken(ID,'a',1,251)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 63
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 63
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { empty . LexToken(ID,'a',1,251)
   yacc.py: 471:Action : Reduce rule [vars_aux -> empty] with [None] and goto state 61
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 61
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux . LexToken(ID,'a',1,251)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux ID . LexToken(ASSIGNATOR,':=',1,253)
   yacc.py: 471:Action : Reduce rule [assignment2 -> ID] with ['a'] and goto state 78
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 . LexToken(ASSIGNATOR,':=',1,253)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR . LexToken(CTE_INT,'3',1,256)
   yacc.py: 474:Action : Reduce rule [n_quad_assign -> <empty>] with [] and goto state 166
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign . LexToken(CTE_INT,'3',1,256)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign empty . LexToken(CTE_INT,'3',1,256)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not . LexToken(CTE_INT,'3',1,256)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not CTE_INT . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['3'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not varcte1 . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not varcte . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not factor . LexToken(;,';',1,257)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv . LexToken(;,';',1,257)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv term2 . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term . LexToken(;,';',1,257)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term empty . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign term exp2 . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign exp . LexToken(;,';',1,257)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign exp empty . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign exp exp02 . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign exp0 . LexToken(;,';',1,257)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign exp0 empty . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign exp0 expression2 . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 186
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 186
   yacc.py: 430:Defaulted state 186: Reduce using 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment2 ASSIGNATOR n_quad_assign expression . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [assignment -> assignment2 ASSIGNATOR n_quad_assign expression] with ['a',':=',None,None] and goto state 86
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 430:Defaulted state 86: Reduce using 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux assignment . LexToken(;,';',1,257)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement1 . LexToken(;,';',1,257)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement1 ; . LexToken(ID,'b',1,264)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement . LexToken(ID,'b',1,264)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement ID . LexToken(ASSIGNATOR,':=',1,266)
   yacc.py: 471:Action : Reduce rule [assignment2 -> ID] with ['b'] and goto state 78
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 . LexToken(ASSIGNATOR,':=',1,266)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR . LexToken(ID,'a',1,269)
   yacc.py: 474:Action : Reduce rule [n_quad_assign -> <empty>] with [] and goto state 166
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign . LexToken(ID,'a',1,269)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign empty . LexToken(ID,'a',1,269)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not . LexToken(ID,'a',1,269)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not ID . LexToken(+,'+',1,271)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not ID empty . LexToken(+,'+',1,271)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not varcte . LexToken(+,'+',1,271)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not factor . LexToken(+,'+',1,271)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv . LexToken(+,'+',1,271)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,271)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,271)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term . LexToken(+,'+',1,271)
   yacc.py: 445:Action : Shift and goto state 142
   yacc.py: 410:
   yacc.py: 411:State  : 142
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term + . LexToken(CTE_INT,'1',1,273)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 144
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub . LexToken(CTE_INT,'1',1,273)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub empty . LexToken(CTE_INT,'1',1,273)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not . LexToken(CTE_INT,'1',1,273)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not CTE_INT . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['1'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not varcte1 . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not varcte . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor . LexToken(;,';',1,274)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv . LexToken(;,';',1,274)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term_not factor n_quad_muldiv term2 . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 176
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 176
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term . LexToken(;,';',1,274)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 198
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 198
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub . LexToken(;,';',1,274)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub empty . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 214
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term addsub term n_quad_addsub exp2 . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign term exp2 . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign exp . LexToken(;,';',1,274)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign exp empty . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign exp exp02 . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign exp0 . LexToken(;,';',1,274)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign exp0 empty . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign exp0 expression2 . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 186
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 186
   yacc.py: 430:Defaulted state 186: Reduce using 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment2 ASSIGNATOR n_quad_assign expression . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [assignment -> assignment2 ASSIGNATOR n_quad_assign expression] with ['b',':=',None,None] and goto state 86
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 430:Defaulted state 86: Reduce using 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement assignment . LexToken(;,';',1,274)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement1 . LexToken(;,';',1,274)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement1 ; . LexToken(PRINT,'print',1,282)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement . LexToken(PRINT,'print',1,282)
   yacc.py: 445:Action : Shift and goto state 76
   yacc.py: 410:
   yacc.py: 411:State  : 76
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT . LexToken((,'(',1,287)
   yacc.py: 445:Action : Shift and goto state 112
   yacc.py: 410:
   yacc.py: 411:State  : 112
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( . LexToken(ID,'a',1,288)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( empty . LexToken(ID,'a',1,288)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not . LexToken(ID,'a',1,288)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID . LexToken(,,',',1,289)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not ID empty . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not varcte . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor . LexToken(,,',',1,289)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor n_quad_muldiv . LexToken(,,',',1,289)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor n_quad_muldiv n_quad_not . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term_not factor n_quad_muldiv term2 . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term . LexToken(,,',',1,289)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term empty . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( term exp2 . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp . LexToken(,,',',1,289)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp empty . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp exp02 . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp0 . LexToken(,,',',1,289)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp0 empty . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( exp0 expression2 . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 164
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( expression . LexToken(,,',',1,289)
   yacc.py: 471:Action : Reduce rule [n_output_quad -> expression] with [None] and goto state 163
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 163
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad . LexToken(,,',',1,289)
   yacc.py: 445:Action : Shift and goto state 184
   yacc.py: 410:
   yacc.py: 411:State  : 184
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , . LexToken(ID,'b',1,291)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , empty . LexToken(ID,'b',1,291)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not . LexToken(ID,'b',1,291)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not ID . LexToken(),')',1,292)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not ID empty . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not varcte . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not factor . LexToken(),')',1,292)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not factor n_quad_muldiv . LexToken(),')',1,292)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not factor n_quad_muldiv n_quad_not . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term_not factor n_quad_muldiv term2 . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term . LexToken(),')',1,292)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term empty . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , term exp2 . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , exp . LexToken(),')',1,292)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , exp empty . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , exp exp02 . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , exp0 . LexToken(),')',1,292)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , exp0 empty . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , exp0 expression2 . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 164
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 164
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , expression . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [n_output_quad -> expression] with [None] and goto state 204
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 204
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , n_output_quad . LexToken(),')',1,292)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 185
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 185
   yacc.py: 430:Defaulted state 185: Reduce using 48
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , n_output_quad empty . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [output1 -> empty] with [None] and goto state 218
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 218
   yacc.py: 430:Defaulted state 218: Reduce using 47
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad , n_output_quad output1 . LexToken(),')',1,292)
   yacc.py: 471:Action : Reduce rule [output1 -> , n_output_quad output1] with [',',None,None] and goto state 183
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 183
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad output1 . LexToken(),')',1,292)
   yacc.py: 445:Action : Shift and goto state 203
   yacc.py: 410:
   yacc.py: 411:State  : 203
   yacc.py: 430:Defaulted state 203: Reduce using 46
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement PRINT ( n_output_quad output1 ) . None
   yacc.py: 471:Action : Reduce rule [output -> PRINT ( n_output_quad output1 )] with ['print','(',None,None,')'] and goto state 94
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 94
   yacc.py: 430:Defaulted state 94: Reduce using 66
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement output . None
   yacc.py: 471:Action : Reduce rule [statement1 -> output] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement1 . LexToken(;,';',1,293)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement1 ; . LexToken(ID,'f',1,300)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement . LexToken(ID,'f',1,300)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement ID . LexToken(ASSIGNATOR,':=',1,302)
   yacc.py: 471:Action : Reduce rule [assignment2 -> ID] with ['f'] and goto state 78
   yacc.py: 506:Result : <str @ 0x7eff970797d8> ('f')
   yacc.py: 410:
   yacc.py: 411:State  : 78
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 . LexToken(ASSIGNATOR,':=',1,302)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR . LexToken(CTE_FLOAT,'3.14',1,305)
   yacc.py: 474:Action : Reduce rule [n_quad_assign -> <empty>] with [] and goto state 166
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 166
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign . LexToken(CTE_FLOAT,'3.14',1,305)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign empty . LexToken(CTE_FLOAT,'3.14',1,305)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not . LexToken(CTE_FLOAT,'3.14',1,305)
   yacc.py: 445:Action : Shift and goto state 137
   yacc.py: 410:
   yacc.py: 411:State  : 137
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not CTE_FLOAT . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_FLOAT] with ['3.14'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not varcte1 . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not varcte . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor . LexToken(;,';',1,309)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv . LexToken(;,';',1,309)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv n_quad_not . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term_not factor n_quad_muldiv term2 . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term . LexToken(;,';',1,309)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term empty . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign term exp2 . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign exp . LexToken(;,';',1,309)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign exp empty . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign exp exp02 . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign exp0 . LexToken(;,';',1,309)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign exp0 empty . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign exp0 expression2 . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 186
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 186
   yacc.py: 430:Defaulted state 186: Reduce using 30
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment2 ASSIGNATOR n_quad_assign expression . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [assignment -> assignment2 ASSIGNATOR n_quad_assign expression] with ['f',':=',None,None] and goto state 86
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 86
   yacc.py: 430:Defaulted state 86: Reduce using 64
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement assignment . LexToken(;,';',1,309)
   yacc.py: 471:Action : Reduce rule [statement1 -> assignment] with [None] and goto state 84
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement1 . LexToken(;,';',1,309)
   yacc.py: 445:Action : Shift and goto state 116
   yacc.py: 410:
   yacc.py: 411:State  : 116
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement1 ; . LexToken(ID,'dos',1,316)
   yacc.py: 471:Action : Reduce rule [statement -> statement1 ;] with [None,';'] and goto state 79
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement . LexToken(ID,'dos',1,316)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement ID . LexToken((,'(',1,319)
   yacc.py: 445:Action : Shift and goto state 122
   yacc.py: 410:
   yacc.py: 411:State  : 122
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement ID ( . LexToken(ID,'a',1,320)
   yacc.py: 471:Action : Reduce rule [n_era_size -> ID (] with ['dos','('] and goto state 85
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size . LexToken(ID,'a',1,320)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 121
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 121
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size empty . LexToken(ID,'a',1,320)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not . LexToken(ID,'a',1,320)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not ID . LexToken(+,'+',1,322)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not ID empty . LexToken(+,'+',1,322)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['a',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff97062580> ('a')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not varcte . LexToken(+,'+',1,322)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['a'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not factor . LexToken(+,'+',1,322)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not factor n_quad_muldiv . LexToken(+,'+',1,322)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not factor n_quad_muldiv n_quad_not . LexToken(+,'+',1,322)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term_not factor n_quad_muldiv term2 . LexToken(+,'+',1,322)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term . LexToken(+,'+',1,322)
   yacc.py: 445:Action : Shift and goto state 142
   yacc.py: 410:
   yacc.py: 411:State  : 142
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term + . LexToken(ID,'b',1,324)
   yacc.py: 471:Action : Reduce rule [addsub -> +] with ['+'] and goto state 144
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 144
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub . LexToken(ID,'b',1,324)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub empty . LexToken(ID,'b',1,324)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not . LexToken(ID,'b',1,324)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not ID . LexToken(*,'*',1,326)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not ID empty . LexToken(*,'*',1,326)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['b',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970625a8> ('b')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not varcte . LexToken(*,'*',1,326)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['b'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor . LexToken(*,'*',1,326)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv . LexToken(*,'*',1,326)
   yacc.py: 445:Action : Shift and goto state 193
   yacc.py: 410:
   yacc.py: 411:State  : 193
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv * . LexToken(CTE_INT,'2',1,328)
   yacc.py: 471:Action : Reduce rule [muldiv -> *] with ['*'] and goto state 196
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 196
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv . LexToken(CTE_INT,'2',1,328)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv CTE_INT . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['2'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv varcte1 . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv varcte . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 212
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 212
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv factor . LexToken(,,',',1,329)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 223
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 223
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv . LexToken(,,',',1,329)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv n_quad_not . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 229
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 229
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv muldiv factor n_quad_muldiv term2 . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [term2 -> muldiv factor n_quad_muldiv term2] with [None,None,None,None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term_not factor n_quad_muldiv term2 . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 176
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 176
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term . LexToken(,,',',1,329)
   yacc.py: 474:Action : Reduce rule [n_quad_addsub -> <empty>] with [] and goto state 198
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 198
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term n_quad_addsub . LexToken(,,',',1,329)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term n_quad_addsub empty . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 214
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 214
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term addsub term n_quad_addsub exp2 . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [exp2 -> addsub term n_quad_addsub exp2] with [None,None,None,None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size term exp2 . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size exp . LexToken(,,',',1,329)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size exp empty . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size exp exp02 . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size exp0 . LexToken(,,',',1,329)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size exp0 empty . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size exp0 expression2 . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 119
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 119
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size expression . LexToken(,,',',1,329)
   yacc.py: 471:Action : Reduce rule [n_verify_argument -> expression] with [None] and goto state 120
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 120
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument . LexToken(,,',',1,329)
   yacc.py: 445:Action : Shift and goto state 168
   yacc.py: 410:
   yacc.py: 411:State  : 168
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , . LexToken(ID,'f',1,331)
   yacc.py: 474:Action : Reduce rule [n_add_one_to_counter -> <empty>] with [] and goto state 187
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 187
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter . LexToken(ID,'f',1,331)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 108
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter empty . LexToken(ID,'f',1,331)
   yacc.py: 471:Action : Reduce rule [term_not -> empty] with [None] and goto state 102
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 102
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not . LexToken(ID,'f',1,331)
   yacc.py: 445:Action : Shift and goto state 135
   yacc.py: 410:
   yacc.py: 411:State  : 135
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not ID . LexToken(*,'*',1,333)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 175
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 175
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not ID empty . LexToken(*,'*',1,333)
   yacc.py: 471:Action : Reduce rule [varcte -> ID empty] with ['f',None] and goto state 129
   yacc.py: 506:Result : <str @ 0x7eff970797d8> ('f')
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not varcte . LexToken(*,'*',1,333)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with ['f'] and goto state 131
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 131
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor . LexToken(*,'*',1,333)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 173
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 173
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv . LexToken(*,'*',1,333)
   yacc.py: 445:Action : Shift and goto state 193
   yacc.py: 410:
   yacc.py: 411:State  : 193
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv * . LexToken(CTE_INT,'3',1,335)
   yacc.py: 471:Action : Reduce rule [muldiv -> *] with ['*'] and goto state 196
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 196
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv . LexToken(CTE_INT,'3',1,335)
   yacc.py: 445:Action : Shift and goto state 134
   yacc.py: 410:
   yacc.py: 411:State  : 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv CTE_INT . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [varcte1 -> CTE_INT] with ['3'] and goto state 128
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 128
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv varcte1 . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [varcte -> varcte1] with [None] and goto state 129
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 129
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv varcte . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [factor -> varcte] with [None] and goto state 212
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 212
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv factor . LexToken(),')',1,336)
   yacc.py: 474:Action : Reduce rule [n_quad_muldiv -> <empty>] with [] and goto state 223
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 223
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv factor n_quad_muldiv . LexToken(),')',1,336)
   yacc.py: 474:Action : Reduce rule [n_quad_not -> <empty>] with [] and goto state 194
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 194
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv factor n_quad_muldiv n_quad_not . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [term2 -> n_quad_not] with [None] and goto state 229
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 229
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv muldiv factor n_quad_muldiv term2 . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [term2 -> muldiv factor n_quad_muldiv term2] with [None,None,None,None] and goto state 192
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 192
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term_not factor n_quad_muldiv term2 . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [term -> term_not factor n_quad_muldiv term2] with [None,None,None,None] and goto state 103
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 103
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term . LexToken(),')',1,336)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 145
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 145
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term empty . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [exp2 -> empty] with [None] and goto state 141
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 141
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter term exp2 . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [exp -> term exp2] with [None,None] and goto state 106
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 106
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter exp . LexToken(),')',1,336)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 158
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 158
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter exp empty . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [exp02 -> empty] with [None] and goto state 155
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 155
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter exp exp02 . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [exp0 -> exp exp02] with [None,None] and goto state 104
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 104
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter exp0 . LexToken(),')',1,336)
   yacc.py: 474:Action : Reduce rule [empty -> <empty>] with [] and goto state 150
   yacc.py: 548:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 150
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter exp0 empty . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [expression2 -> empty] with [None] and goto state 148
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 148
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter exp0 expression2 . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [expression -> exp0 expression2] with [None,None] and goto state 119
   yacc.py: 506:Result : <NoneType @ 0x564a486ed560> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 119
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter expression . LexToken(),')',1,336)
   yacc.py: 471:Action : Reduce rule [n_verify_argument -> expression] with [None] and goto state 120
   yacc.py: 410:
   yacc.py: 411:State  : 187
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , n_add_one_to_counter . error
   yacc.py: 410:
   yacc.py: 411:State  : 168
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument , . error
   yacc.py: 410:
   yacc.py: 411:State  : 120
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size n_verify_argument . error
   yacc.py: 410:
   yacc.py: 411:State  : 85
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement n_era_size . error
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement statement . error
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement statement . error
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement statement . error
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux statement . error
   yacc.py: 410:
   yacc.py: 411:State  : 61
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { vars_aux . error
   yacc.py: 410:
   yacc.py: 411:State  : 53
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope { . error
   yacc.py: 410:
   yacc.py: 411:State  : 38
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN n_clear_scope . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN n_clear_scope . error
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 430:Defaulted state 23: Reduce using 134
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN . error
   yacc.py: 474:Action : Reduce rule [n_clear_scope -> <empty>] with [] and goto state 38
   yacc.py: 410:
   yacc.py: 411:State  : 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc MAIN . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc MAIN . error
   yacc.py: 410:
   yacc.py: 411:State  : 14
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc proc . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc proc . error
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 435:Stack  : PROGRAM ID ; var var proc . error
   yacc.py: 580:Error  : PROGRAM ID ; var var proc . error
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 435:Stack  : PROGRAM ID ; var var . error
   yacc.py: 580:Error  : PROGRAM ID ; var var . error
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 435:Stack  : PROGRAM ID ; var . error
   yacc.py: 580:Error  : PROGRAM ID ; var . error
   yacc.py: 410:
   yacc.py: 411:State  : 3
   yacc.py: 435:Stack  : PROGRAM ID ; . error
   yacc.py: 580:Error  : PROGRAM ID ; . error
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 435:Stack  : PROGRAM ID . error
   yacc.py: 580:Error  : PROGRAM ID . error
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . error
   yacc.py: 580:Error  : PROGRAM . error
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(;,';',1,337)
   yacc.py: 580:Error  : PROGRAM . LexToken(;,';',1,337)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(PRINT,'print',1,344)
   yacc.py: 580:Error  : PROGRAM . LexToken(PRINT,'print',1,344)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken((,'(',1,349)
   yacc.py: 580:Error  : PROGRAM . LexToken((,'(',1,349)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(ID,'a',1,350)
   yacc.py: 580:Error  : PROGRAM . LexToken(ID,'a',1,350)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(,,',',1,351)
   yacc.py: 580:Error  : PROGRAM . LexToken(,,',',1,351)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(ID,'b',1,353)
   yacc.py: 580:Error  : PROGRAM . LexToken(ID,'b',1,353)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(,,',',1,354)
   yacc.py: 580:Error  : PROGRAM . LexToken(,,',',1,354)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(ID,'f',1,356)
   yacc.py: 580:Error  : PROGRAM . LexToken(ID,'f',1,356)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(*,'*',1,358)
   yacc.py: 580:Error  : PROGRAM . LexToken(*,'*',1,358)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(CTE_INT,'2',1,360)
   yacc.py: 580:Error  : PROGRAM . LexToken(CTE_INT,'2',1,360)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(+,'+',1,362)
   yacc.py: 580:Error  : PROGRAM . LexToken(+,'+',1,362)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(CTE_INT,'1',1,364)
   yacc.py: 580:Error  : PROGRAM . LexToken(CTE_INT,'1',1,364)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(),')',1,365)
   yacc.py: 580:Error  : PROGRAM . LexToken(),')',1,365)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(;,';',1,366)
   yacc.py: 580:Error  : PROGRAM . LexToken(;,';',1,366)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . LexToken(},'}',1,368)
   yacc.py: 580:Error  : PROGRAM . LexToken(},'}',1,368)
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 435:Stack  : PROGRAM . $end
   yacc.py: 580:Error  : PROGRAM . $end
